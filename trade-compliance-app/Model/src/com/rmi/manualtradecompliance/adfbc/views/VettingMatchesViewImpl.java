package com.rmi.manualtradecompliance.adfbc.views;

import com.rmi.manualtradecompliance.adfbc.extensions.VettingMatchesList;

import com.rmi.manualtradecompliance.adfbc.utils.AdfUtils;

import java.sql.CallableStatement;
import java.sql.ResultSet;

import java.sql.SQLException;
import java.sql.Types;
import java.sql.Array;
import java.sql.Struct;

import java.util.ArrayList;

import javax.faces.application.FacesMessage;

import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import oracle.sql.Datum;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Mar 12 11:31:09 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class VettingMatchesViewImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public VettingMatchesViewImpl() 
    {
    }
    
    private ArrayList<VettingMatchesList> vettingMatchesList = new ArrayList<VettingMatchesList>();
    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams)
    {
        CallableStatement st = null;
        Datum[] arrMessage = null;
        try 
        {
            String sql = "BEGIN RMI_GENERIC_TC.POPULATE_TREE_DATA(?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            st.setObject(1, "JOHN"); //MAIL SERVER
            st.registerOutParameter(2, Types.ARRAY, "XREF_TREE_TAB_T");
            st.execute();
            Array p2arr = null;
            p2arr = st.getArray(2);
            arrMessage = (Datum[]) p2arr.getArray();
            
            vettingMatchesList.clear();

            for (int i = 0; i < arrMessage.length; i++) 
            {
                Struct os = (Struct) arrMessage[i];
                Object[] a = os.getAttributes();
                
                for (int j = 0; j < a.length; j++) 
                {
//                    System.out.println("a["+j+"] ::"+a[j]);
                    vettingMatchesList.add(new VettingMatchesList(
                                               ((a[0] != null) ? a[0].toString() : "-"),
                                               ((a[1] != null) ? a[1].toString() : "-"),
                                               ((a[2] != null) ? a[2].toString() : "-"),
                                               ((a[3] != null) ? a[3].toString() : "-"),
                                               ((a[4] != null) ? a[4].toString() : "-"),
                                               ((a[5] != null) ? a[5].toString() : "-"),
                                               ((a[6] != null) ? a[6].toString() : "-"),
                                               ((a[7] != null) ? a[7].toString() : "-"))
                                           );
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                                   "Please contact your System Administrator.", "",
                                                   FacesMessage.SEVERITY_ERROR);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                                           "Please contact your System Administrator.", "",
                                                           FacesMessage.SEVERITY_ERROR);
                }
            }
        }
        setFetchIndex(qc, 0);
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        return getFetchIndex(qc) < vettingMatchesList.size();
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) 
    {
        int curIndex = getFetchIndex(qc);
        VettingMatchesViewRowImpl vettingMatchesRow = (VettingMatchesViewRowImpl) createNewRowForCollection(qc);
        
        try 
        {
            createNewRowForCollection(qc);
            vettingMatchesRow.setNameScreened(vettingMatchesList.get(curIndex).getNameScreened());
            vettingMatchesRow.setMatchScore(vettingMatchesList.get(curIndex).getMatchScore());
            vettingMatchesRow.setIdNumber(vettingMatchesList.get(curIndex).getIdNumber());
            vettingMatchesRow.setDateOfBirth(vettingMatchesList.get(curIndex).getDateOfBirth());
            vettingMatchesRow.setTrans1(vettingMatchesList.get(curIndex).getTrans1());
            vettingMatchesRow.setTrans2(vettingMatchesList.get(curIndex).getTrans2());
            vettingMatchesRow.setTrans3(vettingMatchesList.get(curIndex).getTrans3());
            vettingMatchesRow.setTrans4(vettingMatchesList.get(curIndex).getTrans4());
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                                   "Please contact your System Administrator.", "",
                                                   FacesMessage.SEVERITY_ERROR);
        }
        
        setFetchIndex(qc, curIndex + 1);
        return vettingMatchesRow;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
    
    /**
     * Method to set the new fetch index
     * @param rowset
     * @param index
     */
    private void setFetchIndex(Object rowset, int index) {
        if (index == vettingMatchesList.size()) {
            setFetchCompleteForCollection(rowset, true);
        }
        setUserDataForCollection(rowset, new Integer(index));
    }

    /**
     * Method to get the current fetch index
     * @param rowset
     * @return
     *
     */
    private int getFetchIndex(Object rowset) {
        int value = ((Integer) getUserDataForCollection(rowset)).intValue();
        return value;
    }
}

