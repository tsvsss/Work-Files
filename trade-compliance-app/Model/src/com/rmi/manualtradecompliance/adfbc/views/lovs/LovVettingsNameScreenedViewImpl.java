package com.rmi.manualtradecompliance.adfbc.views.lovs;

import java.util.ArrayList;

import oracle.jbo.Variable;
import oracle.jbo.ViewCriteriaItem;
import oracle.jbo.ViewCriteriaItemValue;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Dec 02 16:01:01 IST 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LovVettingsNameScreenedViewImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public LovVettingsNameScreenedViewImpl() {
    }

    /**
     * Returns the variable value for pFullName.
     * @return variable value for pFullName
     */
    public String getpFullName() {
        return (String) ensureVariableManager().getVariableValue("pFullName");
    }

    /**
     * Sets <code>value</code> for variable pFullName.
     * @param value value to bind as pFullName
     */
    public void setpFullName(String value) {
        ensureVariableManager().setVariableValue("pFullName", value);
    }

    /**
     * Returns the variable value for pSourceTable.
     * @return variable value for pSourceTable
     */
    public String getpSourceTable() {
        return (String) ensureVariableManager().getVariableValue("pSourceTable");
    }

    /**
     * Sets <code>value</code> for variable pSourceTable.
     * @param value value to bind as pSourceTable
     */
    public void setpSourceTable(String value) {
        ensureVariableManager().setVariableValue("pSourceTable", value);
    }

    /**
     * Returns the variable value for pEntityType.
     * @return variable value for pEntityType
     */
    public String getpEntityType() {
        return (String) ensureVariableManager().getVariableValue("pEntityType");
    }

    /**
     * Sets <code>value</code> for variable pEntityType.
     * @param value value to bind as pEntityType
     */
    public void setpEntityType(String value) {
        ensureVariableManager().setVariableValue("pEntityType", value);
    }

    /**
     * Returns the variable value for pSourceId.
     * @return variable value for pSourceId
     */
    public Integer getpSourceId() {
        return (Integer) ensureVariableManager().getVariableValue("pSourceId");
    }

    /**
     * Sets <code>value</code> for variable pSourceId.
     * @param value value to bind as pSourceId
     */
    public void setpSourceId(Integer value) {
        ensureVariableManager().setVariableValue("pSourceId", value);
    }

    /**
     * Returns the variable value for pIdentifier.
     * @return variable value for pIdentifier
     */
    public String getpIdentifier() {
        return (String) ensureVariableManager().getVariableValue("pIdentifier");
    }

    /**
     * Sets <code>value</code> for variable pIdentifier.
     * @param value value to bind as pIdentifier
     */
    public void setpIdentifier(String value) {
        ensureVariableManager().setVariableValue("pIdentifier", value);
    }

    //T20211124.0016 - Search Function - High Priority
    @Override
    public String getCriteriaItemClause(ViewCriteriaItem viewCriteriaItem) {
        // TODO Implement this method
        System.out.println("VOImpl ViewCriteria Name:"+viewCriteriaItem.getViewCriteria().getName());
        if("LovVettingsNameScreenedViewCriteria".equals(viewCriteriaItem.getViewCriteria().getName())) {
            ArrayList<ViewCriteriaItemValue> lArrayList = viewCriteriaItem.getValues();
            System.out.println("lArrayList:"+lArrayList);
                        if (lArrayList != null && !lArrayList.isEmpty()) {
                            // check if the criteria item has bind parameters (only the first if of interest here as the IN clause onlyallows one parameter)
                            ViewCriteriaItemValue itemValue = (ViewCriteriaItemValue) lArrayList.get(0);
                            System.out.println("itemValue isbindvar:"+itemValue.getIsBindVar());
                            if (itemValue.getIsBindVar()) {
                                // get variable and check if null values should be ignored for bind parameters
                                Variable lBindVariable = itemValue.getBindVariable();
                                  // only handle queries send to the db
                                if (viewCriteriaItem.getViewCriteria()
                                        .getRootViewCriteria()
                                        .isCriteriaForQuery()) {
                                    System.out.println("if condition:"+viewCriteriaItem.getOperator());
                                    
                                    //T20211215.0029 - Create Vetting Popup changes
                                    String sql_clause = null;
                                    
                                    if("CONTAINS".equals(viewCriteriaItem.getOperator()))
                                        sql_clause = createCustomClause(viewCriteriaItem, lBindVariable);                                        
                                    else
                                        return super.getCriteriaItemClause(viewCriteriaItem);
                                    
                                    
                                    return sql_clause;
                                } else {
                                    // bind variable not set or
                                    // for in memory we don't need to anything so just return '1=1'
                                    System.out.println("1=1");
                                    return "1=1";
                                }
                            }
                        }
        }
        return super.getCriteriaItemClause(viewCriteriaItem);
    }
    
    //T20211124.0016 - Search Function - High Priority
    private String createCustomClause(ViewCriteriaItem aVCI, Variable lBindVariable) {
            // start build the sql 'IN' where clause (COLUMN is the name of the column, bindParam the name of the bind variable):
            // COLUMN IN (SELECT regexp_substr(:bindParam,'[^,]+',1,level) FROM dual CONNECT BY regexp_substr(:bindParam,'[^,]+',1,level) IS NOT NULL
            // get flagg to create an sql where clause which ignores the case of the bind parameter
            String sql_in_clause = null;
            StringBuilder sql = new StringBuilder();
            
            //T20220412.0031  vetting creation error (IRI)
            //sql.append("XWRL_UTILS.CLEANSE_NAME(UPPER(");
            sql.append(aVCI.getColumnNameForQuery());
            System.out.println("aVCI.getColumnNameForQuery():"+aVCI.getColumnNameForQuery());
            //sql.append("))");
            
            sql.append(" LIKE");
            
            //sql.append(" '%' || REPLACE(XWRL_UTILS.CLEANSE_NAME(UPPER(");
            //sql.append(" :");
            //sql.append(lBindVariable.getName());
            //sql.append(" )),' ','%') || '%'");
            sql.append("'%'||");            
            sql.append(":");
            sql.append(lBindVariable.getName());            
            sql.append("||'%'");
            
            sql_in_clause = sql.toString();
            System.out.println("viewItem Query:"+sql_in_clause);
            return sql_in_clause;
        }


    /**
     * Returns the variable value for pMasterId.
     * @return variable value for pMasterId
     */
    public Integer getpMasterId() {
        return (Integer) ensureVariableManager().getVariableValue("pMasterId");
    }

    /**
     * Sets <code>value</code> for variable pMasterId.
     * @param value value to bind as pMasterId
     */
    public void setpMasterId(Integer value) {
        ensureVariableManager().setVariableValue("pMasterId", value);
    }
}

