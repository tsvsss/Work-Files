package oracle.apps.xwrl.model.view;

import java.math.BigDecimal;

import java.util.HashMap;

import oracle.adf.share.logging.ADFLogger;

import oracle.apps.xwrl.model.view.common.XwrlRequestsView;

import oracle.jbo.AlreadyLockedException;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewLink;
import oracle.jbo.ViewObject;
import oracle.jbo.server.RowFinder;

import oracle.jbo.server.ViewLinkDefImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 23 04:59:43 EDT 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XwrlRequestsViewImpl extends ViewObjectImpl implements XwrlRequestsView {
    /**
     * This is the default constructor (do not remove).
     */
    public XwrlRequestsViewImpl() {
    }
    

    private static ADFLogger LOGGER = ADFLogger.createADFLogger(XwrlRequestsViewImpl.class);
    /**
     * Returns the variable value for varRequestId.
     * @return variable value for varRequestId
     */
    public BigDecimal getvarRequestId() {
        return (BigDecimal) ensureVariableManager().getVariableValue("varRequestId");
    }

    /**
     * Sets <code>value</code> for variable varRequestId.
     * @param value value to bind as varRequestId
     */
    public void setvarRequestId(BigDecimal value) {
        ensureVariableManager().setVariableValue("varRequestId", value);
    }

    /**
     * Returns the variable value for varScreeningRequestId.
     * @return variable value for varScreeningRequestId
     */
    public BigDecimal getvarScreeningRequestId() {
        return (BigDecimal) ensureVariableManager().getVariableValue("varScreeningRequestId");
    }

    /**
     * Sets <code>value</code> for variable varScreeningRequestId.
     * @param value value to bind as varScreeningRequestId
     */
    public void setvarScreeningRequestId(BigDecimal value) {
        ensureVariableManager().setVariableValue("varScreeningRequestId", value);
    }

    /**
     * Returns the variable value for varStatus.
     * @return variable value for varStatus
     */
    public String getvarStatus() {
        return (String) ensureVariableManager().getVariableValue("varStatus");
    }

    /**
     * Sets <code>value</code> for variable varStatus.
     * @param value value to bind as varStatus
     */
    public void setvarStatus(String value) {
        ensureVariableManager().setVariableValue("varStatus", value);
    }

    /**
     * Returns the variable value for varNameScreened.
     * @return variable value for varNameScreened
     */
    public String getvarNameScreened() {
        return (String) ensureVariableManager().getVariableValue("varNameScreened");
    }

    /**
     * Sets <code>value</code> for variable varNameScreened.
     * @param value value to bind as varNameScreened
     */
    public void setvarNameScreened(String value) {
        ensureVariableManager().setVariableValue("varNameScreened", value);
    }

    /**
     * Returns the variable value for varId.
     * @return variable value for varId
     */
    public BigDecimal getvarId() {
        return (BigDecimal) ensureVariableManager().getVariableValue("varId");
    }

    /**
     * Sets <code>value</code> for variable varId.
     * @param value value to bind as varId
     */
    public void setvarId(BigDecimal value) {
        ensureVariableManager().setVariableValue("varId", value);
    }
    
    public void executeFindByKey(BigDecimal requestId){
        LOGGER.finest("executeFindByKey");
        // Note: Use to find record by primary key.  This will update the model.
        Key key = new Key(new Object[] { requestId });
        RowSetIterator rsi = this.getRowSetIterator();
        Row row = rsi.findByKey(key, 1)[0];
    }
    
    public void executeViewCriteria(BigDecimal requestId){
        LOGGER.finest("executeViewCriteria");
        // Note: Use to find record by view criteria.  This will update the model.
        ViewCriteria vc = this.getViewCriteria("XwrlRequestsViewCriteria");        
        this.setvarRequestId(requestId);
        this.applyViewCriteria(vc);
        this.executeQuery(); 
    }
    
    public void executeRowFinder(BigDecimal requestId){
        LOGGER.finest("executeRowFinder");
        // Note: Use to find record by row finder.   This will not update the model.
        //       This is useful when you need to get record(s) without affecting record currency.
        RowFinder finder = this.lookupRowFinder("RequestIdFinder");
        NameValuePairs nvp = new NameValuePairs();
        nvp.setAttribute("Id",requestId);
        RowIterator ri = finder.execute(nvp,this);
        Row r = null;
        String val;
        while (ri.hasNext()){
            r = ri.next();
            val = (String) r.getAttribute("Path");
            LOGGER.finest("val: "+val);
        }
    }

    /**
     * Returns the variable value for pBatchId.
     * @return variable value for pBatchId
     */
    public String getpBatchId() {
        return (String) ensureVariableManager().getVariableValue("pBatchId");
    }

    /**
     * Sets <code>value</code> for variable pBatchId.
     * @param value value to bind as pBatchId
     */
    public void setpBatchId(String value) {
        ensureVariableManager().setVariableValue("pBatchId", value);
    }
    
    public void setLock() {
        Row row = this.getCurrentRow();
        row.lock();
    }

    /**
     * Returns the variable value for pStatus.
     * @return variable value for pStatus
     */
    public String getpStatus() {
        return (String) ensureVariableManager().getVariableValue("pStatus");
    }

    /**
     * Sets <code>value</code> for variable pStatus.
     * @param value value to bind as pStatus
     */
    public void setpStatus(String value) {
        ensureVariableManager().setVariableValue("pStatus", value);
    }
}

