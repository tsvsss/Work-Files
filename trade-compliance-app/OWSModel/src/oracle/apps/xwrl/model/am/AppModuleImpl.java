package oracle.apps.xwrl.model.am;

import java.io.IOException;

import java.math.BigDecimal;
import java.math.BigInteger;

import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.sql.Statement;
import java.sql.Types;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.HashMap;
import java.util.Map;

import javax.faces.context.FacesContext;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import oracle.adf.model.BindingContext;
import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.apps.fnd.ext.common.AppsRequestWrapper;
import oracle.apps.fnd.ext.common.CookieStatus;
import oracle.apps.fnd.ext.common.EBiz;
import oracle.apps.fnd.ext.common.Session;
import oracle.apps.xwrl.model.am.common.AppModule;
import oracle.apps.xwrl.model.view.SicdCountriesViewImpl;
import oracle.apps.xwrl.model.view.WcCityListViewImpl;
import oracle.apps.xwrl.model.view.XwrlAlertDocumentsViewImpl;
import oracle.apps.xwrl.model.view.XwrlAlertNotesViewImpl;
import oracle.apps.xwrl.model.view.XwrlCaseDocumentsViewImpl;
import oracle.apps.xwrl.model.view.XwrlCaseNotesViewImpl;
import oracle.apps.xwrl.model.view.XwrlNoteTemplatesViewImpl;
import oracle.apps.xwrl.model.view.XwrlParametersViewImpl;
import oracle.apps.xwrl.model.view.XwrlRequestEntityColumnsViewImpl;
import oracle.apps.xwrl.model.view.XwrlRequestIndColumnsViewImpl;
import oracle.apps.xwrl.model.view.XwrlRequestsViewImpl;
import oracle.apps.xwrl.model.view.XwrlResponseEntityColumnsViewImpl;
import oracle.apps.xwrl.model.view.XwrlResponseIndColumnsViewImpl;
import oracle.apps.xwrl.model.view.XwrlResponseRowsViewImpl;

import oracle.jbo.JboException;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaManager;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.RowFinder;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed May 15 09:07:17 EDT 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleImpl extends ApplicationModuleImpl implements AppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleImpl() {
    }
    
    

    private static ADFLogger LOGGER = ADFLogger.createADFLogger(AppModuleImpl.class);

    /**
     * Container's getter for XwrlParametersView1.
     * @return XwrlParametersView1
     */
    public XwrlParametersViewImpl getXwrlParametersView1() {
        return (XwrlParametersViewImpl) findViewObject("XwrlParametersView1");
    }

    /**
     * Container's getter for XwrlRequestsView1.
     * @return XwrlRequestsView1
     */
    public XwrlRequestsViewImpl getXwrlRequestsView1() {
        return (XwrlRequestsViewImpl) findViewObject("XwrlRequestsView1");
    }

    /**
     * Container's getter for XwrlRequestEntityColumnsView1.
     * @return XwrlRequestEntityColumnsView1
     */
    public XwrlRequestEntityColumnsViewImpl getXwrlRequestEntityColumnsView1() {
        return (XwrlRequestEntityColumnsViewImpl) findViewObject("XwrlRequestEntityColumnsView1");
    }

    /**
     * Container's getter for XwrlRequestIndColumnsView1.
     * @return XwrlRequestIndColumnsView1
     */
    public XwrlRequestIndColumnsViewImpl getXwrlRequestIndColumnsView1() {
        return (XwrlRequestIndColumnsViewImpl) findViewObject("XwrlRequestIndColumnsView1");
    }


    /**
     * Container's getter for XwrlResponseEntityColumnsView1.
     * @return XwrlResponseEntityColumnsView1
     */
    public XwrlResponseEntityColumnsViewImpl getXwrlResponseEntityColumnsView1() {
        return (XwrlResponseEntityColumnsViewImpl) findViewObject("XwrlResponseEntityColumnsView1");
    }

    /**
     * Container's getter for XwrlResponseIndColumnsView1.
     * @return XwrlResponseIndColumnsView1
     */
    public XwrlResponseIndColumnsViewImpl getXwrlResponseIndColumnsView1() {
        return (XwrlResponseIndColumnsViewImpl) findViewObject("XwrlResponseIndColumnsView1");
    }


    /**
     * Container's getter for XwrlRequestEntityColFk1Link1.
     * @return XwrlRequestEntityColFk1Link1
     */
    public ViewLinkImpl getXwrlRequestEntityColFk1Link1() {
        return (ViewLinkImpl) findViewLink("XwrlRequestEntityColFk1Link1");
    }

    /**
     * Container's getter for XwrlRequestIndColumnsFk1Link1.
     * @return XwrlRequestIndColumnsFk1Link1
     */
    public ViewLinkImpl getXwrlRequestIndColumnsFk1Link1() {
        return (ViewLinkImpl) findViewLink("XwrlRequestIndColumnsFk1Link1");
    }


    /**
     * Container's getter for XwrlResponseEntityColFk1Link1.
     * @return XwrlResponseEntityColFk1Link1
     */
    public ViewLinkImpl getXwrlResponseEntityColFk1Link1() {
        return (ViewLinkImpl) findViewLink("XwrlResponseEntityColFk1Link1");
    }

    /**
     * Container's getter for XwrlResponseIndColumnsFk1Link1.
     * @return XwrlResponseIndColumnsFk1Link1
     */
    public ViewLinkImpl getXwrlResponseIndColumnsFk1Link1() {
        return (ViewLinkImpl) findViewLink("XwrlResponseIndColumnsFk1Link1");
    }

    public ViewObjectImpl getFndResponsibilityView() {
        return (ViewObjectImpl) findViewObject("FndResponsibilityView");
    }

    public ViewObjectImpl getUserRespView() {
        return (ViewObjectImpl) findViewObject("UserRespView");
    }


    /**
     * Container's getter for XwrlResponseRowsView1.
     * @return XwrlResponseRowsView1
     */
    public XwrlResponseRowsViewImpl getXwrlResponseRowsView1() {
        return (XwrlResponseRowsViewImpl) findViewObject("XwrlResponseRowsView1");
    }

    /**
     * Container's getter for CustResponseRowIndLink1.
     * @return CustResponseRowIndLink1
     */
    public ViewLinkImpl getCustResponseRowIndLink1() {
        return (ViewLinkImpl) findViewLink("CustResponseRowIndLink1");
    }

    /**
     * Container's getter for XwrlResponseRowsView2.
     * @return XwrlResponseRowsView2
     */
    public XwrlResponseRowsViewImpl getXwrlResponseRowsView2() {
        return (XwrlResponseRowsViewImpl) findViewObject("XwrlResponseRowsView2");
    }

    /**
     * Container's getter for CustResponseRowEntLink1.
     * @return CustResponseRowEntLink1
     */
    public ViewLinkImpl getCustResponseRowEntLink1() {
        return (ViewLinkImpl) findViewLink("CustResponseRowEntLink1");
    }

    /**
     * Container's getter for XwrlRequestRowsView1.
     * @return XwrlRequestRowsView1
     */
    public ViewObjectImpl getXwrlRequestRowsView1() {
        return (ViewObjectImpl) findViewObject("XwrlRequestRowsView1");
    }

    /**
     * Container's getter for XwrlRequestRowsFk1Link1.
     * @return XwrlRequestRowsFk1Link1
     */
    public ViewLinkImpl getXwrlRequestRowsFk1Link1() {
        return (ViewLinkImpl) findViewLink("XwrlRequestRowsFk1Link1");
    }


    /**
     * Container's getter for WcContentView1.
     * @return WcContentView1
     */
    public ViewObjectImpl getWcContentView1() {
        return (ViewObjectImpl) findViewObject("WcContentView1");
    }

    /**
     * Container's getter for CustContentRequestLink1.
     * @return CustContentRequestLink1
     */
    public ViewLinkImpl getCustContentRequestLink1() {
        return (ViewLinkImpl) findViewLink("CustContentRequestLink1");
    }


    /**
     * Container's getter for XwrlWcContentsView1.
     * @return XwrlWcContentsView1
     */
    public ViewObjectImpl getXwrlWcContentsView1() {
        return (ViewObjectImpl) findViewObject("XwrlWcContentsView1");
    }

    /**
     * Container's getter for CustXrwlContentRequestLink1.
     * @return CustXrwlContentRequestLink1
     */
    public ViewLinkImpl getCustXrwlContentRequestLink1() {
        return (ViewLinkImpl) findViewLink("CustXrwlContentRequestLink1");
    }


    public void execParameters() 
    {
        getXwrlParametersView1().executeQuery();
    }
    
    public void execCity() 
    {
        getWcCityListView1().executeQuery();
    }
    
    public void execSanction() 
    {
        getSicdCountriesView1().executeQuery();
    }
    
    public void initWorkInProcess(String userId) 
    {
       ViewObject vo =null;
       try 
        {
            //vo = this.getWorkInProgressView1();
           
           vo.setWhereClause("1=1 AND (WC_STATUS = 'Pending'" +
                " AND WC_CREATED_BY_ID = "+userId+
                " AND WORLD_CHECK_IFACE.GET_REQUESTING_DEPARTMENT(WC_SCREENING_REQUEST_ID) != 'Vessel'" + 
                " AND WORLD_CHECK_IFACE.GET_REQUESTING_DEPARTMENT(WC_SCREENING_REQUEST_ID) NOT LIKE 'Inspectors%')" +
                " OR (REQ_CASE_WORKFLOW = 'Pending'" +
                " AND REQ_CREATED_BY_ID = "+userId + 
                " AND SOURCE_TABLE NOT LIKE 'VSSL_VESSELS'" + 
                " AND SOURCE_TABLE NOT LIKE 'INSP_INSPECTORS%')");
            
         /*  vo.setWhereClause("1=1 AND (WC_STATUS = 'Pending'" +
               " AND WC_CREATED_BY_ID = "+userId +   
               " AND WORLD_CHECK_IFACE.GET_REQUESTING_DEPARTMENT(WC_SCREENING_REQUEST_ID) != 'Vessel'" + 
               " AND WORLD_CHECK_IFACE.GET_REQUESTING_DEPARTMENT(WC_SCREENING_REQUEST_ID) NOT LIKE 'Inspectors%')"); */
           
           vo.setOrderByClause("WC_SENT_TO_LEGAL_DATE DESC");
           vo.executeQuery();
            
           LOGGER.finest("Vo query init params::"+ vo.getQuery()); 
            
       } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
    }
    
    
    public void initWorkInProcess() 
    {
       ViewObject vo =null;
       try 
        {
          //  vo = this.getWorkInProgressView1();
            
           vo.setWhereClause("WC_STATUS = 'Pending' AND WC_CREATED_BY = 9180 OR REQUEST_CREATED_BY = 7388");
           vo.executeQuery();
            
           LOGGER.finest("Vo query init::"+ vo.getQuery()); 
            
       } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
    }
    
    public Boolean isRowLocked()
    {
            ViewObjectImpl reqView = this.getXwrlRequestsView1();
            Row currentRow = reqView.getCurrentRow();
            if(currentRow != null)
            {
                try {
                    currentRow.lock();
                } catch (Exception e) 
                {
                    e.printStackTrace();
                    return true;
                }
            }
            return false;
        }


    public String nullStrToSpc(Object obj) {
        
        LOGGER.finest("nullStrToSpc");
        String spcStr = "";

        if (obj == null) {
            return spcStr;
        } else {
            return obj.toString();
        }
    }

    public String getDatabaseName() {
        LOGGER.finest("getDatabaseName");
        ResultSet rs;
        String dbName = null;
        try {
            rs = getDBTransaction().createStatement(0).executeQuery("SELECT INSTANCE_NAME FROM v$instance");
            LOGGER.finest("rs: " + rs);
            if (rs.next()) {
                dbName = (String) rs.getObject(1);
                LOGGER.finest("code: " + dbName);
            }

            rs.close();
            return dbName;

        } catch (SQLException e) {
            throw new JboException(e);
        }
    }
    
     public String saveParameters(String mode,String id, String key, String xmlString, java.sql.Date xmldate,String xmlVal,String xmlclob) 
     {
        // Statement stmt = null;
         Integer userId = (Integer) ADFContext.getCurrent().getSessionScope().get("UserId");
         Integer sessionId = (Integer) ADFContext.getCurrent().getSessionScope().get("SessionId");
         java.util.Date utilDate = new java.util.Date();
         String sql = "";
         String errMsg = "";
         PreparedStatement stmt = null;
         DBTransaction dbTransaction = null;
         Clob xmlValClob = null;
         Clob xmlclobCb = null;
         
         try
            {
             
                dbTransaction = (DBTransaction) this.getTransaction();
             
                 Connection conn = dbTransaction.createStatement(0).getConnection();
             
                xmlVal = xmlVal.trim();
             
               // xmlValClob = dbTransaction.createStatement(0).getConnection().createClob();
               // xmlValClob.setString(1, xmlVal);
             
                SQLXML sqlXml = conn.createSQLXML();
                 if(!"".equals(xmlVal))
                 {
                    sqlXml.setString(xmlVal);
                 }
                 else 
                 {
                     sqlXml.setString(null);
                 }
             
                xmlclobCb = dbTransaction.createStatement(0).getConnection().createClob();
               if(!"".equals(xmlclob))
               {
                xmlclobCb.setString(1, xmlclob);
               }
             else 
               {
                   xmlclobCb.setString(1,null);
               }
             
            if ("Add".equalsIgnoreCase(mode)) 
                {
                    sql =
                        "INSERT INTO XWRL_PARAMETERS (ID,KEY,VALUE_STRING,VALUE_DATE,VALUE_XML,VALUE_CLOB," +
                        "LAST_UPDATE_DATE,LAST_UPDATED_BY,CREATION_DATE,CREATED_BY,LAST_UPDATE_LOGIN, SORT_ORDER ) " +
                        "VALUES(?,?,?,?,XMLType(?),?,?,?,?,?,?,?)";
    
                   
                    stmt = dbTransaction.createPreparedStatement(sql, 0);
                    
                    stmt.setString(1, id);
                    stmt.setString(2, key);
                    stmt.setString(3, xmlString);
                    stmt.setDate(4, xmldate);
                   // stmt.setSQLXML(5, sqlXml);
                   stmt.setString(5, xmlVal);
                    stmt.setClob(6, xmlclobCb);
                    stmt.setDate(7, new java.sql.Date(utilDate.getTime()));
                    stmt.setInt(8, userId);
                    stmt.setDate(9, new java.sql.Date(utilDate.getTime()));
                    stmt.setInt(10, userId);
                    stmt.setInt(11, sessionId);
                    stmt.setString(12, "");
                    
                     stmt.executeUpdate();
                    dbTransaction.commit();
                }
            
             else 
                {
                    sql =
                        "UPDATE XWRL_PARAMETERS " +
                        "SET VALUE_STRING = ?, VALUE_DATE = ?, VALUE_XML= ?, VALUE_CLOB = ?, " + 
                        "LAST_UPDATE_DATE = ?, LAST_UPDATED_BY = ?, LAST_UPDATE_LOGIN= ?" +
                        "WHERE ID = ? AND KEY = ?";
                    
                    stmt = dbTransaction.createPreparedStatement(sql, 0);
                   
                    stmt.setString(1, xmlString);
                    stmt.setDate(2, xmldate);
                    stmt.setString(3, xmlVal);
                    stmt.setString(4, xmlclob);
                    stmt.setDate(5, new java.sql.Date(utilDate.getTime()));
                    stmt.setInt(6, userId);
                    stmt.setInt(7, sessionId);
                    stmt.setString(8, id);
                    stmt.setString(9, key);
                  
                    
                    stmt.executeUpdate();
                    dbTransaction.commit();
                }
             
                errMsg = "SUCCESS";
            }
            catch(SQLException sqle)
            {
                sqle.printStackTrace();
                errMsg = "ERROR: "+ sqle;
            }
             catch(Exception e)
             {
                 e.printStackTrace();
                 errMsg = "ERROR: "+ e;
             }
         finally 
         {
            try 
            {
                if (stmt != null) 
                {
                    stmt.close();
                    LOGGER.finest("st closed");
                }
                
                if(xmlclobCb !=null) {
                    xmlclobCb.free();
                }
                
                if(xmlValClob !=null) {
                    xmlValClob.free();
                }
                
            } catch (SQLException sqle) 
            {
                // TODO: Add catch code
                sqle.printStackTrace();
                errMsg = "ERROR: "+ sqle;
            }
         }
         
         return errMsg;
     }
    
    public void storeDCFrameNameListener() {
        LOGGER.finest("storeDCFrameNameListener");
        //Get the current DC Frame name
        String dcFrameName =
            BindingContext.getCurrent().getCurrentDataControlFrame();
        LOGGER.finest("Frame name: " + dcFrameName);

        //Store that on the session:
        FacesContext ctx = FacesContext.getCurrentInstance();
        HttpSession session =
            (HttpSession)ctx.getExternalContext().getSession(false);
        session.setAttribute("DC_FRAME_NAME", dcFrameName);
        
        ADFContext adfCtx = ADFContext.getCurrent();
        Map sessionScope = adfCtx.getSessionScope();
        sessionScope.put("trxCommit",false);
        sessionScope.put("trxRollback",false);
        sessionScope.put("iterBinding",null);

    }

  public void submit_ows_individual(String SourceTable, Integer SourceId,String ListSubKey, String ListRecordType, String ListRecordOrigin, String CustId,
                                        String CustSubId, String PassportNumber, String NationalId, String Title,
                                        String FullName, String GivenNames, String FamilyName, String NameType,
                                        String NameQuality, String PrimaryName, String OriginalScriptName, String Gender,
                                        String DateOfBirth, String YearOfBirth, String Occupation, String Address1,
                                        String Address2, String Address3, String Address4, String City, String State,
                                        String PostalCode, String AddressCountryCode, String ResidencyCountryCode,
                                        String CountryOfBirthCode, String NationalityCountryCodes,
                                        String ProfileHyperlink, String RiskScore, String DataConfidenceScore,
                                        String DataConfidenceComment, String CustomString1, String CustomString2,
                                        String CustomString3, String CustomString4, String CustomString5,
                                        String CustomString6, String CustomString7, String CustomString8,
                                        String CustomString9, String CustomString10, String CustomString11,
                                        String CustomString12, String CustomString13, String CustomString14,
                                        String CustomString15, String CustomString16, String CustomString17,
                                        String CustomString18, String CustomString19, String CustomString20,
                                        String CustomString21, String CustomString22, String CustomString23,
                                        String CustomString24, String CustomString25, String CustomString26,
                                        String CustomString27, String CustomString28, String CustomString29,
                                        String CustomString30, String CustomString31, String CustomString32,
                                        String CustomString33, String CustomString34, String CustomString35,
                                        String CustomString36, String CustomString37, String CustomString38,
                                        String CustomString39, String CustomString40, String CustomDate1,
                                        String CustomDate2, String CustomDate3, String CustomDate4, String CustomDate5,
                                        String CustomNumber1, String CustomNumber2, String CustomNumber3,
                                        String CustomNumber4, String CustomNumber5) {

          LOGGER.finest("submit_ows_individual");
          CallableStatement st = null;
          Integer id = null;        
          Integer userId = (Integer) ADFContext.getCurrent().getSessionScope().get("UserId");
          Integer sessionId = (Integer) ADFContext.getCurrent().getSessionScope().get("SessionId");
          
          SequenceImpl s = new SequenceImpl("XWRL_BATCH_SEQ", getDBTransaction());
          
          LOGGER.finest("userId in submit_ows_individual::"+ userId);
        LOGGER.finest("sessionId in submit_ows_individual::"+ sessionId);
          
          String sql =
              "begin xwrl_utils.ows_individual_screening(:Debug,:ShowRequest,:ShowResponse,:Server,:UserId, :SessionId, :SourceTable,:SourceId,:WcScreeningRequestId,:JobId" +
              ",:BatchId, :UpdateUserId, :ParentId, :RelationshipType,:CityId" +
              ",:NameScreened,:Department,:Office,:Priority,:RiskLevel,:DocumentType,:ClosedDate,:AssignedTo" +
              ",:ListSubKey" + ",:ListRecordType" + ",:ListRecordOrigin" +
              ",:CustId" + ",:CustSubId" + ",:PassportNumber" + ",:NationalId" + ",:Title" + ",:FullName" +
              ",:GivenNames" + ",:FamilyName" + ",:NameType" + ",:NameQuality" + ",:PrimaryName" +
              ",:OriginalScriptName" + ",:Gender" + ",:DateOfBirth" + ",:YearOfBirth" + ",:Occupation" + ",:Address1" +
              ",:Address2" + ",:Address3" + ",:Address4" + ",:City" + ",:State" + ",:PostalCode" +
              ",:AddressCountryCode" + ",:ResidencyCountryCode" + ",:CountryOfBirthCode" + ",:NationalityCountryCodes" +
              ",:ProfileHyperlink" + ",:RiskScore" + ",:DataConfidenceScore" + ",:DataConfidenceComment" +
              ",:CustomString1" + ",:CustomString2" + ",:CustomString3" + ",:CustomString4" + ",:CustomString5" +
              ",:CustomString6" + ",:CustomString7" + ",:CustomString8" + ",:CustomString9" + ",:CustomString10" +
              ",:CustomString11" + ",:CustomString12" + ",:CustomString13" + ",:CustomString14" + ",:CustomString15" +
              ",:CustomString16" + ",:CustomString17" + ",:CustomString18" + ",:CustomString19" + ",:CustomString20" +
              ",:CustomString21" + ",:CustomString22" + ",:CustomString23" + ",:CustomString24" + ",:CustomString25" +
              ",:CustomString26" + ",:CustomString27" + ",:CustomString28" + ",:CustomString29" + ",:CustomString30" +
              ",:CustomString31" + ",:CustomString32" + ",:CustomString33" + ",:CustomString34" + ",:CustomString35" +
              ",:CustomString36" + ",:CustomString37" + ",:CustomString38" + ",:CustomString39" + ",:CustomString40" +
              ",:CustomDate1" + ",:CustomDate2" + ",:CustomDate3" + ",:CustomDate4" + ",:CustomDate5" +
              ",:CustomNumber1" + ",:CustomNumber2" + ",:CustomNumber3" + ",:CustomNumber4" + ",:CustomNumber5" +
              ",:Id); end;";

          // Note: Need to handle formatting for date of birth
          DateFormat formatter = null;
          DateFormat dateFormat = null;
          java.util.Date date = null;
          String jboDate = null;
          
          LOGGER.finest("city in app module ind ::"+ City);
          
          LOGGER.finest("DateOfBirth: " + DateOfBirth);
          if (DateOfBirth != null) {
              //val = val.substring(0, 8);
              try {
                  //formatter = new SimpleDateFormat("yyyy-MM-dd");
                  //dateFormat = new SimpleDateFormat("yyyyMMddhhmm"); //Note: this returns a time of 1200
                  //dateFormat = new SimpleDateFormat("yyyyMMdd");  //Note: uncomment if need time 0000
                 // dateFormat = new SimpleDateFormat("yyyy-MM-dd"); //Note: XSD date format (ISO 8601)
                  
                 formatter = new SimpleDateFormat("yyyy-MM-dd");
                 dateFormat = new SimpleDateFormat("yyyyMMdd");
                  
                  date = formatter.parse(DateOfBirth);
                  java.sql.Date sqlDate = new java.sql.Date(date.getTime());
                  jboDate = dateFormat.format(sqlDate);
                  //jboDate = dateFormat.format(sqlDate)+"0000";  //Note: uncomment if need time 0000
                  LOGGER.finest("jboDate: " + jboDate);
              } catch (ParseException e) {
                  LOGGER.finest("Error: " + e);
              }
          }

          try {
              st = getDBTransaction().createCallableStatement(sql, DBTransaction.DEFAULT);
              st.setObject("Debug","FALSE");
              st.setObject("ShowRequest","FALSE");
              st.setObject("ShowResponse","FALSE");
              st.setObject("Server",null);
              st.setObject("UserId",userId);
              st.setObject("SessionId",sessionId);
              st.setObject("SourceTable",SourceTable);
              st.setObject("SourceId",SourceId);
              st.setObject("WcScreeningRequestId",null);
              st.setObject("JobId",null);
              st.setObject("BatchId",s.getSequenceNumber());
              st.setObject("UpdateUserId",null);
              st.setObject("ParentId",null);
              st.setObject("RelationshipType",null);
              st.setObject("CityId",City);
              st.setObject("NameScreened",null);
              st.setObject("Department",null);
              st.setObject("Office",null);
              st.setObject("Priority",null);
              st.setObject("RiskLevel",null);
              st.setObject("DocumentType",null);
              st.setObject("ClosedDate",null);
              st.setObject("AssignedTo",null);
              st.setObject("ListSubKey", ListSubKey);
              st.setObject("ListRecordType", ListRecordType);
              st.setObject("ListRecordOrigin", ListRecordOrigin);
              st.setObject("CustId", CustId);
              st.setObject("CustSubId", CustSubId);
              st.setObject("PassportNumber", PassportNumber);
              st.setObject("NationalId", NationalId);
              st.setObject("Title", Title);
              st.setObject("FullName", FullName);
              st.setObject("GivenNames", GivenNames);
              st.setObject("FamilyName", FamilyName);
              st.setObject("NameType", NameType);
              st.setObject("NameQuality", NameQuality);
              st.setObject("PrimaryName", PrimaryName);
              st.setObject("OriginalScriptName", OriginalScriptName);
              st.setObject("Gender", Gender);
              st.setObject("DateOfBirth", jboDate);
              st.setObject("YearOfBirth", YearOfBirth);
              st.setObject("Occupation", Occupation);
              st.setObject("Address1", Address1);
              st.setObject("Address2", Address2);
              st.setObject("Address3", Address3);
              st.setObject("Address4", Address4);
              st.setObject("City", null);
              st.setObject("State", State);
              st.setObject("PostalCode", PostalCode);
              st.setObject("AddressCountryCode", AddressCountryCode);
              st.setObject("ResidencyCountryCode", ResidencyCountryCode);
              st.setObject("CountryOfBirthCode", CountryOfBirthCode);
              st.setObject("NationalityCountryCodes", NationalityCountryCodes);
              st.setObject("ProfileHyperlink", ProfileHyperlink);
              st.setObject("RiskScore", RiskScore);
              st.setObject("DataConfidenceScore", DataConfidenceScore);
              st.setObject("DataConfidenceComment", DataConfidenceComment);
              st.setObject("CustomString1", CustomString1);
              st.setObject("CustomString2", CustomString2);
              st.setObject("CustomString3", CustomString3);
              st.setObject("CustomString4", CustomString4);
              st.setObject("CustomString5", CustomString5);
              st.setObject("CustomString6", CustomString6);
              st.setObject("CustomString7", CustomString7);
              st.setObject("CustomString8", CustomString8);
              st.setObject("CustomString9", CustomString9);
              st.setObject("CustomString10", CustomString10);
              st.setObject("CustomString11", CustomString11);
              st.setObject("CustomString12", CustomString12);
              st.setObject("CustomString13", CustomString13);
              st.setObject("CustomString14", CustomString14);
              st.setObject("CustomString15", CustomString15);
              st.setObject("CustomString16", CustomString16);
              st.setObject("CustomString17", CustomString17);
              st.setObject("CustomString18", CustomString18);
              st.setObject("CustomString19", CustomString19);
              st.setObject("CustomString20", CustomString20);
              st.setObject("CustomString21", CustomString21);
              st.setObject("CustomString22", CustomString22);
              st.setObject("CustomString23", CustomString23);
              st.setObject("CustomString24", CustomString24);
              st.setObject("CustomString25", CustomString25);
              st.setObject("CustomString26", CustomString26);
              st.setObject("CustomString27", CustomString27);
              st.setObject("CustomString28", CustomString28);
              st.setObject("CustomString29", CustomString29);
              st.setObject("CustomString30", CustomString30);
              st.setObject("CustomString31", CustomString31);
              st.setObject("CustomString32", CustomString32);
              st.setObject("CustomString33", CustomString33);
              st.setObject("CustomString34", CustomString34);
              st.setObject("CustomString35", CustomString35);
              st.setObject("CustomString36", CustomString36);
              st.setObject("CustomString37", CustomString37);
              st.setObject("CustomString38", CustomString38);
              st.setObject("CustomString39", CustomString39);
              st.setObject("CustomString40", CustomString40);
              st.setObject("CustomDate1", CustomDate1);
              st.setObject("CustomDate2", CustomDate2);
              st.setObject("CustomDate3", CustomDate3);
              st.setObject("CustomDate4", CustomDate4);
              st.setObject("CustomDate5", CustomDate5);
              st.setObject("CustomNumber1", CustomNumber1);
              st.setObject("CustomNumber2", CustomNumber2);
              st.setObject("CustomNumber3", CustomNumber3);
              st.setObject("CustomNumber4", CustomNumber4);
              st.setObject("CustomNumber5", CustomNumber5);
              st.registerOutParameter("Id", Types.INTEGER);
              st.execute();
              id = (Integer) st.getObject("Id");
              BigDecimal request_id = new BigDecimal(id);
              LOGGER.finest("X_ID: "+id.toString());                
              this.getXwrlRequestsView1().executeViewCriteria(request_id);            
          } catch (SQLException e) {
              throw new JboException(e);
          } finally {
              if (st != null) {
                  try {
                      st.close();
                  } catch (SQLException e) {
                      e.printStackTrace();
                  }
              }
          }

      }

      public void submit_ows_entity(String SourceTable, Integer SourceId, Integer ImoNumber, String ListSubKey, String ListRecordType, String ListRecordOrigin, String CustId,
                                    String CustSubId, String RegistrationNumber, String EntityName, String NameType,
                                    String NameQuality, String PrimaryName, String OriginalScriptName,
                                    String AliasIsAcronym, String Address1, String Address2, String Address3,
                                    String Address4, String City, String State, String PostalCode,
                                    String AddressCountryCode, String RegistrationCountryCode,
                                    String OperatingCountryCodes, String ProfileHyperlink, String RiskScore,
                                    String DataConfidenceScore, String DataConfidenceComment, String CustomString1,
                                    String CustomString2, String CustomString3, String CustomString4,
                                    String CustomString5, String CustomString6, String CustomString7,
                                    String CustomString8, String CustomString9, String CustomString10,
                                    String CustomString11, String CustomString12, String CustomString13,
                                    String CustomString14, String CustomString15, String CustomString16,
                                    String CustomString17, String CustomString18, String CustomString19,
                                    String CustomString20, String CustomString21, String CustomString22,
                                    String CustomString23, String CustomString24, String CustomString25,
                                    String CustomString26, String CustomString27, String CustomString28,
                                    String CustomString29, String CustomString30, String CustomString31,
                                    String CustomString32, String CustomString33, String CustomString34,
                                    String CustomString35, String CustomString36, String CustomString37,
                                    String CustomString38, String CustomString39, String CustomString40,
                                    String CustomDate1, String CustomDate2, String CustomDate3, String CustomDate4,
                                    String CustomDate5, String CustomNumber1, String CustomNumber2, String CustomNumber3,
                                    String CustomNumber4, String CustomNumber5,String VesselIndicator) {

          LOGGER.finest("submit_ows_entity");
          CallableStatement st = null;
          Integer id = null;  
          String vsslInd = null;
          Integer userId = (Integer) ADFContext.getCurrent().getSessionScope().get("UserId");
          Integer sessionId = (Integer) ADFContext.getCurrent().getSessionScope().get("SessionId");
          SequenceImpl s = new SequenceImpl("XWRL_BATCH_SEQ", getDBTransaction());
        LOGGER.finest("userId in submit_ows_entity::"+ userId);
        LOGGER.finest("sessionId in submit_ows_entity::"+ sessionId);
          
          String sql =
              "begin xwrl_utils.ows_entity_screening(:Debug,:ShowRequest,:ShowResponse,:Server,:UserId, :SessionId, :SourceTable,:SourceId,:WcScreeningRequestId,:JobId" +
              ",:BatchId,:UpdateUserId, :ParentId, :RelationshipType,:CityId" +
              ",:NameScreened,:ImoNumber,:VesselIndicator,:Department,:Office,:Priority,:RiskLevel,:DocumentType,:ClosedDate,:AssignedTo" +
              ",:ListSubKey" + ",:ListRecordType" + ",:ListRecordOrigin" +
              ",:CustId" + ",:CustSubId" + ",:RegistrationNumber" + ",:EntityName" + ",:NameType" + ",:NameQuality" +
              ",:PrimaryName" + ",:OriginalScriptName" + ",:AliasIsAcronym" + ",:Address1" + ",:Address2" + ",:Address3" +
              ",:Address4" + ",:City" + ",:State" + ",:PostalCode" + ",:AddressCountryCode" +
              ",:RegistrationCountryCode" + ",:OperatingCountryCodes" + ",:ProfileHyperlink" + ",:RiskScore" +
              ",:DataConfidenceScore" + ",:DataConfidenceComment" + ",:CustomString1" + ",:CustomString2" +
              ",:CustomString3" + ",:CustomString4" + ",:CustomString5" + ",:CustomString6" + ",:CustomString7" +
              ",:CustomString8" + ",:CustomString9" + ",:CustomString10" + ",:CustomString11" + ",:CustomString12" +
              ",:CustomString13" + ",:CustomString14" + ",:CustomString15" + ",:CustomString16" + ",:CustomString17" +
              ",:CustomString18" + ",:CustomString19" + ",:CustomString20" + ",:CustomString21" + ",:CustomString22" +
              ",:CustomString23" + ",:CustomString24" + ",:CustomString25" + ",:CustomString26" + ",:CustomString27" +
              ",:CustomString28" + ",:CustomString29" + ",:CustomString30" + ",:CustomString31" + ",:CustomString32" +
              ",:CustomString33" + ",:CustomString34" + ",:CustomString35" + ",:CustomString36" + ",:CustomString37" +
              ",:CustomString38" + ",:CustomString39" + ",:CustomString40" + ",:CustomDate1" + ",:CustomDate2" +
              ",:CustomDate3" + ",:CustomDate4" + ",:CustomDate5" + ",:CustomNumber1" + ",:CustomNumber2" +
              ",:CustomNumber3" + ",:CustomNumber4" + ",:CustomNumber5"  +
              ",:Id); end;";

          try {
            
            LOGGER.finest("VesselIndicator::"+ VesselIndicator);
            if(VesselIndicator.equals("true") || VesselIndicator.equals(true))
            {
              vsslInd = "Y";
            }
            
            LOGGER.finest("vsslInd::"+ vsslInd);
            
              st = getDBTransaction().createCallableStatement(sql, DBTransaction.DEFAULT);
              st.setObject("Debug","FALSE");
              st.setObject("ShowRequest","FALSE");
              st.setObject("ShowResponse","FALSE");
              st.setObject("Server",null);
              st.setObject("UserId",userId);
              st.setObject("SessionId",sessionId);
              st.setObject("SourceTable",SourceTable);
              st.setObject("SourceId",SourceId);
              st.setObject("WcScreeningRequestId",null);
              st.setObject("JobId",null);
              st.setObject("BatchId",s.getSequenceNumber());
              st.setObject("UpdateUserId",null);
              st.setObject("ParentId",null);
              st.setObject("RelationshipType",null);
              st.setObject("CityId",City);            
              st.setObject("NameScreened",null);
              st.setObject("ImoNumber",ImoNumber);
              st.setObject("VesselIndicator",vsslInd);
              st.setObject("Department",null);
              st.setObject("Office",null);
              st.setObject("Priority",null);
              st.setObject("RiskLevel",null);
              st.setObject("DocumentType",null);
              st.setObject("ClosedDate",null);
              st.setObject("AssignedTo",null);
              st.setObject("ListSubKey", ListSubKey);
              st.setObject("ListRecordType", ListRecordType);
              st.setObject("ListRecordOrigin", ListRecordOrigin);
              st.setObject("CustId", CustId);
              st.setObject("CustSubId", CustSubId);
              st.setObject("RegistrationNumber", RegistrationNumber);
              st.setObject("EntityName", EntityName);
              st.setObject("NameType", NameType);
              st.setObject("NameQuality", NameQuality);
              st.setObject("PrimaryName", PrimaryName);
              st.setObject("OriginalScriptName", OriginalScriptName);
              st.setObject("AliasIsAcronym", AliasIsAcronym);
              st.setObject("Address1", Address1);
              st.setObject("Address2", Address2);
              st.setObject("Address3", Address3);
              st.setObject("Address4", Address4);
              st.setObject("City", null);
              st.setObject("State", State);
              st.setObject("PostalCode", PostalCode);
              st.setObject("AddressCountryCode", AddressCountryCode);
              st.setObject("RegistrationCountryCode", RegistrationCountryCode);
              st.setObject("OperatingCountryCodes", OperatingCountryCodes);
              st.setObject("ProfileHyperlink", ProfileHyperlink);
              st.setObject("RiskScore", RiskScore);
              st.setObject("DataConfidenceScore", DataConfidenceScore);
              st.setObject("DataConfidenceComment", DataConfidenceComment);
              st.setObject("CustomString1", CustomString1);
              st.setObject("CustomString2", CustomString2);
              st.setObject("CustomString3", CustomString3);
              st.setObject("CustomString4", CustomString4);
              st.setObject("CustomString5", CustomString5);
              st.setObject("CustomString6", CustomString6);
              st.setObject("CustomString7", CustomString7);
              st.setObject("CustomString8", CustomString8);
              st.setObject("CustomString9", CustomString9);
              st.setObject("CustomString10", CustomString10);
              st.setObject("CustomString11", CustomString11);
              st.setObject("CustomString12", CustomString12);
              st.setObject("CustomString13", CustomString13);
              st.setObject("CustomString14", CustomString14);
              st.setObject("CustomString15", CustomString15);
              st.setObject("CustomString16", CustomString16);
              st.setObject("CustomString17", CustomString17);
              st.setObject("CustomString18", CustomString18);
              st.setObject("CustomString19", CustomString19);
              st.setObject("CustomString20", CustomString20);
              st.setObject("CustomString21", CustomString21);
              st.setObject("CustomString22", CustomString22);
              st.setObject("CustomString23", CustomString23);
              st.setObject("CustomString24", CustomString24);
              st.setObject("CustomString25", CustomString25);
              st.setObject("CustomString26", CustomString26);
              st.setObject("CustomString27", CustomString27);
              st.setObject("CustomString28", CustomString28);
              st.setObject("CustomString29", CustomString29);
              st.setObject("CustomString30", CustomString30);
              st.setObject("CustomString31", CustomString31);
              st.setObject("CustomString32", CustomString32);
              st.setObject("CustomString33", CustomString33);
              st.setObject("CustomString34", CustomString34);
              st.setObject("CustomString35", CustomString35);
              st.setObject("CustomString36", CustomString36);
              st.setObject("CustomString37", CustomString37);
              st.setObject("CustomString38", CustomString38);
              st.setObject("CustomString39", CustomString39);
              st.setObject("CustomString40", CustomString40);
              st.setObject("CustomDate1", CustomDate1);
              st.setObject("CustomDate2", CustomDate2);
              st.setObject("CustomDate3", CustomDate3);
              st.setObject("CustomDate4", CustomDate4);
              st.setObject("CustomDate5", CustomDate5);
              st.setObject("CustomNumber1", CustomNumber1);
              st.setObject("CustomNumber2", CustomNumber2);
              st.setObject("CustomNumber3", CustomNumber3);
              st.setObject("CustomNumber4", CustomNumber4);
              st.setObject("CustomNumber5", CustomNumber5);
              st.registerOutParameter("Id", Types.INTEGER);
              st.execute();
              id = (Integer) st.getObject("Id");
              BigDecimal request_id = new BigDecimal(id);
              LOGGER.finest("X_ID: "+id.toString());    
              this.getXwrlRequestsView1().executeViewCriteria(request_id);
          } catch (SQLException e) {
              throw new JboException(e);
          } finally {
              if (st != null) {
                  try {
                      st.close();
                  } catch (SQLException e) {
                      e.printStackTrace();
                  }
              }
          }

      }
    
    public void executeStatusboard() {
        LOGGER.finest("executeRequestView");
       
        XwrlRequestsViewImpl vo = this.getXwrlRequestsView1();           
        ViewCriteriaManager vcm = vo.getViewCriteriaManager();        
        ViewCriteria vc = vcm.getViewCriteria("StatusboardCriteria");
        vcm.clearViewCriterias();                
        vcm.applyViewCriteria(vc);
        vo.executeQuery();   
        
    }
    
    public String executeRequestView(String requestId)
    {
      RowSetIterator rsi = null;
      Row row = null;
      String val = "";
      XwrlRequestsViewImpl vo = null;
      String type = "";
      
      try
    {
       vo = this.getXwrlRequestsView1();      

      if (requestId != null && !"".equals((requestId)))
      {
        LOGGER.finest("requestId: " + requestId);
        
      ViewCriteria vc = vo.createViewCriteria();
      ViewCriteriaRow vcRow = vc.createViewCriteriaRow();
      
      vcRow.setAttribute("Id", requestId);
      vc.addRow(vcRow);
      
      vo.applyViewCriteria(vc);
      vo.executeQuery();
       
        rsi = vo.getRowSetIterator();
        LOGGER.finest("row count: " + rsi.getRowCount());
        while (rsi.hasNext())
        {
          row = vo.next();
          val = (String) row.getAttribute("Path");
          LOGGER.finest("val: " + val);
          type = val;
        }
      }
      else
      {
        vo.executeEmptyRowSet();
      }
    }
    catch (Exception e)
    {
      // TODO: Add catch code
      e.printStackTrace();
    }
      return type;
    }
    
   
    
    public void executeRequestView() {        
        LOGGER.finest("executeRequestView");
        
        ADFContext adfCtx = ADFContext.getCurrent();
        String id = null;
        BigDecimal requestId;             
        
        Map sessionScope = adfCtx.getSessionScope();
        Map pageFlowScope = adfCtx.getPageFlowScope();
        
        if ( sessionScope.get("requestId")!=null && sessionScope.get("requestId") instanceof BigInteger ) 
        {
                   id = sessionScope.get("requestId").toString();
                   LOGGER.finest("requestId is biginteger");
        }
        else
        {
        id = (String) sessionScope.get("requestId");
        }
        
        
        LOGGER.finest("requestType: "+sessionScope.get("requestType"));
        if ( sessionScope.get("requestType")!= null ) {
            if (sessionScope.get("requestType").equals("ENTITY")){
                pageFlowScope.put("requestType","ENTITY");
            }
        }
        
     //  id = sessionScope.get("requestId").toString();
        LOGGER.finest("sessionScope id: "+id);        
        
        XwrlRequestsViewImpl vo = this.getXwrlRequestsView1();    
        //vo.setMaxFetchSize(1);
        RowSetIterator rsi = null;
        Row row = null;
        String val;
        if (id != null){            
            requestId = new BigDecimal(id);
            LOGGER.finest("requestId: "+requestId);
            vo.executeViewCriteria(requestId);     
            rsi = vo.getRowSetIterator();
            LOGGER.finest("row count: "+rsi.getRowCount());
            while (rsi.hasNext()){
                row = vo.next();
                val = (String) row.getAttribute("Path");
                LOGGER.finest("val: "+val);
                pageFlowScope.put("requestType",val);
            }
            sessionScope.remove("requestId");
        } else {
            vo.executeEmptyRowSet();    
        }
                
    }    


    /**
     * Container's getter for XwrlAlertNotesView1.
     * @return XwrlAlertNotesView1
     */
    public XwrlAlertNotesViewImpl getXwrlAlertNotesView1() {
        return (XwrlAlertNotesViewImpl) findViewObject("XwrlAlertNotesView1");
    }

    /**
     * Container's getter for XwrlResponseIndividualAlertNotesLinkViewLink1.
     * @return XwrlResponseIndividualAlertNotesLinkViewLink1
     */
    public ViewLinkImpl getXwrlResponseIndividualAlertNotesLinkViewLink1() {
        return (ViewLinkImpl) findViewLink("XwrlResponseIndividualAlertNotesLinkViewLink1");
    }


    /**
     * Container's getter for XwrlAlertNotesView2.
     * @return XwrlAlertNotesView2
     */
    public XwrlAlertNotesViewImpl getXwrlAlertNotesView2() {
        return (XwrlAlertNotesViewImpl) findViewObject("XwrlAlertNotesView2");
    }

    /**
     * Container's getter for XwrlResponseEntityAlertNotesLink1.
     * @return XwrlResponseEntityAlertNotesLink1
     */
    public ViewLinkImpl getXwrlResponseEntityAlertNotesLink1() {
        return (ViewLinkImpl) findViewLink("XwrlResponseEntityAlertNotesLink1");
    }


    /**
     * Container's getter for XwrlNoteTemplatesView1.
     * @return XwrlNoteTemplatesView1
     */
    public XwrlNoteTemplatesViewImpl getXwrlNoteTemplatesView1() {
        return (XwrlNoteTemplatesViewImpl) findViewObject("XwrlNoteTemplatesView1");
    }
    
    public void setNoteTemplate (String noteType, String noteCategory){
        XwrlNoteTemplatesViewImpl vo = getXwrlNoteTemplatesView1();
        ViewCriteria vc = vo.getViewCriteria("XwrlNoteTemplatesViewCriteria");        
        vo.setvarNoteType(noteType);
        vo.setvarNoteCategory(noteCategory);
        vo.applyViewCriteria(vc);
        vo.executeQuery();
    }

    /**
     * Container's getter for CustClearAlertView1.
     * @return CustClearAlertView1
     */
    public ViewObjectImpl getCustClearAlertView1() {
        return (ViewObjectImpl) findViewObject("CustClearAlertView1");
    }


    /**
     * Container's getter for XwrlAlertDocumentsView1.
     * @return XwrlAlertDocumentsView1
     */
    public XwrlAlertDocumentsViewImpl getXwrlAlertDocumentsView1() {
        return (XwrlAlertDocumentsViewImpl) findViewObject("XwrlAlertDocumentsView1");
    }

    /**
     * Container's getter for XwrlResponseIndividualAlertDocsLink1.
     * @return XwrlResponseIndividualAlertDocsLink1
     */
    public ViewLinkImpl getXwrlResponseIndividualAlertDocsLink1() {
        return (ViewLinkImpl) findViewLink("XwrlResponseIndividualAlertDocsLink1");
    }


    /**
     * Container's getter for XwrlAlertDocumentsView2.
     * @return XwrlAlertDocumentsView2
     */
    public XwrlAlertDocumentsViewImpl getXwrlAlertDocumentsView2() {
        return (XwrlAlertDocumentsViewImpl) findViewObject("XwrlAlertDocumentsView2");
    }

    /**
     * Container's getter for XwrlResponseEntityAlertDocsLink1.
     * @return XwrlResponseEntityAlertDocsLink1
     */
    public ViewLinkImpl getXwrlResponseEntityAlertDocsLink1() {
        return (ViewLinkImpl) findViewLink("XwrlResponseEntityAlertDocsLink1");
    }

    /**
     * Container's getter for XxiriAlertValidationView1.
     * @return XxiriAlertValidationView1
     */
    public ViewObjectImpl getXxiriAlertValidationView1() {
        return (ViewObjectImpl) findViewObject("XxiriAlertValidationView1");
    }


    /**
     * Container's getter for DepartmentsView1.
     * @return DepartmentsView1
     */
    public ViewObjectImpl getDepartmentsView() {
        return (ViewObjectImpl) findViewObject("DepartmentsView");
    }


    /**
     * Container's getter for WipPendingTcOptions1.
     * @return WipPendingTcOptions1
     */
    public ViewObjectImpl getWipPendingTcOptions1() {
        return (ViewObjectImpl) findViewObject("WipPendingTcOptions1");
    }

    /**
     * Container's getter for WipDepartmentNames1.
     * @return WipDepartmentNames1
     */
    public ViewObjectImpl getWipDepartmentNames1() {
        return (ViewObjectImpl) findViewObject("WipDepartmentNames1");
    }

    /**
     * Container's getter for CaseStatus1.
     * @return CaseStatus1
     */
    public ViewObjectImpl getCaseStatusLOV1() {
        return (ViewObjectImpl) findViewObject("CaseStatusLOV1");
    }

    /**
     * Container's getter for CaseState1.
     * @return CaseState1
     */
    public ViewObjectImpl getCaseStateLOV1() {
        return (ViewObjectImpl) findViewObject("CaseStateLOV1");
    }

    /**
     * Container's getter for CaseWorkflow1.
     * @return CaseWorkflow1
     */
    public ViewObjectImpl getCaseWorkflowLOV1() {
        return (ViewObjectImpl) findViewObject("CaseWorkflowLOV1");
    }


    /**
     * Container's getter for OwsStatusboardView1.
     * @return OwsStatusboardView1
     */
    public ViewObjectImpl getOwsStatusboardView() {
        return (ViewObjectImpl) findViewObject("OwsStatusboardView");
    }

    /**
     * Container's getter for WcCityListView1.
     * @return WcCityListView1
     */
    public WcCityListViewImpl getWcCityListView1() {
        return (WcCityListViewImpl) findViewObject("WcCityListView1");
    }

    /**
     * Container's getter for SicdCountries1.
     * @return SicdCountries1
     */
    public ViewObjectImpl getSicdCountries1() {
        return (ViewObjectImpl) findViewObject("SicdCountries1");
    }

    /**
     * Container's getter for SicdCountriesView1.
     * @return SicdCountriesView1
     */
    public SicdCountriesViewImpl getSicdCountriesView1() {
        return (SicdCountriesViewImpl) findViewObject("SicdCountriesView1");
    }


    /**
     * Container's getter for XwrlCaseNotesView1.
     * @return XwrlCaseNotesView1
     */
    public XwrlCaseNotesViewImpl getXwrlCaseNotesView1() {
        return (XwrlCaseNotesViewImpl) findViewObject("XwrlCaseNotesView1");
    }

    /**
     * Container's getter for XwrlRequestXwrlCaseNotesLink1.
     * @return XwrlRequestXwrlCaseNotesLink1
     */
    public ViewLinkImpl getXwrlRequestXwrlCaseNotesLink1() {
        return (ViewLinkImpl) findViewLink("XwrlRequestXwrlCaseNotesLink1");
    }

    /**
     * Container's getter for XwrlCaseNotesView2.
     * @return XwrlCaseNotesView2
     */
    public XwrlCaseNotesViewImpl getXwrlCaseNotesView2() {
        return (XwrlCaseNotesViewImpl) findViewObject("XwrlCaseNotesView2");
    }

    /**
     * Container's getter for XwrlRequestXwrlCaseNotesLink2.
     * @return XwrlRequestXwrlCaseNotesLink2
     */
    public ViewLinkImpl getXwrlRequestXwrlCaseNotesLink2() {
        return (ViewLinkImpl) findViewLink("XwrlRequestXwrlCaseNotesLink2");
    }

    /**
     * Container's getter for XwrlCaseDocumentsView1.
     * @return XwrlCaseDocumentsView1
     */
    public XwrlCaseDocumentsViewImpl getXwrlCaseDocumentsView1() {
        return (XwrlCaseDocumentsViewImpl) findViewObject("XwrlCaseDocumentsView1");
    }

    /**
     * Container's getter for XwrlRequestXwrlCaseDocsLink1.
     * @return XwrlRequestXwrlCaseDocsLink1
     */
    public ViewLinkImpl getXwrlRequestXwrlCaseDocsLink1() {
        return (ViewLinkImpl) findViewLink("XwrlRequestXwrlCaseDocsLink1");
    }

    /**
     * Container's getter for XwrlCaseDocumentsView2.
     * @return XwrlCaseDocumentsView2
     */
    public XwrlCaseDocumentsViewImpl getXwrlCaseDocumentsView2() {
        return (XwrlCaseDocumentsViewImpl) findViewObject("XwrlCaseDocumentsView2");
    }

    /**
     * Container's getter for XwrlRequestXwrlCaseDocsLink2.
     * @return XwrlRequestXwrlCaseDocsLink2
     */
    public ViewLinkImpl getXwrlRequestXwrlCaseDocsLink2() {
        return (ViewLinkImpl) findViewLink("XwrlRequestXwrlCaseDocsLink2");
    }

    /**
     * Container's getter for YesNull1.
     * @return YesNull1
     */
    public ViewObjectImpl getYesNullLOV1() {
        return (ViewObjectImpl) findViewObject("YesNullLOV1");
    }

    /**
     * Container's getter for CustClearEntityAlertView1.
     * @return CustClearEntityAlertView1
     */
    public ViewObjectImpl getCustClearEntityAlertView1() {
        return (ViewObjectImpl) findViewObject("CustClearEntityAlertView1");
    }

    /**
     * Container's getter for PriorityLOV1.
     * @return PriorityLOV1
     */
    public ViewObjectImpl getPriorityLOV1() {
        return (ViewObjectImpl) findViewObject("PriorityLOV1");
    }

    /**
     * Container's getter for RiskLevelLOV1.
     * @return RiskLevelLOV1
     */
    public ViewObjectImpl getRiskLevelLOV1() {
        return (ViewObjectImpl) findViewObject("RiskLevelLOV1");
    }

    /**
     * Container's getter for OfficeLOV1.
     * @return OfficeLOV1
     */
    public ViewObjectImpl getOfficeLOV1() {
        return (ViewObjectImpl) findViewObject("OfficeLOV1");
    }

    /**
     * Container's getter for CaseDepartmentsVO1.
     * @return CaseDepartmentsVO1
     */
    public ViewObjectImpl getCaseDepartmentsVO1() {
        return (ViewObjectImpl) findViewObject("CaseDepartmentsVO1");
    }

    /**
     * Container's getter for RejectionLOV1.
     * @return RejectionLOV1
     */
    public ViewObjectImpl getRejectionLOV1() {
        return (ViewObjectImpl) findViewObject("RejectionLOV1");
    }

    /**
     * Container's getter for CaseDocumentsLOV1.
     * @return CaseDocumentsLOV1
     */
    public ViewObjectImpl getCaseDocumentsLOV1() {
        return (ViewObjectImpl) findViewObject("CaseDocumentsLOV1");
    }

    /**
     * Container's getter for CaseType1.
     * @return CaseType1
     */
    public ViewObjectImpl getCaseTypeLOV1() {
        return (ViewObjectImpl) findViewObject("CaseTypeLOV1");
    }

    /**
     * Container's getter for CaseRestrictedCountry1.
     * @return CaseRestrictedCountry1
     */
    public ViewObjectImpl getCaseRestrictedCountryLOV1() {
        return (ViewObjectImpl) findViewObject("CaseRestrictedCountryLOV1");
    }

    /**
     * Container's getter for CaseRestrictedCity1.
     * @return CaseRestrictedCity1
     */
    public ViewObjectImpl getCaseRestrictedCityLOV1() {
        return (ViewObjectImpl) findViewObject("CaseRestrictedCityLOV1");
    }

    /**
     * Container's getter for CaseAssignmentLOV1.
     * @return CaseAssignmentLOV1
     */
    public ViewObjectImpl getCaseAssignmentLOV1() {
        return (ViewObjectImpl) findViewObject("CaseAssignmentLOV1");
    }

    /**
     * Container's getter for CustClearAlertLOV1.
     * @return CustClearAlertLOV1
     */
    public ViewObjectImpl getCustClearAlertLOV1() {
        return (ViewObjectImpl) findViewObject("CustClearAlertLOV1");
    }

    /**
     * Container's getter for CustClearEntityAlertLOV1.
     * @return CustClearEntityAlertLOV1
     */
    public ViewObjectImpl getCustClearEntityAlertLOV1() {
        return (ViewObjectImpl) findViewObject("CustClearEntityAlertLOV1");
    }

    /**
     * Container's getter for CaseCountryLOV1.
     * @return CaseCountryLOV1
     */
    public ViewObjectImpl getCaseCountryLOV1() {
        return (ViewObjectImpl) findViewObject("CaseCountryLOV1");
    }

    /**
     * Container's getter for FndUsersActiveLOV1.
     * @return FndUsersActiveLOV1
     */
    public ViewObjectImpl getFndUsersActiveLOV1() {
        return (ViewObjectImpl) findViewObject("FndUsersActiveLOV1");
    }

    /**
     * Container's getter for FndUsersAllLov1.
     * @return FndUsersAllLov1
     */
    public ViewObjectImpl getFndUsersAllLov1() {
        return (ViewObjectImpl) findViewObject("FndUsersAllLov1");
    }

    /**
     * Container's getter for XwrlRequestIndColumnsView2.
     * @return XwrlRequestIndColumnsView2
     */
    public XwrlRequestIndColumnsViewImpl getXwrlRequestIndColumnsView2() {
        return (XwrlRequestIndColumnsViewImpl) findViewObject("XwrlRequestIndColumnsView2");
    }

    /**
     * Container's getter for XwrlRequestEntityColumnsView2.
     * @return XwrlRequestEntityColumnsView2
     */
    public XwrlRequestEntityColumnsViewImpl getXwrlRequestEntityColumnsView2() {
        return (XwrlRequestEntityColumnsViewImpl) findViewObject("XwrlRequestEntityColumnsView2");
    }

    /**
     * Container's getter for RequestSelectForUpdateView1.
     * @return RequestSelectForUpdateView1
     */
    public ViewObjectImpl getRequestSelectForUpdateView1() {
        return (ViewObjectImpl) findViewObject("RequestSelectForUpdateView1");
    }
    

    public HashMap owsRequestlock(int userId, int requestId)
           {
             CallableStatement st = null;
             String sql = "";
             String status = "";
             String errMsg = "";
             HashMap<String,String> outputMap = new HashMap<String,String>();
               
             try
             {
                     sql = "BEGIN RMI_OWS_REQUEST_LOCK(?,?,?,?); END;";
                            
                      st = getDBTransaction().createCallableStatement(sql,0);
             
                     st.setInt(1, userId);
                     st.setInt(2,requestId);
                     st.registerOutParameter(3, Types.VARCHAR);
                     st.registerOutParameter(4, Types.VARCHAR);
                     
                     st.execute();
                  
                    
                     status = nullStrToSpc(st.getString(3));
                     errMsg = nullStrToSpc(st.getString(4));
                 
                      outputMap.put("status", status);
                      outputMap.put("errMsg", errMsg);
                     
                     
              
             } catch(Exception e) {
                     LOGGER.finest("Error::"+ e);
                     e.printStackTrace();
                 if(e!=null)
                 {
                 outputMap.put("status", "ERROR");
                 outputMap.put("errMsg", e.getMessage());
                 }
             }
             finally {
                                try {
                            
                            if (st != null) {
                                st.close();
                                LOGGER.finest("st closed");
                            }
                               
                            
                        } catch (SQLException sqle) {
                            // TODO: Add catch code
                            sqle.printStackTrace();
                        }
                            }
               
               return outputMap;
           }
	
	
	public HashMap execRecordLock(int requestId)
         {
           CallableStatement st = null;
           String sql = "";
           Boolean b= null;
           HashMap<String,String> outputMap = new HashMap<String,String>();
             
           try
           {
                   sql = "BEGIN ? := rmi_ows_req_lock_row(?); END;";
                          
                    st = getDBTransaction().createCallableStatement(sql,0);
           
                   st.registerOutParameter(1, Types.BOOLEAN);
                   st.setObject(2, requestId);
               
                   st.executeUpdate();
                
                   b = st.getBoolean(1);
               
                  if(!b) 
                  {
                      outputMap.put("status", "ERROR");
                      outputMap.put("errMsg", "Another User already holds the lock");
                  }else
                  {
                      outputMap.put("status", "SUCCESS");
                      outputMap.put("errMsg", "Record Available");
                  }
                   
            
           } catch(Exception e) 
           {
                   LOGGER.finest("Error::"+ e);
                   e.printStackTrace();
                   
               if(e!=null)
               {
               outputMap.put("status", "ERROR");
               outputMap.put("errMsg", e.getMessage());
               }
           }
           finally {
                      try {
                  
                  if (st != null) {
                      st.close();
                      LOGGER.finest("st closed");
                  }
                     
                  
              } catch (SQLException sqle) {
                  // TODO: Add catch code
                  sqle.printStackTrace();
              }
                  }
             
             return outputMap;
         }
        
    public  HashMap callRecordLock(int sqlReturnType, String stmt, Object[] bindVars, String action) 
    {
    CallableStatement cst = null;
        HashMap<String,String> outputMap = new HashMap<String,String>();
    try 
    {
    //Creating sql statement
    cst = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
    //Register dataType for return value
    cst.registerOutParameter(1, sqlReturnType);
    //Pass input parameters value
    if (bindVars != null) 
    {
        for (int z = 0; z < bindVars.length; z++) 
        {
        cst.setObject(z + 2, bindVars[z]);
        }
    }
        
    cst.setObject(3, action);   
        
    cst.executeUpdate();
    //Finally get returned value
     String status = nullStrToSpc(cst.getObject(1));
        if("SUCCESS".equalsIgnoreCase(status)) 
        {
            outputMap.put("status", "SUCCESS");
            outputMap.put("errMsg", "Record Locked Successfuly.");
          
        }if("RESOURCE BUSY".equalsIgnoreCase(status)) 
        {
            outputMap.put("status", "RESOURCE BUSY");
            outputMap.put("errMsg", "Another User already holds the lock");
        }
        if(!"RESOURCE BUSY".equalsIgnoreCase(status) &&
        !"SUCCESS".equalsIgnoreCase(status)) 
         {
             outputMap.put("status", "ERROR");
             outputMap.put("errMsg", "Couldn't Acquire Lock. Please Acquire Lock again");
         }
        
        
    } catch (Exception e) 
    {
            outputMap.put("status", "ERROR");
            outputMap.put("errMsg", e.getMessage());
        } finally 
        {
            if (cst != null) 
            {
                try 
                {
                cst.close();
                } catch (SQLException e) 
                {
                e.printStackTrace();
                    outputMap.put("status", "ERROR");
                    outputMap.put("errMsg", e.getMessage());
                }
            }
        }
    
    return outputMap;
    }

    /**
     * Container's getter for RequestLockInfoView1.
     * @return RequestLockInfoView1
     */
    public ViewObjectImpl getRequestLockInfoView1() {
        return (ViewObjectImpl) findViewObject("RequestLockInfoView1");
    }

    /**
     * Container's getter for RmiDataPrivacyConsentVO1.
     * @return RmiDataPrivacyConsentVO1
     */
    public ViewObjectImpl getRmiDataPrivacyConsentVO1() {
        return (ViewObjectImpl) findViewObject("RmiDataPrivacyConsentVO1");
    }


    /**
     * Container's getter for IriEdocsVO1.
     * @return IriEdocsVO1
     */
    public ViewObjectImpl getIriEdocsVO1() {
        return (ViewObjectImpl) findViewObject("IriEdocsVO1");
    }

    /**
     * Container's getter for GetAliasNamesRVO1.
     * @return GetAliasNamesRVO1
     */
    public ViewObjectImpl getGetAliasNamesRVO1() {
        return (ViewObjectImpl) findViewObject("GetAliasNamesRVO1");
    }
    

    /**
     * Container's getter for GetCaseDocumentsLOV1.
     * @return GetCaseDocumentsLOV1
     */
    public ViewObjectImpl getGetCaseDocumentsLOV1() {
        return (ViewObjectImpl) findViewObject("GetCaseDocumentsLOV1");
    }

    /**
     * Container's getter for CaseDepartmentsLOV1.
     * @return CaseDepartmentsLOV1
     */
    public ViewObjectImpl getCaseDepartmentsLOV1() {
        return (ViewObjectImpl) findViewObject("CaseDepartmentsLOV1");
    }

    /**
     * Container's getter for XwrlCaseNotesSumView1.
     * @return XwrlCaseNotesSumView1
     */
    public ViewObjectImpl getXwrlCaseNotesSumView1() {
        return (ViewObjectImpl) findViewObject("XwrlCaseNotesSumView1");
    }

    /**
     * Container's getter for XwrlCaseDocumentsSumView1.
     * @return XwrlCaseDocumentsSumView1
     */
    public ViewObjectImpl getXwrlCaseDocumentsSumView1() {
        return (ViewObjectImpl) findViewObject("XwrlCaseDocumentsSumView1");
    }

    /**
     * Container's getter for XwrlCaseDocumentsView3.
     * @return XwrlCaseDocumentsView3
     */
    public XwrlCaseDocumentsViewImpl getXwrlCaseDocumentsView3() {
        return (XwrlCaseDocumentsViewImpl) findViewObject("XwrlCaseDocumentsView3");
    }

    /**
     * Container's getter for XwrlCaseNotesView3.
     * @return XwrlCaseNotesView3
     */
    public XwrlCaseNotesViewImpl getXwrlCaseNotesView3() {
        return (XwrlCaseNotesViewImpl) findViewObject("XwrlCaseNotesView3");
    }

    /**
     * Container's getter for XwrlNoteXrefView1.
     * @return XwrlNoteXrefView1
     */
    public ViewObjectImpl getXwrlNoteXrefView1() {
        return (ViewObjectImpl) findViewObject("XwrlNoteXrefView1");
    }


    /**
     * Container's getter for XwrlResponseIndColumnsView2.
     * @return XwrlResponseIndColumnsView2
     */
    public XwrlResponseIndColumnsViewImpl getXwrlResponseIndColumnsView2() {
        return (XwrlResponseIndColumnsViewImpl) findViewObject("XwrlResponseIndColumnsView2");
    }

    /**
     * Container's getter for XwrlAlertNotesXrefView1.
     * @return XwrlAlertNotesXrefView1
     */
    public ViewObjectImpl getXwrlAlertNotesXrefView1() {
        return (ViewObjectImpl) findViewObject("XwrlAlertNotesXrefView1");
    }

    /**
     * Container's getter for XwrlResIndAlertNotesXrefLink2.
     * @return XwrlResIndAlertNotesXrefLink2
     */
    public ViewLinkImpl getXwrlResIndAlertNotesXrefLink2() {
        return (ViewLinkImpl) findViewLink("XwrlResIndAlertNotesXrefLink2");
    }

    /**
     * Container's getter for XwrlResIndAlertNotesXrefLink1.
     * @return XwrlResIndAlertNotesXrefLink1
     */
    public ViewLinkImpl getXwrlResIndAlertNotesXrefLink1() {
        return (ViewLinkImpl) findViewLink("XwrlResIndAlertNotesXrefLink1");
    }

    /**
     * Container's getter for XwrlAlertNotesXrefView2.
     * @return XwrlAlertNotesXrefView2
     */
    public ViewObjectImpl getXwrlAlertNotesXrefView2() {
        return (ViewObjectImpl) findViewObject("XwrlAlertNotesXrefView2");
    }

    /**
     * Container's getter for xwrlResEntAlertNotesXrefLink1.
     * @return xwrlResEntAlertNotesXrefLink1
     */
    public ViewLinkImpl getxwrlResEntAlertNotesXrefLink1() {
        return (ViewLinkImpl) findViewLink("xwrlResEntAlertNotesXrefLink1");
    }


    /**
     * Container's getter for XwrlAlertNotesExView1.
     * @return XwrlAlertNotesExView1
     */
    public ViewObjectImpl getXwrlAlertNotesExView1() {
        return (ViewObjectImpl) findViewObject("XwrlAlertNotesExView1");
    }

    /**
     * Container's getter for XwrlRequestApprovalHistView1.
     * @return XwrlRequestApprovalHistView1
     */
    public ViewObjectImpl getXwrlRequestApprovalHistView1() {
        return (ViewObjectImpl) findViewObject("XwrlRequestApprovalHistView1");
    }

    /**
     * Container's getter for IriEdocsForCaseDocumentsRVO1.
     * @return IriEdocsForCaseDocumentsRVO1
     */
    public ViewObjectImpl getIriEdocsForCaseDocumentsRVO1() {
        return (ViewObjectImpl) findViewObject("IriEdocsForCaseDocumentsRVO1");
    }

    /**
     * Container's getter for GetConsentDetailsByConfNumberView1.
     * @return GetConsentDetailsByConfNumberView1
     */
    public ViewObjectImpl getGetConsentDetailsByConfNumberView1() {
        return (ViewObjectImpl) findViewObject("GetConsentDetailsByConfNumberView1");
    }
}

