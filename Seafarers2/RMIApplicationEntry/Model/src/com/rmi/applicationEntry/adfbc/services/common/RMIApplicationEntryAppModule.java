package com.rmi.applicationEntry.adfbc.services.common;

import oracle.jbo.ApplicationModule;
import oracle.jbo.domain.Date;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Jan 28 15:24:33 IST 2018
// ---------------------------------------------------------------------
public interface RMIApplicationEntryAppModule extends ApplicationModule {

    void editBatch(Integer batchId);


    String deleteBatch(Integer batchId);

    void refreshBatchesVo();


    void copySeafarerValues();

    void createOrEditSeafarer();

    void imoValueChange(Integer imo);

    void setSeafarer();


    void createNewBatch(Integer user_id);


    void searchBatch(Integer user_id);

    void onLoadBatchesVO(Integer user_id);

    void sendmail();

    void assigntask(Integer batch_id);


    void refresh_workflow();


    void returnTaskToAdmin();

    void filterTaskAssignment();


    void sendMailToAgent(String text);

    void acceptBatchByOperator();

    String userHasOperator(Integer user_id);

    void onLoadBatchPendingTC(Integer user_id);

    void processTC(Integer batch_id);

    void onLoadBatchPendingEVAL(Integer user_id);


    void processEVAL(Integer batch_id);


    void onLoadBatchPendingQA(Integer user_id);

    void processQA(Integer batch_id);

    void onLoadBatchPendingShipping(Integer user_id);


    void processShipping(Integer batch_id);

    void onLoadTC(Integer batch_id);


    String getlink(String code);

    void cancelSeafarer();

    String checkSeafarerValidate();

    void saveBatch();

    String getlinkforBatchespage(String code);

    String getlinkforOC();

    String getlinkforSQC(String code);

    void assignBatchesToRegion(Integer regionId);


    void callConcurrentProgramForTC();

    String getUserType(Integer user_id);

    void send_to_internal2();


    void onLoadBatchPendingUploadDocument(Integer user_id);

    void update_email_id(String email);

    String getlinkforTaskAssignmentpage(String code);


    void callConcurrentProgramManually();


    String validateSeafarer(Integer p_user_id);

    String getUserTypeForApplicationSource(Integer user_id, String batch_mode, Integer batch_id);

    void submitBatchToAdmin(Integer user_id);

    void deleteOc();

    void deleteSqc();

    String getUsertypeForBatchesPage();

    String getUsertypeForTaskAssignmentPage();


    String findConsent();

    String getLinkForConsent(Integer edoc_id);

    void add_consent(Integer p_user_id);

    void setUploadConsent();

    void resubmit(Integer user_id);

    void createcrabatch(Integer user_id);

    void setConsentExpDate(Date startDate);

    void deleteSeafarer();

    void addocLine(Integer user_id);

    void addsqcLine(Integer user_id);

    void onLoadMasterMytask(Integer user_id);

    void searchMasterMyTask();

    void sendAcknowledgement();

    void batchEmailCra(Integer p_user_id);

    void sendCRAMailButton();

    Date getNewDate(Date issueDate);

    void usegradeOc(Integer user_id);

    void usegradeSqcc(Integer user_id);

    String checkValidationBeforeSave();

    void findSeafarerReset();


    void assignTaskReSubmitted(Integer user_id);

    void onLoadMytask(Integer p_user_id, String Role_name);

    String checkDateValidate(Date endDate);

    String checkDateValidateSqc(Date endDate);

    void resetCity();

    String existsSeafarer();

    void updateIssueType();

    String validateBeforeCopySeafarerValues();

    void offValueChange(Integer off);


    void onLoadBatchPendingAbn(Integer user_id);

    void filterOrderingAgentEmailId(String partyName);

    void filterDocumentHistoryDetails(String p_doc_code);

    String uploadDocument(String param1, String param2, String param3, String fileName, String rejected);

    String createOrder(Integer p_user_id);

    Integer searchSeafarer(Integer documentId, String documentType, String name, Date birth_date, Integer seafarer_id);

    String getEmailByContactId(Integer p_contact_id);

    void filterSearchSeafarerDetails();

    String getemaillist();

    void onLoadBatchPendingMTC(Integer user_id);


    void onLoadCraProcessing(Integer p_batch_id);


    void email_invoice(Integer user_id);

    void onLoadAccountStatus(Integer user_id);


    void returnTaskToAdminLegal();

    void searchQueryOrder(Integer orderNumber);

    void filterDocumentHistoryDocsIfaceDetails(String p_doc_code);



    


    void filterSubmittedbatchesForPopup();

    void resetSubmittedBatches();

    void onLoadRequestSubmission(Integer p_request_id);

    String purchaseNumberCheck(String purchaseOrderNumber);

    void addValidationMessage(String message);

    String getAllRowStateSeafarer();

    void onLoadSeafarerList(Integer pEsiBatchId);

    void onLoadTaskAssignmentpage(Integer pUserId);

    void returnMasterTaskToAdmin();

    void selectAllonTaskAssignment(String check);

    String assignTaskToUser(Integer user_id);

    String assignTaskToUserExpedited(Integer user_id);

    String assignTaskToUserCraRequested(Integer user_id);

    String validateSendCra();

    String assignTaskToUserEval(Integer user_id);

    String assignTaskToUserEvalCra(Integer user_id);

    String assignTaskToUserEvalRejected(Integer user_id);

    void refreshBatchIfaceView();

    void filterVesselDetail();

    String validateOcSQCGrade();

    String assignTaskToUserABN(Integer user_id);

    String assignTaskToUserMTC(Integer user_id);

    String assignTaskToUserMTCLegal(Integer user_id);

    String assignTaskToUserMTCRejected(Integer user_id);

    String assignTaskToUserQA(Integer user_id);

    String assignTaskToUserQARejected(Integer user_id);

    String assignTaskToUserShipping(Integer user_id);

    String assignTaskToUseruploadDoc(Integer user_id);

    void filterOnMyTask(String p_filter);

    void filterOnTaskAssignment(String p_filter, Integer pUserId);

    void find_seafarer(Integer esi_id, String sea_name, Date birth_date);

    String validateConsentExpDate();

    String validateConsentDataBeforeSave();

 

    void resetQueryOrderDetails();

    void refreshDualCountries();


    void onLoadSeafarerListTc(Integer pEsiBatchId);

    void deficiency_details();

    void setConsentStartEndDate();

    void deleteCurrentSeafarer();

    void ackNumberValueChangeListener(String ackNo);


    String assignTaskToUserClosed(Integer user_id);

    void searchInvoice();

    String validateSearchInvoice();

    Integer getAccountStatusFilteredRows();

    void updateInvoiceEmails(String email);

    String getInvoiceAgentEmailList();

    void filterInvoiceAgentEmailId(String partyName);

    void executePendingTrackingNumberOnLoad();

    String viewInvoice();

    String copyLogFile();

    String copyOutFile();

    String submitRequest();

    void searchRequestDeatailView();

    String cpyCraFile();

    String getUsertypeForBatchesAccountPage();

    String getlinkforBatchesAccountpage(String code);

    String seafarerValidationMessage();

    void clearFindSeafarerSearch();

    void clearVesselSearch();

    void searchVesselSearch();

    String deselectCraProcessing();

    void selectRequestValueChange(String newValue);

    void gradeIdValueChangeListener();


    void gradeIdOcValueChangeListener();


    String validateRequestSubmit();

    void filterOrderHold();

    String checkNames();

    String checkSeafarerNew();

    void deleteSingleSeafarer();

    void searchBatchInternal(Integer user_id);

    String validateCraLines();

    String updateIssueTypeManually(String updateFor);

    void updateInvoiceEmailFromTran(String emailid);

    String queryOrderFound();

    String ackNumberValidate(String ackNo);

    String getInvoiceAgentEmailID();

    void resetRequestSearchform();

    void searchRequestDeatailViewOnSubmission(String RequestId);

    String checkForResubmit();

    void batchCurrentRow();

    void onloadDeficientOrder(Integer user_id);

    String assignDeficientOrder(Integer user_id);

    void onloadMyTaskDeficientOrder(Integer user_id);

    void returnBatchMyTaskDeficient();

    void callProcessOrderHeader();

    void addCraForExternalBatch();
}

