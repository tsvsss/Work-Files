package com.rmi.applicationEntry.adfbc.views.lovs;

import java.sql.ResultSet;

import java.util.ArrayList;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaItem;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 28 15:06:20 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CustAccountBilltoViewImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public CustAccountBilltoViewImpl() {
    }

    /**
     * Returns the variable value for pPartyName.
     * @return variable value for pPartyName
     */
    public String getpPartyName() {
        return (String) ensureVariableManager().getVariableValue("pPartyName");
    }

    /**
     * Sets <code>value</code> for variable pPartyName.
     * @param value value to bind as pPartyName
     */
    public void setpPartyName(String value) {
        ensureVariableManager().setVariableValue("pPartyName", value);
    }

    /**
     * Returns the bind variable value for pOrderingCustomerId.
     * @return bind variable value for pOrderingCustomerId
     */
    public Integer getpOrderingCustomerId() {
        return (Integer) getNamedWhereClauseParam("pOrderingCustomerId");
    }

    /**
     * Sets <code>value</code> for bind variable pOrderingCustomerId.
     * @param value value to bind as pOrderingCustomerId
     */
    public void setpOrderingCustomerId(Integer value) {
        setNamedWhereClauseParam("pOrderingCustomerId", value);
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
    @Override
     public void applyViewCriteria(ViewCriteria viewCriteria, boolean b) {
         super.applyViewCriteria(supressLikeOperatorForLov(viewCriteria), b);
     }

    private ViewCriteria supressLikeOperatorForLov(ViewCriteria vc) {
    //Check for VC name, If cirtera is executed for suggested values
    if (vc != null && vc.getName().toLowerCase().contains("__lov__filterlist__vcr___")) {
    //Get current row of ViewCriteria (Current operation)
    ViewCriteriaRow row = (ViewCriteriaRow) vc.getCurrentRow();
    if (row != null) {
    //Get criterai items
    ArrayList criteriaItems = (ArrayList) row.getCriteriaItems();
    for (int i = 0; i < criteriaItems.size(); i++) {
    ViewCriteriaItem criteriaItem = (ViewCriteriaItem) criteriaItems.get(i);
    if (criteriaItem != null) {
    if ("STARTSWITH".equals(criteriaItem.getOperator())) {
    //Change STARTSWITH operator to CONTAINS
    criteriaItem.setOperator("CONTAINS");
    }
    }
    }
    }
    }
    return vc;
    }
}

