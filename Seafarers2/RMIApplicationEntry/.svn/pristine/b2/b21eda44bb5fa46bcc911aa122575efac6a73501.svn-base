package com.rmi.applicationEntry.adfbc.services;

import com.rmi.applicationEntry.adfbc.views.WorkFlowViewImpl;
import com.rmi.applicationEntry.adfbc.views.lovs.CustAccountBilltoViewImpl;
import com.rmi.applicationEntry.adfbc.views.lovs.CustAccountDeliverToViewImpl;

import com.rmi.applicationEntry.adfbc.views.lovs.CustAccountShipToViewImpl;

import java.sql.SQLException;

import oracle.jbo.server.ApplicationModuleImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 20 15:14:28 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------


import com.rmi.applicationEntry.adfbc.services.common.RMIApplicationEntryAppModule;


import com.rmi.applicationEntry.adfbc.views.SeafarerDocsOcViewImpl;
import com.rmi.applicationEntry.adfbc.views.SeafarerDocsSqcViewImpl;


import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import java.sql.Timestamp;
import java.sql.Types;

import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Calendar;

import oracle.jbo.domain.Date;

import oracle.jbo.JboException;

import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpServletRequest;

import oracle.adf.share.ADFContext;

import oracle.adf.view.rich.context.AdfFacesContext;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import oracle.sql.NUMBER;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Jan 28 15:15:57 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
/**
 * This is the default constructor (do not remove).
 */
public class RMIApplicationEntryAppModuleImpl extends ApplicationModuleImpl implements RMIApplicationEntryAppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public RMIApplicationEntryAppModuleImpl() {
    }


    /**
     * Container's getter for BatchesVO.
     * @return BatchesVO
     */
    public ViewObjectImpl getBatchIfaceView() {
        return (ViewObjectImpl) findViewObject("BatchIfaceView");
    }

    /**
     * Container's getter for BatchesRO.
     * @return BatchesRO
     */
    public ViewObjectImpl getBatchesView() {
        return (ViewObjectImpl) findViewObject("BatchesView");
    }

    /**
     * Method fetches user Id of the login user from session.
     * @return Integer returns user of the login user.
     **/
    public Integer getUserId() 
    {
        try 
        {
            Object usrId = ADFContext.getCurrent().getSessionScope().get("UserId");
            return (Integer.parseInt(usrId != null ? usrId.toString() : "-1"));

        } catch (Exception nfe) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching user Id." +
                                          " Please contact your System Administrator.", "",
                                          FacesMessage.SEVERITY_ERROR);
            nfe.printStackTrace();
        }
        return -1;
    }

    /**
     * Method to show simple facesMessage with header,detail, in html format.
     * @param header  Header of the FacesMesssage.
     * @param detail  Detail of the FacesMesssage.
     * @param severity  Severity of FacesMessage.
     */
    public static void addFormattedFacesErrorMessage(String header, String detail,
                                                     javax.faces.application.FacesMessage.Severity severity) {
        StringBuilder saveMsg = new StringBuilder("<html><body><b><span style='color:");

        if (severity != null) {
            if (severity.toString().equalsIgnoreCase("INFO 0"))
                saveMsg.append("#000000'>");
            else if (severity.toString().equalsIgnoreCase("WARN 1"))
                saveMsg.append("#000000'>");
            else if (severity.toString().equalsIgnoreCase("ERROR 2"))
                saveMsg.append("#000000'>");
            else
                saveMsg.append("#000000'>");
        } else
            saveMsg.append("#000000'>");

        saveMsg.append(header);
        saveMsg.append("</span></b>");
        saveMsg.append("</br><b>");
        //        saveMsg.append(detail);
        saveMsg.append("</b></body></html>");
        FacesMessage msg = new FacesMessage(saveMsg.toString());
        msg.setSeverity(severity);
        FacesContext.getCurrentInstance().addMessage(null, msg);
    }

    /**
     * Method to create a new batch. Setting default values for ordering customer based on login user
     * @param User id of the logged in user.
     * @throws exception.
     */
    public void createNewBatch(Integer user_id) {
        try {
            String user_type = getUserType(user_id);
            ViewObject batchesVO = getBatchIfaceView();
            Row row = batchesVO.createRow();
            row.setAttribute("CreatedBy", user_id);
            if (user_type.equalsIgnoreCase("Internal")) {
                String batch_name = "";
                ViewObject regionVo = getGetRegionNameByUserIdView();
                regionVo.setNamedWhereClauseParam("pUserId", user_id);
                regionVo.executeQuery();

                if (regionVo.getRowCount() > 0) {
                    Row frow = regionVo.first();
                    batch_name = batch_name.concat(frow.getAttribute("Name").toString());

                }
                if(batch_name.equalsIgnoreCase("MUMBAI, INDIA"))
                {
                   batch_name = "MUMBAI"; 
                    }
                batch_name = batch_name.concat(" INTERNAL ");
                SequenceImpl s = new SequenceImpl("rmi_seafarer.rmi_internal_batch_name_seq", getDBTransaction());
                batch_name = batch_name.concat(s.getSequenceNumber().toString());
                row.setAttribute("BatchName", batch_name);
            }
            ViewObject deliverToCustAccVo = getDeliverToCustAccountsView();
            deliverToCustAccVo.setNamedWhereClauseParam("pUserId", user_id);
            deliverToCustAccVo.executeQuery();
            Integer count = deliverToCustAccVo.getRowCount();
            if (count == 1) {
                Row deliverRow = deliverToCustAccVo.first();
                row.setAttribute("DeliverToCustAccountId", deliverRow.getAttribute("CustAccountId"));
                row.setAttribute("tranCustAccountDeliverToName", deliverRow.getAttribute("PartyName"));

                ViewObject deliverToAddress = getCustAccountDeliverToSuView();
                deliverToAddress.setNamedWhereClauseParam("pCustAccountId", deliverRow.getAttribute("CustAccountId"));
                deliverToAddress.executeQuery();
                if (deliverToAddress.getRowCount() == 1) {
                    Row billAddrow = deliverToAddress.first();
                    row.setAttribute("DeliverToSiteUseId", billAddrow.getAttribute("SuId"));
                    row.setAttribute("tranDeliverToSuAddress", billAddrow.getAttribute("Address"));

                }
                ViewObject billToCustAccVO = getBillToCustAccountsView();
                billToCustAccVO.setNamedWhereClauseParam("pOrderingCustomerId",
                                                         deliverRow.getAttribute("CustAccountId"));
                billToCustAccVO.executeQuery();

                count = billToCustAccVO.getRowCount();
                if (count == 1) {
                    Row billRow = billToCustAccVO.first();
                    row.setAttribute("BillToCustAccountId", billRow.getAttribute("CustAccountId"));
                    row.setAttribute("tranCustAccountBillToName", billRow.getAttribute("PartyName"));


                    ViewObject invoiceEmailIdVo = getInvoiceAgentEmailIdView1();
                    invoiceEmailIdVo.setNamedWhereClauseParam("pCustomerId", billRow.getAttribute("CustAccountId"));
                    invoiceEmailIdVo.executeQuery();
                }

                ViewObject shipToCustAccVO = getShipToCustAccountsView();
                shipToCustAccVO.setNamedWhereClauseParam("pOrderingCustomerId",
                                                         deliverRow.getAttribute("CustAccountId"));
                shipToCustAccVO.executeQuery();
                count = shipToCustAccVO.getRowCount();
                if (count == 1) {
                    Row shipRow = shipToCustAccVO.first();
                    row.setAttribute("ShipToCustAccountId", shipRow.getAttribute("CustAccountId"));
                    row.setAttribute("tranCustAccountShipToName", shipRow.getAttribute("PartyName"));


                }

            }


            //            String userType = getUserType(user_id);
            //            String lovName = "LOV_tranCustAccountBillToName";
            //            if (userType.equalsIgnoreCase("internal")) {
            //                lovName = "LOV_tranCustAccountBillToName1";
            //            } else {
            //                lovName = "LOV_tranCustAccountBillToName";
            //            }
            //            row.setAttribute("tranUserType", lovName);
            batchesVO.insertRow(row);
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("CURRENT_ESI_BATCH_ID", Integer.parseInt(row.getAttribute("EsiBatchId").toString()));

//            ADFContext.getCurrent().getPageFlowScope().put("param_batch_id",Integer.parseInt(row.getAttribute("EsiBatchId").toString()));
            
            
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while creating new batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();

            //            e.printStackTrace();
        }
    }

    /**
     * Method to filter BatchIface view for the selected batch.
     * @param batch id of the selected batch.
     * @throws exception.
     */
    public void editBatch(Integer batchId) {
        try {
//            ADFContext.getCurrent().getApplicationScope().put("ApplicationUrl", getApplicationUrl());
AdfFacesContext.getCurrentInstance().getPageFlowScope().put("CURRENT_ESI_BATCH_ID", batchId);
            ViewObject batchesVO = getBatchIfaceView();
            batchesVO.setWhereClause("esi_batch_id =" + batchId);
            batchesVO.executeQuery();
//            if (AdfFacesContext.getCurrentInstance().getPageFlowScope().get("user_type").toString().equalsIgnoreCase("Internal")) {
            if ("Internal".equalsIgnoreCase("Internal")) {
                if (batchesVO.getRowCount() > 0) {
                    Row row = batchesVO.first();
                    Integer custId = Integer.parseInt(row.getAttribute("DeliverToCustAccountId").toString());
                    ViewObject emailView = getMultipleChoiceOrderingAgentEmailView();
                    emailView.setNamedWhereClauseParam("pCustomerId", custId);
                    emailView.executeQuery();
                    if (row.getAttribute("BillToCustAccountId") != null) 
                    {
                        Integer custAcc = Integer.parseInt(row.getAttribute("BillToCustAccountId").toString());
                        ViewObject invoiceEmailIdVo = getInvoiceAgentEmailIdView1();
                        invoiceEmailIdVo.setNamedWhereClauseParam("pCustomerId", custAcc);
                        invoiceEmailIdVo.executeQuery();
                    }
                }
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while processing." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }

    /**
     * Container's getter for CustAccountBilltoLOV1.
     * @return CustAccountBilltoLOV1
     */
    public CustAccountBilltoViewImpl getBillToCustAccountsView() {
        return (CustAccountBilltoViewImpl) findViewObject("BillToCustAccountsView");
    }

    /**
     * Container's getter for CustAccountShipToLOV1.
     * @return CustAccountShipToLOV1
     */
    public CustAccountShipToViewImpl getShipToCustAccountsView() {
        return (CustAccountShipToViewImpl) findViewObject("ShipToCustAccountsView");
    }

    /**
     * Container's getter for CustAccountBillToSuLOV1.
     * @return CustAccountBillToSuLOV1
     */
    public ViewObjectImpl getBillToSiteUseView() {
        return (ViewObjectImpl) findViewObject("BillToSiteUseView");
    }

    /**
     * Container's getter for CustAccountShipToSuLOV1.
     * @return CustAccountShipToSuLOV1
     */
    public ViewObjectImpl getShipToSiteUseView() {
        return (ViewObjectImpl) findViewObject("ShipToSiteUseView");
    }

    /**
     * Method calls/executes DB function passed as paramater.
     * @param sqlReturnType pass return type of the passed function.
     * @param stmt pass DB function name with no. of arguments.
     * @param bindVars pass array of Object type which contains required parameters.
     * @return Object returns function output returned by database.
     * @throws SQLException.

     **/
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement cst = null;
        try {
            //Creating sql statement
            cst = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            //Register dataType for return value
            cst.registerOutParameter(1, sqlReturnType);
            //Pass input parameters value
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    cst.setObject(z + 2, bindVars[z]);
                }
            }
            cst.executeUpdate();
            //Finally get returned value
            return cst.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (cst != null) {
                try {
                    cst.close();
                } catch (SQLException e) {
                                            e.printStackTrace();
                }
            }
        }
    }

    /**
     * Method calls delete_batch DB function to delete the selected batch.
     * @param batchId batch id of the selected batch.
     * @return returns the object returned by the db function.
     **/
    public String deleteBatch(Integer batchId) {
        String status = "Not Found";
        try {

            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.delete_batch(?)", new Object[] { batchId });
            if (stat != null) {
                status = stat.toString();
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while deleting batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return status;
    }

    /**
     * Method to execute batches views to refresh the data on the page.
     */
    public void refreshBatchesVo() {

        try {
            ViewObject pendingBatchVO = getPendingBatchesView();
            pendingBatchVO.executeQuery();
            ViewObject submittedBatchVO = getSubmittedBatchesView();
            submittedBatchVO.executeQuery();
            this.getAccountStatusView().executeQuery();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while refreshing data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        //            ViewObject batchesRoVO = getBatchesRO();
        //             batchesRoVO.executeQuery();

    }
    /**
     * Method to call RMI_SICD_PUB.print_sicd_report to submit the request
     */
    public String submitRequest()
    {
            String p_log = "Success";
            String request_id = null;
            ViewObject requestView = getRMISubmitRequestDualView();
            Row row  = requestView.getCurrentRow();
            String programName = null;
            if(row.getAttribute("ProgramShortName") != null)
            {
             programName = row.getAttribute("ProgramShortName").toString();   
            }
            
            if(programName.equalsIgnoreCase("WO_ACKNO"))
            {
                 p_log =   ackRequest();        
            }
            if(programName.equalsIgnoreCase("WO_ACK_2"))
            {
                 p_log =   ack2Request();        
            }
            else if(programName.equalsIgnoreCase("WO_CONFIRM"))
            {
                 p_log =   WorkOrderConfirmationRequest();        
                }
            else if(programName.equalsIgnoreCase("WO_PICK"))
            {
                 p_log =   WorkOrderPickListRequest();      
                }
            else if(programName.equalsIgnoreCase("WO_ASSURE"))
            {
                 p_log =   WorkOrderQualityRequest();      
                }
            else if(programName.equalsIgnoreCase("WO_EVAL"))
            {
                 p_log =   WorkOrderSeafarerEvalRequest();      
                }
            else if(programName.equalsIgnoreCase("SICD151B-TEST"))
            {
                 p_log =   certificateOfApplicationRequest();      
                }
            else if(programName.equalsIgnoreCase("RMI_BOOK_CRA"))
            {
                 p_log =   bookAcknowledgementRequest();      
                }
            else if(programName.equalsIgnoreCase("SICD_DOC_PRINT_STATS") || programName.equalsIgnoreCase("SICD_DOC_PRINT_STATS_XML") || programName.equalsIgnoreCase("SICD_PROD_STATS") || programName.equalsIgnoreCase("SICD_PROD_STATS_XML"))
            {
                 p_log =   DocumentPrintingRequest(programName);      
                }
            else if(programName.equalsIgnoreCase("SICD_STALE"))
            {
                p_log = StaleOrdersRequest();
                
                }
            else if(programName.equalsIgnoreCase("RMI_SEAF_STATS") || programName.equalsIgnoreCase("SICDCERTOFF"))
            {
                p_log = SeafarerStaticsRequest(programName);
                
                }
            else if(programName.equalsIgnoreCase("SICD_CYCLE_TIMES") || programName.equalsIgnoreCase("SICD_WEEKLY"))
            {
                p_log = SICDCycleTimesRequest(programName);
                
                }
            else if(programName.equalsIgnoreCase("MI_REJECT_LTR") || programName.equalsIgnoreCase("MI_REJECT_LTR_PDF") 
                    || programName.equalsIgnoreCase("SICD_SET_DOC") || programName.equalsIgnoreCase("SICD151C_PDF") || programName.equalsIgnoreCase("SICD105D"))
            {
                p_log = rejectionLetter(programName);
                
                }
            else if(programName.equalsIgnoreCase("SICD_STATS"))
            {
                p_log = WorkInStatitcs(programName);
                
                }
            else if(programName.equalsIgnoreCase("SICD_DEF_LRT"))
            {
                    p_log = defficiencyLetter();
                        
                }
            else if(programName.equalsIgnoreCase("RMI_EX_BATCH_RTRN") || programName.equalsIgnoreCase("EXSICD_SEND_ACK_ONLINE") 
                    || programName.equalsIgnoreCase("IRI_SICD_TC_P") || programName.equalsIgnoreCase("RMI_SICD_UTIL_ONLINE_PENDING"))
            {
                    p_log = noParamRequest(programName);
                        
                }
            else
            {
        
        CallableStatement st = null;    
        try
        {
            
            Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
            Integer header_id = null;
            Integer line_id = null;
            Integer batch_id = null;
            Timestamp beginDate = null;
            Timestamp endDate = null;
            String salesOffice = null;
            String printername = null;
                        String number_of_copies = null;
                        if(row.getAttribute("PrinterName") != null)
                        {
                         printername = row.getAttribute("PrinterName").toString();   
                            }
                        if(row.getAttribute("NumberOfCopies") != null)
                        {
                         number_of_copies = row.getAttribute("NumberOfCopies").toString();   
                            }
            
            if(row.getAttribute("ProgramShortName") != null)
            {
             programName = row.getAttribute("ProgramShortName").toString();   
                }
            if(row.getAttribute("HeaderId") != null)
            {
             header_id =Integer.parseInt(row.getAttribute("HeaderId").toString());   
                }
            if(row.getAttribute("LineId") != null)
            {
             line_id =Integer.parseInt(row.getAttribute("LineId").toString());   
                }
            if(row.getAttribute("batchId") != null)
            {
             batch_id =Integer.parseInt(row.getAttribute("batchId").toString());   
                }
            if(row.getAttribute("FromDate") != null)
            {
             beginDate =(Timestamp)row.getAttribute("FromDate");   
                }
            if(row.getAttribute("ToDate") != null)
            {
                endDate =(Timestamp)row.getAttribute("ToDate"); 
                }
            if(row.getAttribute("SalesOffice") != null)
            {
             salesOffice =row.getAttribute("SalesOffice").toString();   
                }
            
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd hh:mm:ss");
            java.util.Date date1 = null;
            java.util.Date date2 = null;
            String strDate2 = null;
            String strDate1 = null;
            
            if(beginDate != null)
                date1 = new java.util.Date(beginDate.getTime());
            
            if(date1 != null)
                strDate1 = formatter.format(date1);
            
            if(endDate != null)
                date2 = new java.util.Date(endDate.getTime());
            
            if(date2 != null)
                strDate2 = formatter.format(date2);
            
            System.out.println(user_id+"---"+beginDate+"----"+endDate+"---"+programName+"---"+salesOffice+"---"+strDate1+"----"+strDate2);
            
            requestView.executeQuery();
            
            String status = null;
            
            String sql = "BEGIN RMI_SICD_PUB.generic_submit_conc_req(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            st.setObject(1, user_id); //MAIL SERVER
            st.setObject(2, programName);
            st.setObject(3, strDate1);
            st.setObject(4, strDate2);
            st.setObject(5, salesOffice);
            st.setObject(6, null);
            st.setObject(7, null);
            st.setObject(8, null);
            st.setObject(9, null);
            st.setObject(10, null);
            st.setObject(11, null);
            st.setObject(12, null);
            st.setObject(13, null);
            st.setObject(14, null);
            st.setObject(15, null);
            st.setObject(16, null);
            st.setObject(17, null);
            st.registerOutParameter(18, Types.VARCHAR); //OUT PARAM ERROR
            st.setObject(19, printername);//OUT PARAM ERROR
                        st.setObject(20, number_of_copies);
            //            header_id = Integer.parseInt(st.getObject(4).toString());
            st.execute();
            System.out.println(st.getObject(18)+"-----18");
            //                System.out.println("-----1111-----");
            //                    ret[0] = st.getObject(1).toString();
            //                System.out.println(st.getObject(4)+"------2222");
            if (st.getObject(18) != null) {
                p_log = st.getObject(18).toString();
            }
    ////            CallableStatement st = null;
    ////            String sql = "BEGIN RMI_SICD_PUB.print_sicd_report(?,?,?,?,?);END;";
    ////            st = getDBTransaction().createCallableStatement(sql, 0);
    ////            st.setObject(1, user_id); //MAIL SERVER
    ////            st.setObject(2, programName);
    ////            st.setObject(3, header_id);
    ////            st.setObject(4, line_id);
    ////            st.setObject(5, null);
    ////            st.executeUpdate();
    //
    ////            CallableStatement st = null;
    ////            String sql = "BEGIN RMI_SICD_PUB.print_exsicd_book_cra(?,?,?);END;";
    ////            st = getDBTransaction().createCallableStatement(sql, 0);
    ////            st.setObject(1, user_id); //MAIL SERVER
    ////            st.setObject(2, batch_id);
    ////            st.registerOutParameter(3, Types.NUMERIC);
    //////            st.setObject(3, header_id);
    //////            st.setObject(4, line_id);
    //////            st.setObject(5, null);
    ////            st.executeUpdate();
    ////             request_id = st.getObject(3).toString();
    ////            System.out.println(request_id+"'-----");
            return p_log;
        }
            
            catch(Exception e)
            {
                    addFormattedFacesErrorMessage("System encountered an exception while submitting request." +
                                                  "Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);   
                    e.printStackTrace();
             } finally {
                try 
                {
                    if (st != null) {
                        st.close();
                    }
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }
         }
        return p_log;
        }

    public String ackRequest()
    {
    System.out.println("in ack request");
        ViewObject requestView = getRMISubmitRequestDualView();
        Row row  = requestView.getCurrentRow();
        Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
        Integer header_id = null;
        String printername = null;
                    String number_of_copies = null;
                    if(row.getAttribute("PrinterName") != null)
                    {
                     printername = row.getAttribute("PrinterName").toString();   
                        }
                    if(row.getAttribute("NumberOfCopies") != null)
                    {
                     number_of_copies = row.getAttribute("NumberOfCopies").toString();   
                        }
        if(row.getAttribute("HeaderId") != null)
        {
            header_id =Integer.parseInt(row.getAttribute("HeaderId").toString());   
        }
        System.out.println("header Id in WO_ACKNO :: "+header_id);
        CallableStatement st = null;
        String status = null;
        String p_log = "Success";
        String sql = "BEGIN RMI_SICD_PUB.generic_submit_conc_req(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);END;";
        st = getDBTransaction().createCallableStatement(sql, 0);
        try {
            st.setObject(1, user_id); //MAIL SERVER
            st.setObject(2, "WO_ACKNO");
            st.setObject(3, header_id);
            st.setObject(4, null);
            st.setObject(5, null);
            st.setObject(6, null);
            st.setObject(7, "C");
        st.setObject(8, null);
        st.setObject(9, null);
        st.setObject(10, null);
        st.setObject(11, null);
        st.setObject(12, null);
        st.setObject(13, null);
        st.setObject(14, null);
        st.setObject(15, null);
        st.setObject(16, null);
        st.setObject(17, null);
        st.registerOutParameter(18, Types.VARCHAR); //OUT PARAM ERROR
        st.setObject(19, printername);//OUT PARAM ERROR
                    st.setObject(20, number_of_copies);

        //            header_id = Integer.parseInt(st.getObject(4).toString());
        st.execute();
        System.out.println(st.getObject(18)+"-----18");
        //                System.out.println("-----1111-----");
        //                    ret[0] = st.getObject(1).toString();
        //                System.out.println(st.getObject(4)+"------2222");
        if (st.getObject(18) != null) {
            p_log = st.getObject(18).toString();
        } 
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try 
            {
                if (st != null) {
                    st.close();
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }
    return p_log;
    }
    public String noParamRequest(String shortName)
    {
        ViewObject requestView = getRMISubmitRequestDualView();
        Row row  = requestView.getCurrentRow();
        Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
        String printername = null;
                    String number_of_copies = null;
                    if(row.getAttribute("PrinterName") != null)
                    {
                     printername = row.getAttribute("PrinterName").toString();   
                        }
                    if(row.getAttribute("NumberOfCopies") != null)
                    {
                     number_of_copies = row.getAttribute("NumberOfCopies").toString();   
                        }
        CallableStatement st = null;
        String status = null;
        String p_log = "Success";
        String sql = "BEGIN RMI_SICD_PUB.generic_submit_conc_req(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);END;";
        st = getDBTransaction().createCallableStatement(sql, 0);
        try {
            st.setObject(1, user_id); //MAIL SERVER
            st.setObject(2, shortName);
            st.setObject(3, null);
            st.setObject(4, null);
            st.setObject(5, null);
            st.setObject(6, null);
            st.setObject(7, null);
        st.setObject(8, null);
        st.setObject(9, null);
        st.setObject(10, null);
        st.setObject(11, null);
        st.setObject(12, null);
        st.setObject(13, null);
        st.setObject(14, null);
        st.setObject(15, null);
        st.setObject(16, null);
        st.setObject(17, null);
        st.registerOutParameter(18, Types.VARCHAR); //OUT PARAM ERROR
        st.setObject(19, printername);//OUT PARAM ERROR
                    st.setObject(20, number_of_copies);

        //            header_id = Integer.parseInt(st.getObject(4).toString());
        st.execute();
        System.out.println(st.getObject(18)+"-----18");
        //                System.out.println("-----1111-----");
        //                    ret[0] = st.getObject(1).toString();
        //                System.out.println(st.getObject(4)+"------2222");
        if (st.getObject(18) != null) {
            p_log = st.getObject(18).toString();
        } 
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try 
            {
                if (st != null) {
                    st.close();
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }
    return p_log;
    }
    public String ack2Request()
    {
    System.out.println("in ack request");
        ViewObject requestView = getRMISubmitRequestDualView();
        Row row  = requestView.getCurrentRow();
        Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
        Integer header_id = null;
        String printername = null;
                   String number_of_copies = null;
                   if(row.getAttribute("PrinterName") != null)
                   {
                    printername = row.getAttribute("PrinterName").toString();   
                       }
                   if(row.getAttribute("NumberOfCopies") != null)
                   {
                    number_of_copies = row.getAttribute("NumberOfCopies").toString();   
                       }
        if(row.getAttribute("HeaderId") != null)
        {
            header_id =Integer.parseInt(row.getAttribute("HeaderId").toString());   
        }
        System.out.println("header Id in WO_ACKNO :: "+header_id);
        CallableStatement st = null;
        String status = null;
        String p_log = "Success";
        String sql = "BEGIN RMI_SICD_PUB.generic_submit_conc_req(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);END;";
        st = getDBTransaction().createCallableStatement(sql, 0);
        try {
            st.setObject(1, user_id); //MAIL SERVER
            st.setObject(2, "WO_ACK_2");
            st.setObject(3, header_id);
            st.setObject(4, "C");
            st.setObject(5, null);
            st.setObject(6, null);
            st.setObject(7, null);
        st.setObject(8, null);
        st.setObject(9, null);
        st.setObject(10, null);
        st.setObject(11, null);
        st.setObject(12, null);
        st.setObject(13, null);
        st.setObject(14, null);
        st.setObject(15, null);
        st.setObject(16, null);
        st.setObject(17, null);
        st.registerOutParameter(18, Types.VARCHAR); //OUT PARAM ERROR
        st.setObject(19, printername);//OUT PARAM ERROR
                    st.setObject(20, number_of_copies);

        //            header_id = Integer.parseInt(st.getObject(4).toString());
        st.execute();
        System.out.println(st.getObject(18)+"-----18");
        //                System.out.println("-----1111-----");
        //                    ret[0] = st.getObject(1).toString();
        //                System.out.println(st.getObject(4)+"------2222");
        if (st.getObject(18) != null) {
            p_log = st.getObject(18).toString();
        } 
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try 
            {
                if (st != null) {
                    st.close();
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }
    return p_log;
    }
    public String defficiencyLetter()
    {
    System.out.println("in ack request");
        ViewObject requestView = getRMISubmitRequestDualView();
        Row row  = requestView.getCurrentRow();
        Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
        Integer header_id = null;
        String action = null;
        String printername = null;
                   String number_of_copies = null;
                   if(row.getAttribute("PrinterName") != null)
                   {
                    printername = row.getAttribute("PrinterName").toString();   
                       }
                   if(row.getAttribute("NumberOfCopies") != null)
                   {
                    number_of_copies = row.getAttribute("NumberOfCopies").toString();   
                       }
        if(row.getAttribute("HeaderId") != null)
        {
            header_id =Integer.parseInt(row.getAttribute("HeaderId").toString());   
        }
        if(row.getAttribute("ActionName") != null)
        {
            action =row.getAttribute("ActionName").toString();   
        }
        System.out.println("header Id in WO_ACKNO :: "+header_id);
        CallableStatement st = null;
        String status = null;
        String p_log = "Success";
        String sql = "BEGIN RMI_SICD_PUB.generic_submit_conc_req(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);END;";
        st = getDBTransaction().createCallableStatement(sql, 0);
        try {
            st.setObject(1, user_id); //MAIL SERVER
            st.setObject(2, "SICD_DEF_LRT");
            st.setObject(3, header_id);
            st.setObject(4, null);
            st.setObject(5, null);
            st.setObject(6, null);
            st.setObject(7, action);
        st.setObject(8, null);
        st.setObject(9, null);
        st.setObject(10, null);
        st.setObject(11, null);
        st.setObject(12, null);
        st.setObject(13, null);
        st.setObject(14, null);
        st.setObject(15, null);
        st.setObject(16, null);
        st.setObject(17, null);
        st.registerOutParameter(18, Types.VARCHAR); //OUT PARAM ERROR
        st.setObject(19, printername);//OUT PARAM ERROR
                    st.setObject(20, number_of_copies);

        //            header_id = Integer.parseInt(st.getObject(4).toString());
        st.execute();
        System.out.println(st.getObject(18)+"-----18");
        //                System.out.println("-----1111-----");
        //                    ret[0] = st.getObject(1).toString();
        //                System.out.println(st.getObject(4)+"------2222");
        if (st.getObject(18) != null) {
            p_log = st.getObject(18).toString();
        } 
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try 
            {
                if (st != null) {
                    st.close();
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }
    return p_log;
    }
    
    public String rejectionLetter(String shortName)
    {
    System.out.println("MI-201C Rejection Letter");
        ViewObject requestView = getRMISubmitRequestDualView();
        Row row  = requestView.getCurrentRow();
        Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
        Integer header_id = null;
        String printername = null;
                  String number_of_copies = null;
                  if(row.getAttribute("PrinterName") != null)
                  {
                   printername = row.getAttribute("PrinterName").toString();   
                      }
                  if(row.getAttribute("NumberOfCopies") != null)
                  {
                   number_of_copies = row.getAttribute("NumberOfCopies").toString();   
                      }
        if(row.getAttribute("HeaderId") != null)
        {
            header_id =Integer.parseInt(row.getAttribute("HeaderId").toString());   
        }
        System.out.println("header Id in WO_ACKNO :: "+header_id);
        CallableStatement st = null;
        String status = null;
        String p_log = "Success";
        String sql = "BEGIN RMI_SICD_PUB.generic_submit_conc_req(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);END;";
        st = getDBTransaction().createCallableStatement(sql, 0);
        try {
            st.setObject(1, user_id); //MAIL SERVER
            st.setObject(2, shortName);
            st.setObject(3, header_id);
            st.setObject(4, null);
            st.setObject(5, null);
            st.setObject(6, null);
            st.setObject(7, null);
        st.setObject(8, null);
        st.setObject(9, null);
        st.setObject(10, null);
        st.setObject(11, null);
        st.setObject(12, null);
        st.setObject(13, null);
        st.setObject(14, null);
        st.setObject(15, null);
        st.setObject(16, null);
        st.setObject(17, null);
        st.registerOutParameter(18, Types.VARCHAR); //OUT PARAM ERROR
        st.setObject(19, printername);//OUT PARAM ERROR
                    st.setObject(20, number_of_copies);

        //            header_id = Integer.parseInt(st.getObject(4).toString());
        st.execute();
        System.out.println(st.getObject(18)+"-----18");
        //                System.out.println("-----1111-----");
        //                    ret[0] = st.getObject(1).toString();
        //                System.out.println(st.getObject(4)+"------2222");
        if (st.getObject(18) != null) {
            p_log = st.getObject(18).toString();
        } 
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try 
            {
                if (st != null) {
                    st.close();
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }
    return p_log;
    }

    public String WorkOrderConfirmationRequest()
    {
        System.out.println("in conf request");
            ViewObject requestView = getRMISubmitRequestDualView();
            Row row  = requestView.getCurrentRow();
            Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
            Integer header_id = null;
            String printername = null;
                        String number_of_copies = null;
                        if(row.getAttribute("PrinterName") != null)
                        {
                         printername = row.getAttribute("PrinterName").toString();   
                            }
                        if(row.getAttribute("NumberOfCopies") != null)
                        {
                         number_of_copies = row.getAttribute("NumberOfCopies").toString();   
                            }
            if(row.getAttribute("HeaderId") != null)
            {
             header_id =Integer.parseInt(row.getAttribute("HeaderId").toString());   
                }
            CallableStatement st = null;
            String status = null;
            String p_log = "Success";
            String sql = "BEGIN RMI_SICD_PUB.generic_submit_conc_req(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            try {
                st.setObject(1, user_id); //MAIL SERVER
                st.setObject(2, "WO_CONFIRM");
                st.setObject(3, header_id);
                st.setObject(4, "C");
                st.setObject(5, null);
                st.setObject(6, null);
                st.setObject(7, null);
            st.setObject(8, null);
            st.setObject(9, null);
            st.setObject(10, null);
            st.setObject(11, null);
            st.setObject(12, null);
            st.setObject(13, null);
            st.setObject(14, null);
            st.setObject(15, null);
            st.setObject(16, null);
            st.setObject(17, null);
            st.registerOutParameter(18, Types.VARCHAR); //OUT PARAM ERROR
            st.setObject(19, printername);//OUT PARAM ERROR
                        st.setObject(20, number_of_copies);
            //            header_id = Integer.parseInt(st.getObject(4).toString());
            st.execute();
            System.out.println(st.getObject(18)+"-----18");
            //                System.out.println("-----1111-----");
            //                    ret[0] = st.getObject(1).toString();
            //                System.out.println(st.getObject(4)+"------2222");
            if (st.getObject(18) != null) {
                p_log = st.getObject(18).toString();
            } 
            } catch (SQLException e) {
                
                e.printStackTrace();
            } finally {
                try 
                {
                    if (st != null) {
                        st.close();
                    }
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }
        return p_log;
        }
    public String WorkOrderPickListRequest()
    {
        System.out.println("in pick request");
            ViewObject requestView = getRMISubmitRequestDualView();
            Row row  = requestView.getCurrentRow();
            Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
            Integer header_id = null;
            String printername = null;
                        String number_of_copies = null;
                        if(row.getAttribute("PrinterName") != null)
                        {
                         printername = row.getAttribute("PrinterName").toString();   
                            }
                        if(row.getAttribute("NumberOfCopies") != null)
                        {
                         number_of_copies = row.getAttribute("NumberOfCopies").toString();   
                            }
            if(row.getAttribute("HeaderId") != null)
            {
             header_id =Integer.parseInt(row.getAttribute("HeaderId").toString());   
                }
            CallableStatement st = null;
            String status = null;
            String p_log = "Success";
            String sql = "BEGIN RMI_SICD_PUB.generic_submit_conc_req(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            try {
                st.setObject(1, user_id); //MAIL SERVER
                st.setObject(2, "WO_PICK");
                st.setObject(3, header_id);
                st.setObject(4, "C");
                st.setObject(5, null);
                st.setObject(6, null);
                st.setObject(7, null);
            st.setObject(8, null);
            st.setObject(9, null);
            st.setObject(10, null);
            st.setObject(11, null);
            st.setObject(12, null);
            st.setObject(13, null);
            st.setObject(14, null);
            st.setObject(15, null);
            st.setObject(16, null);
            st.setObject(17, null);
            st.registerOutParameter(18, Types.VARCHAR); //OUT PARAM ERROR
            st.setObject(19, printername);//OUT PARAM ERROR
                        st.setObject(20, number_of_copies);
            //            header_id = Integer.parseInt(st.getObject(4).toString());
            st.execute();
            System.out.println(st.getObject(18)+"-----18");
            //                System.out.println("-----1111-----");
            //                    ret[0] = st.getObject(1).toString();
            //                System.out.println(st.getObject(4)+"------2222");
            if (st.getObject(18) != null) {
                p_log = st.getObject(18).toString();
            } 
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try 
                {
                    if (st != null) {
                        st.close();
                    }
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }
        return p_log;
        }

    public String WorkOrderQualityRequest()
    {
        System.out.println("in quality request");
            ViewObject requestView = getRMISubmitRequestDualView();
            Row row  = requestView.getCurrentRow();
            Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
            Integer header_id = null;
            String printername = null;
                        String number_of_copies = null;
                        if(row.getAttribute("PrinterName") != null)
                        {
                         printername = row.getAttribute("PrinterName").toString();   
                            }
                        if(row.getAttribute("NumberOfCopies") != null)
                        {
                         number_of_copies = row.getAttribute("NumberOfCopies").toString();   
                            }
            if(row.getAttribute("HeaderId") != null)
            {
             header_id =Integer.parseInt(row.getAttribute("HeaderId").toString());   
                }
            CallableStatement st = null;
            String status = null;
            String p_log = "Success";
            String sql = "BEGIN RMI_SICD_PUB.generic_submit_conc_req(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            try {
                st.setObject(1, user_id); //MAIL SERVER
                st.setObject(2, "WO_ASSURE");
                st.setObject(3, header_id);
                st.setObject(4, null);
                st.setObject(5, null);
                st.setObject(6, null);
                st.setObject(7, "C");
            st.setObject(8, null);
            st.setObject(9, null);
            st.setObject(10, null);
            st.setObject(11, null);
            st.setObject(12, null);
            st.setObject(13, null);
            st.setObject(14, null);
            st.setObject(15, null);
            st.setObject(16, null);
            st.setObject(17, null);
            st.registerOutParameter(18, Types.VARCHAR); //OUT PARAM ERROR
            st.setObject(19, printername);//OUT PARAM ERROR
                       st.setObject(20, number_of_copies);

            //            header_id = Integer.parseInt(st.getObject(4).toString());
            st.execute();
            System.out.println(st.getObject(18)+"-----18");
            //                System.out.println("-----1111-----");
            //                    ret[0] = st.getObject(1).toString();
            //                System.out.println(st.getObject(4)+"------2222");
            if (st.getObject(18) != null) {
                p_log = st.getObject(18).toString();
            } 
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try 
                {
                    if (st != null) {
                        st.close();
                    }
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }
        return p_log;
        }
    public String WorkOrderSeafarerEvalRequest()
    {
        System.out.println("in seafarer eval");
            ViewObject requestView = getRMISubmitRequestDualView();
            Row row  = requestView.getCurrentRow();
            Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
            Integer header_id = null;
            String printername = null;
                        String number_of_copies = null;
                        if(row.getAttribute("PrinterName") != null)
                        {
                         printername = row.getAttribute("PrinterName").toString();   
                            }
                        if(row.getAttribute("NumberOfCopies") != null)
                        {
                         number_of_copies = row.getAttribute("NumberOfCopies").toString();   
                            }
            if(row.getAttribute("HeaderId") != null)
            {
             header_id =Integer.parseInt(row.getAttribute("HeaderId").toString());   
                }
            CallableStatement st = null;
            String status = null;
            String p_log = "Success";
            String sql = "BEGIN RMI_SICD_PUB.generic_submit_conc_req(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            try {
                st.setObject(1, user_id); //MAIL SERVER
                st.setObject(2, "WO_EVAL");
                st.setObject(3, header_id);
                st.setObject(4, "C");
                st.setObject(5, null);
                st.setObject(6, null);
                st.setObject(7, null);
            st.setObject(8, null);
            st.setObject(9, null);
            st.setObject(10, null);
            st.setObject(11, null);
            st.setObject(12, null);
            st.setObject(13, null);
            st.setObject(14, null);
            st.setObject(15, null);
            st.setObject(16, null);
            st.setObject(17, null);
            st.registerOutParameter(18, Types.VARCHAR); //OUT PARAM ERROR
            st.setObject(19, printername);//OUT PARAM ERROR
                        st.setObject(20, number_of_copies);
            //            header_id = Integer.parseInt(st.getObject(4).toString());
            st.execute();
            System.out.println(st.getObject(18)+"-----18");
            //                System.out.println("-----1111-----");
            //                    ret[0] = st.getObject(1).toString();
            //                System.out.println(st.getObject(4)+"------2222");
            if (st.getObject(18) != null) {
                p_log = st.getObject(18).toString();
            } 
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try 
                {
                    if (st != null) {
                        st.close();
                    }
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }
        return p_log;
        }
    public String certificateOfApplicationRequest()
    {
        System.out.println("in certificate of application");
            ViewObject requestView = getRMISubmitRequestDualView();
            Row row  = requestView.getCurrentRow();
            Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
            Integer header_id = null;
            String printername = null;
                       String number_of_copies = null;
                       if(row.getAttribute("PrinterName") != null)
                       {
                        printername = row.getAttribute("PrinterName").toString();   
                           }
                       if(row.getAttribute("NumberOfCopies") != null)
                       {
                        number_of_copies = row.getAttribute("NumberOfCopies").toString();   
                           }
            if(row.getAttribute("HeaderId") != null)
            {
             header_id =Integer.parseInt(row.getAttribute("HeaderId").toString());   
                }
            CallableStatement st = null;
            String status = null;
            String p_log = "Success";
            String sql = "BEGIN RMI_SICD_PUB.generic_submit_conc_req(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            try {
                st.setObject(1, user_id); //MAIL SERVER
                st.setObject(2, "SICD151B-TEST");
                st.setObject(3, header_id);
                st.setObject(4, null);
                st.setObject(5, null);
                st.setObject(6, null);
                st.setObject(7, "C");
            st.setObject(8, null);
            st.setObject(9, null);
            st.setObject(10, null);
            st.setObject(11, null);
            st.setObject(12, null);
            st.setObject(13, null);
            st.setObject(14, null);
            st.setObject(15, null);
            st.setObject(16, null);
            st.setObject(17, null);
            st.registerOutParameter(18, Types.VARCHAR); //OUT PARAM ERROR
            st.setObject(19, printername);//OUT PARAM ERROR
                        st.setObject(20, number_of_copies);

            //            header_id = Integer.parseInt(st.getObject(4).toString());
            st.execute();
            System.out.println(st.getObject(18)+"-----18");
            //                System.out.println("-----1111-----");
            //                    ret[0] = st.getObject(1).toString();
            //                System.out.println(st.getObject(4)+"------2222");
            if (st.getObject(18) != null) {
                p_log = st.getObject(18).toString();
            } 
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try 
                {
                    if (st != null) {
                        st.close();
                    }
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }
        return p_log;
        }
    public String bookAcknowledgementRequest()
    {
        System.out.println("book acknowlwdgement");
            ViewObject requestView = getRMISubmitRequestDualView();
            Row row  = requestView.getCurrentRow();
            Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
            Integer batch_id = null;
            String printername = null;
            String include = "Yes";
                        String seafarer_id = null;
                        String number_of_copies = null;
                        if(row.getAttribute("PrinterName") != null)
                        {
                         printername = row.getAttribute("PrinterName").toString();   
                            }
                        if(row.getAttribute("NumberOfCopies") != null)
                        {
                         number_of_copies = row.getAttribute("NumberOfCopies").toString();   
                            }
            if(row.getAttribute("batchId") != null)
            {
             batch_id =Integer.parseInt(row.getAttribute("batchId").toString());   
                }
            if(row.getAttribute("IncludeAllSeafarer") != null)
                       {
                        include =row.getAttribute("IncludeAllSeafarer").toString();   
                           }
                       if(row.getAttribute("SeafarerId") != null)
                       {
                        seafarer_id =row.getAttribute("SeafarerId").toString();   
                           }
            System.out.println(batch_id+"-----batch_id");
            CallableStatement st = null;
            String status = null;
            String p_log = "Success";
            String sql = "BEGIN RMI_SICD_PUB.generic_submit_conc_req(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            try {
                st.setObject(1, user_id); //MAIL SERVER
                st.setObject(2, "RMI_BOOK_CRA");
                st.setObject(3, batch_id);
                st.setObject(4, seafarer_id);
                st.setObject(5, null);
                st.setObject(6, null);
                st.setObject(7, null);
            st.setObject(8, null);
            st.setObject(9, null);
            st.setObject(10, null);
            st.setObject(11, null);
            st.setObject(12, null);
            st.setObject(13, null);
            st.setObject(14, null);
            st.setObject(15, null);
            st.setObject(16, null);
            st.setObject(17, null);
            st.registerOutParameter(18, Types.VARCHAR); //OUT PARAM ERROR
            st.setObject(19, printername);//OUT PARAM ERROR
                        st.setObject(20, number_of_copies);

            //            header_id = Integer.parseInt(st.getObject(4).toString());
            st.execute();
            System.out.println(st.getObject(18)+"-----18");
            //                System.out.println("-----1111-----");
            //                    ret[0] = st.getObject(1).toString();
            //                System.out.println(st.getObject(4)+"------2222");
            if (st.getObject(18) != null) {
                p_log = st.getObject(18).toString();
            } 
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try 
                {
                    if (st != null) {
                        st.close();
                    }
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }
        return p_log;
        }
    
    public String DocumentPrintingRequest(String short_name)
    {
        System.out.println("book acknowlwdgement");
            ViewObject requestView = getRMISubmitRequestDualView();
            Row row  = requestView.getCurrentRow();
            Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
            Integer batch_id = null;
            String group_name = null;
            String printername = null;
                        String number_of_copies = null;
                        if(row.getAttribute("PrinterName") != null)
                        {
                         printername = row.getAttribute("PrinterName").toString();   
                            }
                        if(row.getAttribute("NumberOfCopies") != null)
                        {
                         number_of_copies = row.getAttribute("NumberOfCopies").toString();   
                            }
            if(row.getAttribute("batchId") != null)
            {
             batch_id =Integer.parseInt(row.getAttribute("batchId").toString());   
                }
            Timestamp beginDate = null;
                        Timestamp endDate = null;

                        if(row.getAttribute("FromDate") != null)
                        {
                         beginDate =(Timestamp)row.getAttribute("FromDate");   
                            }
                        if(row.getAttribute("ToDate") != null)
                        {
                            endDate =(Timestamp)row.getAttribute("ToDate"); 
                            }
            if(row.getAttribute("GroupName") != null)
            {
                group_name =row.getAttribute("GroupName").toString(); 
                }
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd hh:mm:ss");

                        java.util.Date date1 = null;
                        java.util.Date date2 = null;
                        String strDate2 = null;
                        String strDate1 = null;
                        
                        if(beginDate != null)
                            date1 = new java.util.Date(beginDate.getTime());
                        
                        if(date1 != null)
                            strDate1 = formatter.format(date1);
                        
                        if(endDate != null)
                            date2 = new java.util.Date(endDate.getTime());
                        
                        if(date2 != null)
                            strDate2 = formatter.format(date2);
            System.out.println(batch_id+"-----batch_id");
            CallableStatement st = null;
            String status = null;
            String p_log = "Success";
            String sql = "BEGIN RMI_SICD_PUB.generic_submit_conc_req(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            try {
                st.setObject(1, user_id); //MAIL SERVER
                st.setObject(2, short_name);
                st.setObject(3, strDate1);
                st.setObject(4, strDate2);
                st.setObject(5, group_name);
                st.setObject(6, null);
                st.setObject(7, null);
            st.setObject(8, null);
            st.setObject(9, null);
            st.setObject(10, null);
            st.setObject(11, null);
            st.setObject(12, null);
            st.setObject(13, null);
            st.setObject(14, null);
            st.setObject(15, null);
            st.setObject(16, null);
            st.setObject(17, null);
            st.registerOutParameter(18, Types.VARCHAR); //OUT PARAM ERROR
            st.setObject(19, printername);//OUT PARAM ERROR
                        st.setObject(20, number_of_copies);
            //            header_id = Integer.parseInt(st.getObject(4).toString());
            st.execute();
            System.out.println(st.getObject(18)+"-----18");
            //                System.out.println("-----1111-----");
            //                    ret[0] = st.getObject(1).toString();
            //                System.out.println(st.getObject(4)+"------2222");
            if (st.getObject(18) != null) {
                p_log = st.getObject(18).toString();
            } 
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try 
                {
                    if (st != null) {
                        st.close();
                    }
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }
        return p_log;
        }
    public String SeafarerStaticsRequest(String shortname)
    {
        System.out.println("shortname");
            ViewObject requestView = getRMISubmitRequestDualView();
            Row row  = requestView.getCurrentRow();
            Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
           
            Timestamp beginDate = null;
                        Timestamp endDate = null;
            String printername = null;
                       String number_of_copies = null;
                       if(row.getAttribute("PrinterName") != null)
                       {
                        printername = row.getAttribute("PrinterName").toString();   
                           }
                       if(row.getAttribute("NumberOfCopies") != null)
                       {
                        number_of_copies = row.getAttribute("NumberOfCopies").toString();   
                           }
                        if(row.getAttribute("FromDate") != null)
                        {
                         beginDate =(Timestamp)row.getAttribute("FromDate");   
                            }
                        if(row.getAttribute("ToDate") != null)
                        {
                            endDate =(Timestamp)row.getAttribute("ToDate"); 
                            }
           
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd hh:mm:ss");

                        java.util.Date date1 = null;
                        java.util.Date date2 = null;
                        String strDate2 = null;
                        String strDate1 = null;
                        
                        if(beginDate != null)
                            date1 = new java.util.Date(beginDate.getTime());
                        
                        if(date1 != null)
                            strDate1 = formatter.format(date1);
                        
                        if(endDate != null)
                            date2 = new java.util.Date(endDate.getTime());
                        
                        if(date2 != null)
                            strDate2 = formatter.format(date2);
            CallableStatement st = null;
            String status = null;
            String p_log = "Success";
            String sql = "BEGIN RMI_SICD_PUB.generic_submit_conc_req(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            try {
                st.setObject(1, user_id); //MAIL SERVER
                st.setObject(2, shortname);
                st.setObject(3, strDate1);
                st.setObject(4, strDate2);
                st.setObject(5, null);
                st.setObject(6, null);
                st.setObject(7, null);
            st.setObject(8, null);
            st.setObject(9, null);
            st.setObject(10, null);
            st.setObject(11, null);
            st.setObject(12, null);
            st.setObject(13, null);
            st.setObject(14, null);
            st.setObject(15, null);
            st.setObject(16, null);
            st.setObject(17, null);
            st.registerOutParameter(18, Types.VARCHAR); //OUT PARAM ERROR
            st.setObject(19, printername);//OUT PARAM ERROR
                        st.setObject(20, number_of_copies);

            //            header_id = Integer.parseInt(st.getObject(4).toString());
            st.execute();
            System.out.println(st.getObject(18)+"-----18");
            //                System.out.println("-----1111-----");
            //                    ret[0] = st.getObject(1).toString();
            //                System.out.println(st.getObject(4)+"------2222");
            if (st.getObject(18) != null) {
                p_log = st.getObject(18).toString();
            } 
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try 
                {
                    if (st != null) {
                        st.close();
                    }
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }
        return p_log;
        }
    public String WorkInStatitcs(String shortname)
    {
        System.out.println("shortname");
            ViewObject requestView = getRMISubmitRequestDualView();
            Row row  = requestView.getCurrentRow();
            Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
            String salesOffice  = null;
            String group_name = null;
            String printername = null;
                        String number_of_copies = null;
                        if(row.getAttribute("PrinterName") != null)
                        {
                         printername = row.getAttribute("PrinterName").toString();   
                            }
                        if(row.getAttribute("NumberOfCopies") != null)
                        {
                         number_of_copies = row.getAttribute("NumberOfCopies").toString();   
                            }
                if(row.getAttribute("SalesOffice") != null)
                           {
                            salesOffice =row.getAttribute("SalesOffice").toString();   
                               }
            Timestamp beginDate = null;
                        Timestamp endDate = null;

                        if(row.getAttribute("FromDate") != null)
                        {
                         beginDate =(Timestamp)row.getAttribute("FromDate");   
                            }
                        if(row.getAttribute("ToDate") != null)
                        {
                            endDate =(Timestamp)row.getAttribute("ToDate"); 
                            }
           
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd hh:mm:ss");

                        java.util.Date date1 = null;
                        java.util.Date date2 = null;
                        String strDate2 = null;
                        String strDate1 = null;
                        
                        if(beginDate != null)
                            date1 = new java.util.Date(beginDate.getTime());
                        
                        if(date1 != null)
                            strDate1 = formatter.format(date1);
                        
                        if(endDate != null)
                            date2 = new java.util.Date(endDate.getTime());
                        
                        if(date2 != null)
                            strDate2 = formatter.format(date2);
            CallableStatement st = null;
            String status = null;
            String p_log = "Success";
            String sql = "BEGIN RMI_SICD_PUB.generic_submit_conc_req(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            try {
                st.setObject(1, user_id); //MAIL SERVER
                st.setObject(2, shortname);
                st.setObject(3, strDate1);
                st.setObject(4, strDate2);
                st.setObject(5, salesOffice);
                st.setObject(6, null);
                st.setObject(7, null);
            st.setObject(8, null);
            st.setObject(9, null);
            st.setObject(10, null);
            st.setObject(11, null);
            st.setObject(12, null);
            st.setObject(13, null);
            st.setObject(14, null);
            st.setObject(15, null);
            st.setObject(16, null);
            st.setObject(17, null);
            st.registerOutParameter(18, Types.VARCHAR); //OUT PARAM ERROR
            st.setObject(19, printername);//OUT PARAM ERROR
                        st.setObject(20, number_of_copies);

            //            header_id = Integer.parseInt(st.getObject(4).toString());
            st.execute();
            System.out.println(st.getObject(18)+"-----18");
            //                System.out.println("-----1111-----");
            //                    ret[0] = st.getObject(1).toString();
            //                System.out.println(st.getObject(4)+"------2222");
            if (st.getObject(18) != null) {
                p_log = st.getObject(18).toString();
            } 
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try 
                {
                    if (st != null) {
                        st.close();
                    }
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }
        return p_log;
        }
    public String StaleOrdersRequest()
    {
        System.out.println("stale orders");
            ViewObject requestView = getRMISubmitRequestDualView();
            Row row  = requestView.getCurrentRow();
            Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
            String salesOffice  = null;
            String group_name = null;
            String printername = null;
                       String number_of_copies = null;
                       if(row.getAttribute("PrinterName") != null)
                       {
                        printername = row.getAttribute("PrinterName").toString();   
                           }
                       if(row.getAttribute("NumberOfCopies") != null)
                       {
                        number_of_copies = row.getAttribute("NumberOfCopies").toString();   
                           }
                if(row.getAttribute("SalesOffice") != null)
                           {
                            salesOffice =row.getAttribute("SalesOffice").toString();   
                               }

            Timestamp beginDate = null;

                        if(row.getAttribute("FromDate") != null)
                        {
                         beginDate =(Timestamp)row.getAttribute("FromDate");   
                            }
                        
            
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd hh:mm:ss");

                        java.util.Date date1 = null;
                        java.util.Date date2 = null;
                        String strDate2 = null;
                        String strDate1 = null;
                        
                        if(beginDate != null)
                            date1 = new java.util.Date(beginDate.getTime());
                        
                        if(date1 != null)
                            strDate1 = formatter.format(date1);
                        
                        
            CallableStatement st = null;
            String status = null;
            String p_log = "Success";
            String sql = "BEGIN RMI_SICD_PUB.generic_submit_conc_req(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            try {
                st.setObject(1, user_id); //MAIL SERVER
                st.setObject(2, "SICD_STALE");
                st.setObject(3, strDate1);
                st.setObject(4, salesOffice);
                st.setObject(5, null);
                st.setObject(6, null);
                st.setObject(7, null);
            st.setObject(8, null);
            st.setObject(9, null);
            st.setObject(10, null);
            st.setObject(11, null);
            st.setObject(12, null);
            st.setObject(13, null);
            st.setObject(14, null);
            st.setObject(15, null);
            st.setObject(16, null);
            st.setObject(17, null);
            st.registerOutParameter(18, Types.VARCHAR); //OUT PARAM ERROR
            st.setObject(19, printername);//OUT PARAM ERROR
                        st.setObject(20, number_of_copies);
            //            header_id = Integer.parseInt(st.getObject(4).toString());
            st.execute();
            System.out.println(st.getObject(18)+"-----18");
            //                System.out.println("-----1111-----");
            //                    ret[0] = st.getObject(1).toString();
            //                System.out.println(st.getObject(4)+"------2222");
            if (st.getObject(18) != null) {
                p_log = st.getObject(18).toString();
            } 
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try 
                {
                    if (st != null) {
                        st.close();
                    }
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }
        return p_log;
        }
    public String SICDCycleTimesRequest(String shortname)
    {
        System.out.println(shortname);
            ViewObject requestView = getRMISubmitRequestDualView();
            Row row  = requestView.getCurrentRow();
            Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
           
            String salesOffice = null;
            String printername = null;
                       String number_of_copies = null;
                       if(row.getAttribute("PrinterName") != null)
                       {
                        printername = row.getAttribute("PrinterName").toString();   
                           }
                       if(row.getAttribute("NumberOfCopies") != null)
                       {
                        number_of_copies = row.getAttribute("NumberOfCopies").toString();   
                           }
                        if(row.getAttribute("SalesOffice") != null)
                        {
                         salesOffice =row.getAttribute("SalesOffice").toString();   
                            }
            CallableStatement st = null;
            String status = null;
            String p_log = "Success";
            String sql = "BEGIN RMI_SICD_PUB.generic_submit_conc_req(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            try {
                st.setObject(1, user_id); //MAIL SERVER
                st.setObject(2, shortname);
                st.setObject(3, salesOffice);
                st.setObject(4, null);
                st.setObject(5, null);
                st.setObject(6, null);
                st.setObject(7, null);
            st.setObject(8, null);
            st.setObject(9, null);
            st.setObject(10, null);
            st.setObject(11, null);
            st.setObject(12, null);
            st.setObject(13, null);
            st.setObject(14, null);
            st.setObject(15, null);
            st.setObject(16, null);
            st.setObject(17, null);
            st.registerOutParameter(18, Types.VARCHAR); //OUT PARAM ERROR
            st.setObject(19, printername);//OUT PARAM ERROR
                       st.setObject(20, number_of_copies);

            //            header_id = Integer.parseInt(st.getObject(4).toString());
            st.execute();
            System.out.println(st.getObject(18)+"-----18");
            //                System.out.println("-----1111-----");
            //                    ret[0] = st.getObject(1).toString();
            //                System.out.println(st.getObject(4)+"------2222");
            if (st.getObject(18) != null) {
                p_log = st.getObject(18).toString();
            } 
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try 
                {
                    if (st != null) {
                        st.close();
                    }
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }
        return p_log;
        }
    /**
     * Container's getter for SeafarerVO1.
     * @return SeafarerVO1
     */
    public ViewObjectImpl getSeafarerIfaceView() {
        return (ViewObjectImpl) findViewObject("SeafarerIfaceView");
    }

    /**
     * Container's getter for BatchSeafarerLK1.
     * @return BatchSeafarerLK1
     */
    public ViewLinkImpl getBatchSeafarerLK1() {
        return (ViewLinkImpl) findViewLink("BatchSeafarerLK1");
    }
    public void searchRequestDeatailView()
        {
            try {
                ViewObject searchRequestView = getRequestSearchDualView();
                Row row = searchRequestView.getCurrentRow();
    //            System.out.println(row.getAttribute("RequestId"));
    //            System.out.println(row.getAttribute("RequestDate"));
    //            System.out.println(row.getAttribute("ProgramId"));
    //            System.out.println(row.getAttribute("Requestor"));
                Integer user_id =
                    Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
                String Role_name = "SYSTEM ADMINISTRATOR";

                ViewObject requestDetailView = getRequestDetailsView();
                requestDetailView.setNamedWhereClauseParam("pRequestid", row.getAttribute("RequestId"));
                requestDetailView.setNamedWhereClauseParam("pRequestDate", row.getAttribute("RequestDate"));
                requestDetailView.setNamedWhereClauseParam("pProgramId", row.getAttribute("ProgramId"));

                requestDetailView.setNamedWhereClauseParam("pDays", row.getAttribute("Days"));
                
                System.out.println(row.getAttribute("Requestor")+"---requestor");
                
                if (Role_name.equalsIgnoreCase("SYSTEM ADMINISTRATOR")) {
                    requestDetailView.setNamedWhereClauseParam("pRequestedBy", row.getAttribute("Requestor"));
                } else {
                    requestDetailView.setNamedWhereClauseParam("pRequestedBy", user_id);
                }
                requestDetailView.executeQuery();

            } catch (NumberFormatException nfe) {
                addFormattedFacesErrorMessage("System encountered an exception while searching data." +
                                              " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            nfe.printStackTrace();
            }    
            }
    
    public void searchRequestDeatailViewOnSubmission(String RequestId)
        {
            try {
              Integer request_id = Integer.parseInt(RequestId.toString());
                Integer user_id =
                    Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
                String Role_name = "SYSTEM ADMINISTRATOR";

                ViewObject requestDetailView = getRequestDetailsView();
                requestDetailView.setNamedWhereClauseParam("pRequestid", request_id);
                requestDetailView.setNamedWhereClauseParam("pRequestDate", null);
                requestDetailView.setNamedWhereClauseParam("pProgramId", null);

                requestDetailView.setNamedWhereClauseParam("pDays", null);
                
//                System.out.println(row.getAttribute("Requestor")+"---requestor");
                
//                if (Role_name.equalsIgnoreCase("SYSTEM ADMINISTRATOR")) {
//                    requestDetailView.setNamedWhereClauseParam("pRequestedBy", row.getAttribute("Requestor"));
//                } else {
//                    requestDetailView.setNamedWhereClauseParam("pRequestedBy", user_id);
//                }
                
                requestDetailView.setNamedWhereClauseParam("pRequestedBy", null);
                
                requestDetailView.executeQuery();

            } catch (NumberFormatException nfe) {
                addFormattedFacesErrorMessage("System encountered an exception while searching data." +
                                              " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
           nfe.printStackTrace();
            }    
            }
    /**
     * Method to filter SearchSeafarerView based on selected parameters.
     * @param documentId document id entered by the user.
     * @param documentType document type selected by the user.
     * @param name last name entered by the user.
     * @param birth_date entered by the user.
     * @return returns the row count after filtering the view.
     * @throws exception.
     */
    public Integer searchSeafarer(Integer documentId, String documentType, String name, Date birth_date,
                                  Integer seafarer_id) {
        Integer rowCount = 0;
        try {
            ViewObject searchSeafarerVO = getSearchSeafarerView();
            searchSeafarerVO.setNamedWhereClauseParam("pDocId", documentId);
            searchSeafarerVO.setNamedWhereClauseParam("pDocType", documentType);
            searchSeafarerVO.setNamedWhereClauseParam("pName", name);
            searchSeafarerVO.setNamedWhereClauseParam("pDateOfBirth", birth_date);
            searchSeafarerVO.setNamedWhereClauseParam("pSeafarerId", seafarer_id);
            searchSeafarerVO.executeQuery();
            rowCount = searchSeafarerVO.getRowCount();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching seafarer data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                            e.printStackTrace();
        }
        return rowCount;
    }

    /**
     * Container's getter for SearchSeafarerRO1.
     * @return SearchSeafarerRO1
     */
    public ViewObjectImpl getSearchSeafarerView() {
        return (ViewObjectImpl) findViewObject("SearchSeafarerView");
    }

    /**
     * Method to validated if the selected seafarer is in active or warning state.
     * @return returns error if seafarer is not in active or warning state.
     * @throws exception.
     */
    public String validateBeforeCopySeafarerValues() {
        try {
            ViewObject searchSeafarerVo = getSearchSeafarerView();
            if (searchSeafarerVo.getRowCount() > 0) {
                Row selectedRow = searchSeafarerVo.getCurrentRow();
                String status = selectedRow.getAttribute("Status").toString();
                if (!status.equalsIgnoreCase("Active") && !status.equalsIgnoreCase("Warning")) {
                    resetBatchInfo();
                    return "error";
                   
                }
           String seId = selectedRow.getAttribute("SeafarerId").toString();
           ViewObject seafarerVo = getSeafarerIfaceView();
           RowSetIterator rit = seafarerVo.createRowSetIterator(null);
           while(rit.hasNext())
           {
               Row srow = rit.next();
               if(srow.getAttribute("SeafarerId") != null)
               {
              String sefarerId = srow.getAttribute("SeafarerId").toString();
               if(sefarerId.equalsIgnoreCase(seId))
               {
                       resetBatchInfo();
                  return "duplicate"; 
                   }
               }
               
               }
                return "validated";
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while validating seafarer." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

        return "validated";

    }

    /**
     * Method to copy the selected seafarer's data to the new seafarer.
     * call rmi_sicd_adf_pub.get_issue_type DB function to get the issue type to be set in new seafarer's data
     * @throws exception.
     */
    public void copySeafarerValues() {
        try {
            ViewObject searchSeafarerVo = getSearchSeafarerView();
            if (searchSeafarerVo.getRowCount() > 0) {
                Row selectedRow = searchSeafarerVo.getCurrentRow();
                ViewObject seafarerVO = getSeafarerIfaceView();
                Row row = seafarerVO.getCurrentRow();
                row.setAttribute("BirthDate", selectedRow.getAttribute("BirthDate"));
                row.setAttribute("BirthPlace", selectedRow.getAttribute("BirthPlace"));
                row.setAttribute("FirstName", selectedRow.getAttribute("FirstName"));
                
                System.out.println("selected gender :: "+selectedRow.getAttribute("Gender"));
                row.setAttribute("Gender", (selectedRow.getAttribute("Gender") != null) 
                                            ? selectedRow.getAttribute("Gender") : "Male");
                row.setAttribute("LastName", selectedRow.getAttribute("LastName"));
                row.setAttribute("Nationality", selectedRow.getAttribute("Nationality"));
                row.setAttribute("SeafarerId", selectedRow.getAttribute("SeafarerId"));
                row.setAttribute("PassportIssuingCountryCode", selectedRow.getAttribute("PassportIssuingCountry"));
                row.setAttribute("ResidenceCountryCode", selectedRow.getAttribute("CountryOfResidence"));
                row.setAttribute("WcCityListId", selectedRow.getAttribute("CityOfResidence"));
                String full_name = selectedRow.getAttribute("BirthDate").toString();
                String Nationality = selectedRow.getAttribute("Nationality").toString();
                Date birthDate = (Date) selectedRow.getAttribute("BirthDate");
                Integer seaId = Integer.parseInt(selectedRow.getAttribute("SeafarerId").toString());
                //                Object stat = callStoredFunction(Types.INTEGER, "APPS.rmi_seaf_consent_id(?,?,?)", new Object[] {full_name,Nationality,birthDate});
                //                System.out.println(stat+"--------------------result");
                Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.get_issue_type(?)", new Object[] {
                                                 seaId });
                if(stat.toString().equalsIgnoreCase("Replacement"))
                {
                        row.setAttribute("IssueType", "Current"); 
                        row.setAttribute("IdcardIssueTypeUpd", "Y");
                        row.setAttribute("BookIssueTypeUpd", "Y");
                    }
                else
                {row.setAttribute("IssueType", stat);}
                
                row.setAttribute("IssueTypeIdCard", "Current");
                //                 System.out.println(stat+"-----111111111");


            }

        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching seafarer data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }

    /**
     * Method to create a new row in SeafarerIfaceView if the row count is 0.
     */
    public void createOrEditSeafarer() {
        try {
            ViewObject seafarerVo = getSeafarerIfaceView();
            //    System.out.println(seafarerVo.getRowCount()+"------1212121");
            if (seafarerVo.getRowCount() == 0) {
                //        System.out.println(seafarerVo.getRowCount()+"------1212121");
                Row createRow = seafarerVo.createRow();
                seafarerVo.insertRow(createRow);
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while creating or editing seafarer." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
    }

    /**
     * Method to fetch the vessel details based on the imo number and set details to Current row of the SeafarerIfaceView.
     * @param imo Imo Number entered by the user.
     */
    public void imoValueChange(Integer imo) {

        try {
            ViewObject seafarerVO = getSeafarerIfaceView();
            Row currentRow = seafarerVO.getCurrentRow();
            if (imo != null) {

                ViewObject vesselVO = getVesselView();
                vesselVO.setNamedWhereClauseParam("pImoNumber", imo);
                vesselVO.setNamedWhereClauseParam("pOfficialNumber", null);
                vesselVO.setNamedWhereClauseParam("pVesselPk", null);
                vesselVO.executeQuery();
                Row row = vesselVO.first();

                if (row != null) {

                    currentRow.setAttribute("tranVesselName", row.getAttribute("Name"));
                    currentRow.setAttribute("VesselPk", row.getAttribute("VesselPk"));
                    currentRow.setAttribute("tranOfficialNo", row.getAttribute("OfficialNumber"));
                    currentRow.setAttribute("tranVesselNameInternal",row.getAttribute("Name"));


                } else {
                    currentRow.setAttribute("tranVesselName", null);
                    currentRow.setAttribute("VesselPk", null);
                    currentRow.setAttribute("tranVesselNameInternal",null);
                }
            } else {
                currentRow.setAttribute("tranVesselName", null);
                currentRow.setAttribute("VesselPk", null);
                currentRow.setAttribute("tranVesselNameInternal",null);
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while submitting new imo number." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
    }

    /**
     * Method to fetch the vessel details based on the official number and set details to Current row of the SeafarerIfaceView.
     * @param off Official Number entered by the user.
     */
    public void offValueChange(Integer off) {

        try {
            ViewObject seafarerVO = getSeafarerIfaceView();
            Row currentRow = seafarerVO.getCurrentRow();
            if (off != null) {

                ViewObject vesselVO = getVesselView();
                vesselVO.setNamedWhereClauseParam("pOfficialNumber", off);
                vesselVO.setNamedWhereClauseParam("pVesselPk", null);
                vesselVO.setNamedWhereClauseParam("pImoNumber", null);
                vesselVO.executeQuery();
                Row row = vesselVO.first();
                if (row != null) {
                    currentRow.setAttribute("tranVesselName", row.getAttribute("Name"));
                    currentRow.setAttribute("VesselPk", row.getAttribute("VesselPk"));
                    currentRow.setAttribute("tranVesselNo", row.getAttribute("ImoNumber"));
                    currentRow.setAttribute("tranVesselNameInternal", row.getAttribute("Name"));
                } else {
                    currentRow.setAttribute("tranVesselName", null);
                    currentRow.setAttribute("VesselPk", null);
                    currentRow.setAttribute("tranVesselNameInternal",null);
                }
            } else {
                currentRow.setAttribute("tranVesselName", null);
                currentRow.setAttribute("VesselPk", null);
                currentRow.setAttribute("tranVesselNameInternal",null);

            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while submitting new official number." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
    }

    /**
     * Container's getter for VesselRO1.
     * @return VesselRO1
     */
    public ViewObjectImpl getVesselView() {
        return (ViewObjectImpl) findViewObject("VesselView");
    }

    /**
     * Method to set the defalut values of the new seafarer.
     */
    public void setSeafarer() {
        try {
            resetBatchInfo();
            SequenceImpl s = new SequenceImpl("SICD_SFRS_ID_SEQ", getDBTransaction());
            ViewObject seafarerVO = getSeafarerIfaceView();
            Row currentRow = seafarerVO.getCurrentRow();
            if(currentRow.getAttribute("SeafarerId") == null)
            {
            currentRow.setAttribute("SeafarerId", s.getSequenceNumber());
            currentRow.setAttribute("IssueType", "New");
            currentRow.setAttribute("IssueTypeIdCard", "Current");
        }
            else
            {
//                System.out.println(currentRow.getAttribute("SeafarerId")+"----SeafarerId");
//                System.out.println(currentRow.getAttribute("IssueType")+"----issuetype");
                    Integer seafarerId = Integer.parseInt(currentRow.getAttribute("SeafarerId").toString());
                ViewObject searchSeaVo = getSearchSeafarerDetailsView();
                searchSeaVo.setNamedWhereClauseParam("pSeafarerId", seafarerId);   
                    searchSeaVo.executeQuery();
                if(searchSeaVo.getRowCount() > 0)
                {
                  Row frow = searchSeaVo.first();                
                System.out.println("selected gender :: "+frow.getAttribute("Gender"));
                        currentRow.setAttribute("Gender", (frow.getAttribute("Gender") != null) 
                                                            ? frow.getAttribute("Gender") : "Male");
                        Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.get_issue_type(?)", new Object[] {
                                                         seafarerId });
                        currentRow.setAttribute("IssueType", stat);
                        currentRow.setAttribute("IssueTypeIdCard", "Current");
                    
                    }
//                currentRow.setAttribute("IssueType", currentRow.getAttribute("IssueType"));
                               
                }
        }catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while creating new seafarer." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }

   public String checkNames()
   {
      ViewObject seafarer = getSeafarerIfaceView();
      Row row = seafarer.getCurrentRow();
      if(row.getAttribute("FirstName") != null || row.getAttribute("LastName") != null)
      {
      return "notnull";    
          }
      return "null";
       
       }

    /**
     * Container's getter for SeafarerDocsSqcVO1.
     * @return SeafarerDocsSqcVO1
     */
    public SeafarerDocsSqcViewImpl getSeafarerDocsSqcView() {
        return (SeafarerDocsSqcViewImpl) findViewObject("SeafarerDocsSqcView");
    }

    /**
     * Container's getter for SeafarerSeafarerDocsVL1.
     * @return SeafarerSeafarerDocsVL1
     */
    public ViewLinkImpl getSeafarerSeafarerDocsVL1() {
        return (ViewLinkImpl) findViewLink("SeafarerSeafarerDocsVL1");
    }

    /**
     * Container's getter for SeafarerDocsOcVO1.
     * @return SeafarerDocsOcVO1
     */
    public SeafarerDocsOcViewImpl getSeafarerDocsOcView() {
        return (SeafarerDocsOcViewImpl) findViewObject("SeafarerDocsOcView");
    }

    /**
     * Container's getter for SeafarerSeafarerDocsOcLK1.
     * @return SeafarerSeafarerDocsOcLK1
     */
    public ViewLinkImpl getSeafarerSeafarerDocsOcLK1() {
        return (ViewLinkImpl) findViewLink("SeafarerSeafarerDocsOcLK1");
    }

    /**
     * Method to filter BatchStatusWiseView on the page load
     * @param user_id User Id of the logged in user.
     */
    public void onLoadBatchesVO(Integer user_id) {
        try {
            ViewObject batchesStatusRVO = getBatchStatusWiseView();
            batchesStatusRVO.setNamedWhereClauseParam("pUserId", user_id);
            batchesStatusRVO.executeQuery();
        } catch (Exception e) {
//            addFormattedFacesErrorMessage("System encountered an exception while loading page." +
//                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

        //            ViewObject billToCustAccVO = getBillToCustAccounts();
        //            billToCustAccVO.setNamedWhereClauseParam("user_id", user_id);
        //            billToCustAccVO.executeQuery();
    }

    public void sendmail() {

    }

    /**
     * Method to upload document and entering data into DocumentScanningLog table.
     * call iri_edocs_pkg.GET_CATEGORY_ID db function.
     * call another method callProceduregetFileName to get the file name.
     * @return returns path of the file returned by the method.
     */

    public String uploadDocument(String param1, String param2, String param3, String fileName, String rejected) {
        String path = null;
        try {
            //
            // System.out.println("--------11111");
            ViewObject batchVO = getBatchIfaceView();
            Row batchRow = batchVO.getCurrentRow();
            Integer batchId = Integer.parseInt(batchRow.getAttribute("EsiBatchId").toString());
            ViewObject seafarerVO = getSeafarerIfaceView();
            Row seafarerRow = seafarerVO.getCurrentRow();
            ViewObject seafarerOcVO = getSeafarerDocsOcView();
            Row ocRow = seafarerOcVO.getCurrentRow();
            ViewObject seafarersqccVO = getSeafarerDocsSqcView();
            Row sqcRow = seafarersqccVO.getCurrentRow();
            Integer esiId = Integer.parseInt(seafarerRow.getAttribute("EsiId").toString());
            Integer seafarerId = Integer.parseInt(seafarerRow.getAttribute("SeafarerId").toString());

            //        System.out.println(batchId+"----"+esiId+"----"+seafarerId);
            Object stat = callStoredFunction(Types.INTEGER, "iri_edocs_pkg.GET_CATEGORY_ID(?,?,?)", new Object[] {
                                             param1, param2, param3
            });
            
            if(rejected.equalsIgnoreCase("yes"))
            {
                    seafarerRow.setAttribute("CorrectedFlag", "Y");        
                
                }
            
            
//            System.out.println(stat + "---------stat");
            ViewObject scaanningVO = getDocumentScanningView();
            Row createRow = scaanningVO.createRow();
            //   System.out.println(param2+"-----"+batchId+"------"+esiId+"-----"+seafarerId+"------44444");
            createRow.setAttribute("DocumentType", param2);
            createRow.setAttribute("EsdiId", null);
            createRow.setAttribute("EsiBatchId", batchId);
            createRow.setAttribute("EsiId", esiId);
            createRow.setAttribute("IriEdocsId", seafarerId);
            createRow.setAttribute("SeafarerId", seafarerId);
            scaanningVO.insertRow(createRow);
            try {
                this.getTransaction().commit();
            } catch (Exception e) {
                e.printStackTrace();
                this.getTransaction().commit();
            }

            //            System.out.println(stat+"---------stat");
            String seafa = seafarerId.toString();
            String catg = stat.toString();
            String[] ret = callProceduregetFileName(fileName, seafa, catg);

            //            System.out.println("--------2222");
            path = ret[0];
            Integer edoc = Integer.parseInt(ret[1].toString());
//            System.out.println(edoc+"-----edoc");
            if (param2.equalsIgnoreCase("0033")) {
                seafarerRow.setAttribute("AdditionalDocEdocId", edoc);
            }

            if (param2.equalsIgnoreCase("0002")) {
                if (seafarerRow.getAttribute("PhotoEdocId") != null & rejected.equalsIgnoreCase("yes")) {
                    Integer ed = Integer.parseInt(seafarerRow.getAttribute("PhotoEdocId").toString());
                    documentHistoryInsert(batchId, ed, seafarerId, param2, batchRow);
//                    System.out.println("data insert in new table");
                }
                seafarerRow.setAttribute("PhotoEdocId", edoc);
            }

            if (param2.equalsIgnoreCase("0003")) {
                if (seafarerRow.getAttribute("IdentityDocEdocId") != null & rejected.equalsIgnoreCase("yes")) {
                    Integer ed = Integer.parseInt(seafarerRow.getAttribute("IdentityDocEdocId").toString());
                    documentHistoryInsert(batchId, ed, seafarerId, param2, batchRow);
                }
                seafarerRow.setAttribute("IdentityDocEdocId", edoc);
            }
            if (param2.equalsIgnoreCase("0004")) {
                if (seafarerRow.getAttribute("PhysicalEdocId") != null & rejected.equalsIgnoreCase("yes")) {
                    Integer ed = Integer.parseInt(seafarerRow.getAttribute("PhysicalEdocId").toString());
                    documentHistoryInsert(batchId, ed, seafarerId, param2, batchRow);
                }
                seafarerRow.setAttribute("PhysicalEdocId", edoc);
            }
            if (param2.equalsIgnoreCase("0008")) {
                if (seafarerRow.getAttribute("SeaserviceTranscriptEdocId") != null & rejected.equalsIgnoreCase("yes")) {
                    Integer ed = Integer.parseInt(seafarerRow.getAttribute("SeaserviceTranscriptEdocId").toString());
                    documentHistoryInsert(batchId, ed, seafarerId, param2, batchRow);
                }
                seafarerRow.setAttribute("SeaserviceTranscriptEdocId", edoc);
            }
            if (param2.equalsIgnoreCase("0001")) {
                if (seafarerRow.getAttribute("ApplicationEdocId") != null & rejected.equalsIgnoreCase("yes")) {
                    Integer ed = Integer.parseInt(seafarerRow.getAttribute("ApplicationEdocId").toString());
                    documentHistoryInsert(batchId, ed, seafarerId, param2, batchRow);
                }
                seafarerRow.setAttribute("ApplicationEdocId", edoc);
            }
            if (param2.equalsIgnoreCase("0009")) {
                if (seafarerRow.getAttribute("AffidavitEdocId") != null & rejected.equalsIgnoreCase("yes")) {
                    Integer ed = Integer.parseInt(seafarerRow.getAttribute("AffidavitEdocId").toString());
                    documentHistoryInsert(batchId, ed, seafarerId, param2, batchRow);
                }
                seafarerRow.setAttribute("AffidavitEdocId", edoc);
            }
            if (param2.equalsIgnoreCase("0016")) {
                if (seafarerRow.getAttribute("SatEdocId") != null & rejected.equalsIgnoreCase("yes")) {
                    Integer ed = Integer.parseInt(seafarerRow.getAttribute("SatEdocId").toString());
                    documentHistoryInsert(batchId, ed, seafarerId, param2, batchRow);
                }
                seafarerRow.setAttribute("SatEdocId", edoc);
            }
            if (param2.equalsIgnoreCase("0031")) {
                if (seafarerRow.getAttribute("InternalEdocId") != null & rejected.equalsIgnoreCase("yes")) {
                    Integer ed = Integer.parseInt(seafarerRow.getAttribute("InternalEdocId").toString());
                    documentHistoryInsert(batchId, ed, seafarerId, param2, batchRow);
                }
                seafarerRow.setAttribute("InternalEdocId", edoc);
            }
            if (param2.equalsIgnoreCase("0025")) {
                if (seafarerRow.getAttribute("ConsentEdocId") != null & rejected.equalsIgnoreCase("yes")) {
                    Integer ed = Integer.parseInt(seafarerRow.getAttribute("ConsentEdocId").toString());
                    documentHistoryInsert(batchId, ed, seafarerId, param2, batchRow);
                }
                seafarerRow.setAttribute("ConsentEdocId", edoc);


            }
            if (param2.equalsIgnoreCase("0005")) {
                if (ocRow.getAttribute("EdocId") != null & rejected.equalsIgnoreCase("yes")) {
                    Integer ed = Integer.parseInt(ocRow.getAttribute("EdocId").toString());
//                    documentHistoryInsert(batchId, ed, seafarerId, param2, batchRow);
                    documentHistoryDocsIfaceInsert(ed, param2, ocRow, batchRow);
                }
                ocRow.setAttribute("EdocId", edoc);
            }
            if (param2.equalsIgnoreCase("0006")) {
                if (sqcRow.getAttribute("EdocId") != null & rejected.equalsIgnoreCase("yes")) {
                    Integer ed = Integer.parseInt(sqcRow.getAttribute("EdocId").toString());
//                    documentHistoryInsert(batchId, ed, seafarerId, param2, batchRow);
                    documentHistoryDocsIfaceInsert(ed, param2, sqcRow, batchRow);
                }
                sqcRow.setAttribute("EdocId", edoc);
            }
            if (param2.equalsIgnoreCase("0011")) {
                if (sqcRow.getAttribute("SupportEdocId") != null & rejected.equalsIgnoreCase("yes")) {
                    Integer ed = Integer.parseInt(sqcRow.getAttribute("SupportEdocId").toString());
//                    documentHistoryInsert(batchId, ed, seafarerId, param2, batchRow);
                    documentHistoryDocsIfaceInsert(ed, param2, sqcRow, batchRow);
                }
                sqcRow.setAttribute("SupportEdocId", edoc);
            }
            //            this.getTransaction().commit();
            //            System.out.println("--------3333");
        } catch (Exception e) {
            printTmpLogs("log desc :: "+e.getMessage());
            addFormattedFacesErrorMessage("System encountered an exception while uploading document." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
            //                this.getTransaction().commit();
        }
        
        printTmpLogs("path in upload document :: "+path);
        return path;


    }

    /**
     * Method to add consent details.
     * call add_consent db function to add data to rmi_privacy_consent table.
     * @param p_user_id User Id of the logged in user.
     */
    public void add_consent(Integer p_user_id) {
        try {
            
            
            ViewObject seaVO = getSeafarerIfaceView();
            Row row = seaVO.getCurrentRow();
            String first_name = null;
            String last_name = null;
            String nationality = null;
            Date dob = null;
            Integer edoc_id = null;
            Date consent_date = null;
            Date consent_expire_date = null;
            Date date5 = null;
            String marketing = "N";
            String enitytype = "";
            String ackno = "";
            Date oStartDate = null;
            Date OEndDate =  null;
            String cType ="offline";
                
            row.setAttribute("tranConsentUploadedBoolean", "Uploaded");
            row.setAttribute("tranUploadButtonLabel", "Uploaded");

            Integer seafarerId = Integer.parseInt(row.getAttribute("SeafarerId").toString());
            if (row.getAttribute("FirstName") != null) {
                first_name = row.getAttribute("FirstName").toString();
            }
            if (row.getAttribute("LastName") != null) {
                last_name = row.getAttribute("LastName").toString();
            }
            if (row.getAttribute("transNationality") != null) {
                nationality = row.getAttribute("transNationality").toString();
            }
            if (row.getAttribute("BirthDate") != null) {
                dob = (Date) row.getAttribute("BirthDate");
            }
            if (row.getAttribute("ConsentEdocId") != null) {
                edoc_id = Integer.parseInt(row.getAttribute("ConsentEdocId").toString());
            }
            if (row.getAttribute("tranEntityType") != null) {
                enitytype = row.getAttribute("tranEntityType").toString();
            }
            if (row.getAttribute("tranConsentMarketing") != null) {
               if(row.getAttribute("tranConsentMarketing").toString().equalsIgnoreCase("true"))
               {
                  marketing = "Y"; 
                   }
            }
            Integer esi_batch_id = Integer.parseInt(row.getAttribute("EsiBatchId").toString());
            //            System.out.println(row.getAttribute("tranUploadedConsentStartDate")+"------11");
            if (row.getAttribute("tranUploadedConsentStartDate") != null) {

                consent_date = (Date) row.getAttribute("tranUploadedConsentStartDate");
                //                    System.out.println(consent_date+"------22");
            }
            if (row.getAttribute("tranUploadedConsentExpireDate") != null) {
                consent_expire_date = (Date) row.getAttribute("tranUploadedConsentExpireDate");
                //              System.out.println(consent_expire_date+"------333");

            }
            if (row.getAttribute("tranConsentStartDate") != null) {
                oStartDate = (Date) row.getAttribute("tranConsentStartDate");
                //              System.out.println(consent_expire_date+"------333");

            }
            if (row.getAttribute("tranConsentExpDate") != null) {
                OEndDate = (Date) row.getAttribute("tranConsentExpDate");
                //              System.out.println(consent_expire_date+"------333");

            }
            if (row.getAttribute("tranAckNoConsent") != null) {
                ackno = row.getAttribute("tranAckNoConsent").toString();
                //              System.out.println(consent_expire_date+"------333");

            }
            if (row.getAttribute("consentType") != null) {
                cType = row.getAttribute("consentType").toString();
                //              System.out.println(consent_expire_date+"------333");

            }

            Integer esiId = Integer.parseInt(row.getAttribute("EsiId").toString());
            
            //            System.out.println("calling function----"+esiId);
//            Object stat1 = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.add_consent(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
//                                              seafarerId, first_name, last_name, nationality, dob, edoc_id,
//                                              esi_batch_id, consent_date, consent_expire_date, p_user_id, esiId, null
//            });
            if(cType.equalsIgnoreCase("offline"))
            {
                Object stat = callStoredFunction(Types.NUMERIC, "RMI_SICD_PUB.get_consent_id(?,?,?,?,?)", new Object[] {
                                                 "SICD_SEAFARERS", seafarerId, null,null,null
                });
                System.out.println(stat.toString()+"-----");
                
            Object stat1 = callStoredFunction(Types.VARCHAR, "rmi_seafarer.rmi_add_consent(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                              seafarerId, first_name, last_name, nationality, dob, edoc_id,
                                              esi_batch_id, consent_date, consent_expire_date, p_user_id, esiId, null,marketing,enitytype
            });
            }
            else if(cType.equalsIgnoreCase("Online"))
            {
                    Object stat1 = callStoredFunction(Types.VARCHAR, "rmi_seafarer.rmi_add_consent_online(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                      seafarerId, first_name, last_name, nationality, dob,
                                                      esi_batch_id, oStartDate, OEndDate, p_user_id, esiId, enitytype,ackno
                    });    
                }
        } catch (Exception e) {
            // TODO: Add catch code
            addFormattedFacesErrorMessage("System encountered an exception while adding consent." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }

    /**
     * Method to upload document.
     * @param filename name of the uploaded file.
     * @param seafarer seafarer id of the selected seafarer.
     * @param category_id category_id of the document.
     * call RMI_SICD_PUB.get_new_edoc_filename db function.
     * @return path and edoc id returned by the db function.
     */
    public String[] callProceduregetFileName(String filename, String seafarer, String categoryId) {
        //        System.out.println(filename+"-----"+seafarer+"-----"+categoryId);
        CallableStatement st = null;
        String[] ret = { null, null };

        try {
            String sql = "begin ?:=RMI_SICD_PUB.get_new_edoc_filename(?,?,?,?,?,?); end;";
            st = getDBTransaction().createCallableStatement(sql, this.getDBTransaction().DEFAULT);
            st.setObject(2, categoryId);
            st.setObject(3, seafarer);
            st.setObject(4, filename);
            st.setObject(5, "Y");
            st.registerOutParameter(1, Types.VARCHAR);
            st.registerOutParameter(6, Types.NUMERIC);
            st.registerOutParameter(7, Types.VARCHAR);
            st.execute();
            ret[0] = st.getObject(1).toString();
            ret[1] = st.getObject(6).toString();
            //           System.out.println(st.getObject(6) +"-------edoc");
            //               System.out.println(st.getObject(7)+"-----error");
            //           System.out.println(st.getObject(1));
            //        String str1 = st.getObject(6).toString();
            //         String str2 =  st.getObject(1).toString();
        } catch (SQLException e) {
            addFormattedFacesErrorMessage("System encountered an exception while uploading document." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                           e.printStackTrace();
        } finally {
            if (st != null) {
                try {

                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();

                }


            }
        }
        return ret;
    }

    /**
     * Container's getter for DocumentScanningVO1.
     * @return DocumentScanningVO1
     */
    public ViewObjectImpl getDocumentScanningView() {
        return (ViewObjectImpl) findViewObject("DocumentScanningView");
    }

    /**
     * Container's getter for CustomersLOV1.
     * @return CustomersLOV1
     */
    public ViewObjectImpl getCustomersView() {
        return (ViewObjectImpl) findViewObject("CustomersView");
    }

    /**
     * Container's getter for BatchSearchFormVO1.
     * @return BatchSearchFormVO1
     */
    public ViewObjectImpl getBatchSearchFormView() {
        return (ViewObjectImpl) findViewObject("BatchSearchFormView");
    }

    /**
     * Method to filter Batches views on the page load.
     * @param p_user_id User Id of the logged in user.
     */
    public void searchBatch(Integer user_id) {
        try {
            String user_type  = getUserType(user_id);
            System.out.println("----method starts---"+new Timestamp(System.currentTimeMillis()));
            ViewObject pendingBatchVO = getPendingBatchesView();
            pendingBatchVO.setNamedWhereClauseParam("pUserId", user_id);
            pendingBatchVO.executeQuery();
            System.out.println("----method step1---"+new Timestamp(System.currentTimeMillis()));

            if(user_type.equalsIgnoreCase("External"))
            {
            ViewObject submittedBatchVO = getSubmittedBatchesView();
            submittedBatchVO.setNamedWhereClauseParam("pUserId", user_id);
            submittedBatchVO.executeQuery();
            ViewObject rejectedBatchVO = getBatchesRejectedView();
            rejectedBatchVO.setNamedWhereClauseParam("pUserId", user_id);
            rejectedBatchVO.executeQuery();
            
            }
            if(user_type.equalsIgnoreCase("Internal"))
            {
                ViewObject rejectedBatchVO = getBatchesRejectedView();
                rejectedBatchVO.setNamedWhereClauseParam("pUserId", user_id);
                rejectedBatchVO.executeQuery();
            
            }
            onLoadAccountStatus(user_id);
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while searching batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }
        //                System.out.println("in the search batch-------");

        //        System.out.println(user_id+"--------user id");
        //        Integer customer = null;
        //        String status = null;
        //        String batchName = null;
        //        Date fromDate = null;
        //        Date toDate = null;
        //            ViewObject batchSearchVO = getBatchSearchFormVO();
        //            Row currentRow = batchSearchVO.getCurrentRow();
        //            if(currentRow.getAttribute("FromDate") != null)
        //            {
        //             fromDate = (Date)currentRow.getAttribute("FromDate");
        //            }
        //            if(currentRow.getAttribute("ToDate") != null)
        //            {
        //             toDate = (Date)currentRow.getAttribute("ToDate");
        //            }
        //            if(currentRow.getAttribute("Status") != null)
        //            {
        //             status = currentRow.getAttribute("Status").toString();
        //            }
        //            if(currentRow.getAttribute("BatchName") != null)
        //            {
        //             batchName = currentRow.getAttribute("BatchName").toString();
        //            }
        //            if(currentRow.getAttribute("Customer") != null)
        //            {
        //             customer = Integer.parseInt(currentRow.getAttribute("Customer").toString());
        //        }
        //           System.out.println(batchName+"----"+status+"----"+fromDate+"-----"+toDate+"----"+customer);
        //
        //                ViewObject batchesRVO = getBatchesRO();
        //                batchesRVO.setNamedWhereClauseParam("user_id", user_id);
        //                      batchesRVO.setNamedWhereClauseParam("batch_status", status);
        //                batchesRVO.setNamedWhereClauseParam("from_date", fromDate);
        //                batchesRVO.setNamedWhereClauseParam("to_date", toDate);
        //                batchesRVO.setNamedWhereClauseParam("batch_name", batchName);
        //                batchesRVO.setNamedWhereClauseParam("customer", customer);
        //                      batchesRVO.executeQuery();
        //                      System.out.println(batchesRVO.getRowCount()+"----------rowcount");
    }
    
    public void searchBatchInternal(Integer user_id) {
        try {
            ViewObject submittedBatchVO = getSubmittedBatchesView();
            submittedBatchVO.setNamedWhereClauseParam("pUserId", user_id);
            submittedBatchVO.executeQuery();
            ViewObject rejectedBatchVO = getBatchesRejectedView();
            rejectedBatchVO.setNamedWhereClauseParam("pUserId", user_id);
            rejectedBatchVO.executeQuery();
//            onLoadAccountStatus(user_id);
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while searching batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                e.printStackTrace();
        }
   
    }

    /**
     * Container's getter for BatchStatusWiseRO1.
     * @return BatchStatusWiseRO1
     */
    public ViewObjectImpl getBatchStatusWiseView() {
        return (ViewObjectImpl) findViewObject("BatchStatusWiseView");
    }

    /**
     * Container's getter for SubmittedBatchesStatusWiseRO1.
     * @return SubmittedBatchesStatusWiseRO1
     */
    public ViewObjectImpl getSubmittedBatchesStatusWiseRO() {
        return (ViewObjectImpl) findViewObject("SubmittedBatchesStatusWiseRO");
    }

    /**
     * Container's getter for taskAssignmentStaticRO1.
     * @return taskAssignmentStaticRO1
     */
    public ViewObjectImpl gettaskAssignmentStaticView() {
        return (ViewObjectImpl) findViewObject("taskAssignmentStaticView");
    }

    /**
     * Container's getter for taskAssignmentUserStaticRO1.
     * @return taskAssignmentUserStaticRO1
     */
    public ViewObjectImpl gettaskAssignmentUserStaticView() {
        return (ViewObjectImpl) findViewObject("taskAssignmentUserStaticView");
    }

    /**
     * Container's getter for WorkFlowSubmittedBatchesVO1.
     * @return WorkFlowSubmittedBatchesVO1
     */
    public ViewObjectImpl getWorkFlowSubmittedBatchesView() {
        return (ViewObjectImpl) findViewObject("WorkFlowSubmittedBatchesView");
    }

    /**
     * Method to filter data based on the region.
     * @param batch_id Batch Id of the selected batch.
     */
    public void assigntask(Integer batch_id) {
        try {
            String defaultProcessingId = batch_id.toString();
            ViewObject userVO = getWorkFlowAssignedToUsersView();
            userVO.setNamedWhereClauseParam("pRegionId", defaultProcessingId);
            userVO.executeQuery();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while filtering data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

        //             System.out.println(userVO.getRowCount()+"---------rowcount");

    }

    /**
     * Method to assign batch to user.
     * call assign_task_to_user db function .
     * @param p_user_id User Id of the logged in user.
     */
    public String assignTaskToUser(Integer user_id) {
        try {
            String batch_status = "Pending_TC";
            ViewObject tcVO = getBatchesPendingTcView();
            Row currentRow = tcVO.getCurrentRow();
            Integer batchId = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.ASSIGN_TASK_TO_USER(?,?)", new Object[] {
            //                                             batchId, user_id });
String res = validateBatchWorkFlowStatus(batchId, batch_status);
            if(res.equalsIgnoreCase("new"))
            {
            assignTaskToCurrentUser(batchId, user_id, batch_status);
            tcVO.executeQuery();
            
            }
            else
            {
                    tcVO.executeQuery();   
                
                }
            return res;
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while assigning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return "new";
    }
    
    /**
     * Method to check if batch is already assigned to some user before assigning.
     * @param batch_id currrent batch id
     * @param status on which batch is pending at
     * @return new if batch is not asssinged , repeat if already assigned
     */  
public String validateBatchWorkFlowStatus(Integer batch_id , String status)
{
  ViewObject wb = getGetWorkflowRowCountByBatchStatusView();
  wb.setNamedWhereClauseParam("pEsiBatchId", batch_id);
        wb.setNamedWhereClauseParam("pStatus", status);
        wb.executeQuery();
        if(wb.getRowCount() > 0)
        {
           return "repeat"; 
            }
        else
        {
          return "new";  
            }
    }

    /**
     * Method to assign batch to user.
     * call assign_task_to_user db function .
     * @param p_user_id User Id of the logged in user.
     */
    public void assignTaskReSubmitted(Integer user_id) {
        try {
            String batch_status = "Pending_TC";
            ViewObject tcVO = getBatchesPendingTcResubmittedView();
            Row currentRow = tcVO.getCurrentRow();
            Integer batchId = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.ASSIGN_TASK_TO_USER(?,?)", new Object[] {
            //                                             batchId, user_id });

            assignTaskToCurrentUser(batchId, user_id, batch_status);


            tcVO.executeQuery();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while assigning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
    }

    /**
     * Method to assign batch to user.
     * call assign_task_to_user db function .
     * @param p_user_id User Id of the logged in user.
     */
    public String assignTaskToUserExpedited(Integer user_id) {
        try {
            String batch_status = "Pending_TC";
            ViewObject tcVO = getBatchesPendingTcExpeditedProcessingView();
            Row currentRow = tcVO.getCurrentRow();
            Integer batchId = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.ASSIGN_TASK_TO_USER(?,?)", new Object[] {
            //                                             batchId, user_id });
            String res = validateBatchWorkFlowStatus(batchId, batch_status);
                        if(res.equalsIgnoreCase("new"))
                        {
                        assignTaskToCurrentUser(batchId, user_id, batch_status);
                        tcVO.executeQuery();
                        
                        }
                        else
                        {
                                tcVO.executeQuery();   
                            
                            }
                        return res;
            
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while assigning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return "new";
    }

    /**
     * Method to assign batch to user.
     * call assign_task_to_user db function .
     * @param p_user_id User Id of the logged in user.
     */
    public String assignTaskToUserCraRequested(Integer user_id) {
        try {
            String batch_status = "Pending_TC";
            ViewObject tcVO = getBatchesPendingTcCraView();
            Row currentRow = tcVO.getCurrentRow();
            Integer batchId = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.ASSIGN_TASK_TO_USER(?,?)", new Object[] {
            //                                             batchId, user_id });

            String res = validateBatchWorkFlowStatus(batchId, batch_status);
                        if(res.equalsIgnoreCase("new"))
                        {
                        assignTaskToCurrentUser(batchId, user_id, batch_status);
                        tcVO.executeQuery();
                        
                        }
                        else
                        {
                                tcVO.executeQuery();   
                            
                            }
                        return res;
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while assigning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return "new";
    }

    /**
     * Container's getter for WorkFlowAssignedToUsersLOV1.
     * @return WorkFlowAssignedToUsersLOV1
     */
    public ViewObjectImpl getWorkFlowAssignedToUsersView() {
        return (ViewObjectImpl) findViewObject("WorkFlowAssignedToUsersView");
    }

    /**
     * Method to refreh WorkFlowSubmittedBatchesView .
     */
    public void refresh_workflow() {
        try {
            ViewObject wfVo = getWorkFlowSubmittedBatchesView();
            wfVo.executeQuery();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while refreshing task data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }


    }

    /**
     * Method to filter MyTasksView based on the user and Role name.
     * @param p_user_id User Id of the logged in user.
     * @param Role_name of the user
     */
    public void onLoadMytask(Integer p_user_id, String Role_name) {
        //    System.out.println(Role_name+"-----role_name");
        try {
            String st = null;
            if (Role_name.equalsIgnoreCase("INTERNAL AGENT - II")) {
                st = "Pending_upload_document";
            }
            if (Role_name.equalsIgnoreCase("PROCESSOR - I")) {
                st = "Pending_TC";
            }
            if (Role_name.equalsIgnoreCase("EVALUATOR")) {
                st = "Pending_VAL";
            }
            if (Role_name.equalsIgnoreCase("QA PROCESSOR")) {
                st = "Pending_QA";
            }
            if (Role_name.equalsIgnoreCase("SHIPPING USER")) {
                st = "Pending_Shipping";
                preLoadMytaskShipping(p_user_id);
            }
            if (Role_name.equalsIgnoreCase("PROCESSOR - II")) {
                st = "Pending_ABN";
            }
            if (Role_name.equalsIgnoreCase("TRADE COMPLIANCE PROCESSOR")) {
                st = "Pending_MTC";
            }
            if (Role_name.equalsIgnoreCase("ASSIGN TRACKING NUMBER")) {
                st = "Closed";
            }
            //            System.out.println(st+"----st ");

            ViewObject myTaskVo = getMyTasksView();
            myTaskVo.setNamedWhereClauseParam("pUserId", p_user_id);
            myTaskVo.setNamedWhereClauseParam("pBatchStatus", st);
            myTaskVo.executeQuery();
            
            ViewObject myTaskLegalVo = getMyTasksLegalView();
            myTaskLegalVo.setNamedWhereClauseParam("pUserId", p_user_id);
            myTaskLegalVo.setNamedWhereClauseParam("pBatchStatus", st);
            myTaskLegalVo.executeQuery();
            
            ViewObject closedView = getBatchesClosedView();
            closedView.setNamedWhereClauseParam("pUserId", p_user_id);
            closedView.executeQuery();
            
            myTaskLegalVo.setWhereClause("COUNT_LEGAL > 0");
            myTaskLegalVo.executeQuery();
            
            //            System.out.println("-----onload----");
            ViewObject getFlagVO = getGetOperatorFlagView();
            getFlagVO.setNamedWhereClauseParam("pUserId", p_user_id);
            getFlagVO.executeQuery();
        } catch (Exception e) {
//            addFormattedFacesErrorMessage("System encountered an exception while loading page." +
//                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
    }


public void preLoadMytaskShipping(Integer userId)
{
       String st = "Pending_Shipping";
        ViewObject myTaskVo = getMyTasksView();
        myTaskVo.setNamedWhereClauseParam("pUserId", userId);
        myTaskVo.setNamedWhereClauseParam("pBatchStatus", st);
        myTaskVo.executeQuery();  
    
    RowSetIterator rit = myTaskVo.createRowSetIterator(null);
    while(rit.hasNext())
    {
       Row row =rit.next();
       Integer batchId = Integer.parseInt(row.getAttribute("EsiBatchId").toString()); 
        
        ViewObject ord = getOrderHeaderForShippingView();
        ord.setNamedWhereClauseParam("pBatchId", batchId);
        ord.executeQuery();
        if(ord.getRowCount() > 0)
        {
                ViewObject wfView = getWorkFlowView();
                            wfView.setNamedWhereClauseParam("pBatchId", batchId);
                            wfView.executeQuery();

                    //            System.out.println(wfView.getRowCount());

                            RowSetIterator createRowSetIterator = wfView.createRowSetIterator(null);

                            while (createRowSetIterator.hasNext()) {
                                Row wrow = createRowSetIterator.next();
                                wrow.setAttribute("LastUpdatedRow", "N");

                            }     
                            
                Row createRow = wfView.createRow();
                           createRow.setAttribute("EsiBatchId", batchId);
                           createRow.setAttribute("BatchStatus", "Closed");
                           createRow.setAttribute("AssignedTo", null);
                           createRow.setAttribute("LastUpdatedRow", "Y");
                           wfView.insertRow(createRow);

                ViewObject seafarerView = getSeafarerIfaceView();
                            seafarerView.setWhereClause("esi_batch_id = "+batchId);
                            seafarerView.executeQuery();
                            RowSetIterator sqcit = seafarerView.createRowSetIterator(null);
                            while(sqcit.hasNext())
                            {
                              Row srow = sqcit.next();
                                srow.setAttribute("SeafarerWfStatus", "Closed");
                                
                                }

                            this.getDBTransaction().commit();
            
            }
        }
    
    
    }


    /**
     * Method to return the assigned batch to the main queue.
     * call return_assigned_batch db function .
     */
    public void returnTaskToAdmin() {
        try {
            ViewObject mytaskVo = getMyTasksView();
            Row currentRow = mytaskVo.getCurrentRow();
            Integer batch_id = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.return_assigned_batch(?)", new Object[] {
            //                                             batch_id });

            returnBatchToQueue(batch_id);
            mytaskVo.executeQuery();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while returning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }
    
    /**
     * Method to return the assigned batch to the main queue.
     * call return_assigned_batch db function .
     */
    public void returnMasterTaskToAdmin() {
        try {
            ViewObject mytaskVo = getMyTaskMasterView();
            Row currentRow = mytaskVo.getCurrentRow();
            Integer batch_id = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            String wf_status = currentRow.getAttribute("WfStatus").toString();
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.return_assigned_batch(?)", new Object[] {
            //                                             batch_id });

            returnMasterBatchToQueue(batch_id,wf_status);
            mytaskVo.executeQuery();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while returning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }
    /**
     * Method to return the assigned batch to the main queue.
     */
    public void returnTaskToAdminLegal() {
        try {
            ViewObject mytaskVo = getMyTasksLegalView();
            Row currentRow = mytaskVo.getCurrentRow();
            Integer batch_id = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.return_assigned_batch(?)", new Object[] {
            //                                             batch_id });

            returnBatchToQueue(batch_id);
            mytaskVo.executeQuery();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while returning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }

    /**
     * Container's getter for MyTasksRO1.
     * @return MyTasksRO1
     */
    public ViewObjectImpl getMyTasksView() {
        return (ViewObjectImpl) findViewObject("MyTasksView");
    }

    /**
     * Container's getter for ViewOrdersRO1.
     * @return ViewOrdersRO1
     */
    public ViewObjectImpl getViewOrdersView() {
        return (ViewObjectImpl) findViewObject("ViewOrdersView");
    }

    /**
     * Method to filter WorkFlowSubmittedBatchesView based on the region.
     */

    public void filterTaskAssignment() {
        try {
            ViewObject regionVo = getViewOrdersView();
            Row currRow = regionVo.getCurrentRow();
            if (currRow.getAttribute("ViewOrders") != null) {
                Integer region = Integer.parseInt(currRow.getAttribute("ViewOrders").toString());
                //     System.out.println(region+"---------region");
                if (region != -1) {
                    //                 System.out.println("----in the if--");
                    ViewObject wfVO = getWorkFlowSubmittedBatchesView();
                    wfVO.setWhereClause("region_id = " + region);
                    wfVO.executeQuery();
                } else {
                    ViewObject wfVO = getWorkFlowSubmittedBatchesView();
                    wfVO.setWhereClause(null);
                    wfVO.executeQuery();

                }
            }

        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while searching data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }

    public void assignTaskToOperator() {

    }

    public void returnBatchToAgent() {

    }
    /**
     * Method to update issue type for each row in oc and sqc
     * calls RMI_SICD_PUB.update_issue_type db function.
     */
    public void updateIssueType() {
        try {
            ViewObject ocVo = getSeafarerDocsOcView();
            RowSetIterator createRowSetIterator = ocVo.createRowSetIterator(null);
            while (createRowSetIterator.hasNext()) {
                Row row = createRowSetIterator.next();
                Integer esdi_id = Integer.parseInt(row.getAttribute("EsdiId").toString());

                Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.update_issue_type(?)", new Object[] {
                                                 esdi_id });

            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while updating issue type." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }


    }

    /**
     * Method to filter WorkFlowSubmittedBatchesView based on the region.
     * @param user_id User Id of the logged in user.
     */
    public void submitBatchToAdmin(Integer user_id) {

        try {
            ViewObject batchVo = getBatchIfaceView();
            Row row = batchVo.getCurrentRow();
            Integer batchId = null;
            if (row.getAttribute("EsiBatchId") != null) {
                batchId = Integer.parseInt(row.getAttribute("EsiBatchId").toString());
            }
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.submit_batch(?,?)", new Object[] {
            //                                             batchId, user_id });

            submit_batch(batchId, user_id);
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while submitting batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }

    /**
     * Container's getter for GetMasterOperatorRO1.
     * @return GetMasterOperatorRO1
     */
    public ViewObjectImpl getGetMasterOperatorView() {
        return (ViewObjectImpl) findViewObject("GetMasterOperatorView");
    }

    /**
     * Container's getter for GetOperatorFlagVO1.
     * @return GetOperatorFlagVO1
     */
    public ViewObjectImpl getGetOperatorFlagView() {
        return (ViewObjectImpl) findViewObject("GetOperatorFlagView");
    }

    /**
     * Method to send email to agent when operator rejects the batch.
     * call send_mail method .
     */
    public void sendMailToAgent(String text) {
        try {
            ViewObject batchesVO = getMyTasksView();
            Row currentRow = batchesVO.getCurrentRow();
            //        System.out.println(currentRow+"----------currRow");
            //        System.out.println(currentRow.getAttribute("EsiBatchId")+"--------emailid");
            Integer batchId = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            ViewObject getmailVO = getGetAgentEmailIdFromBatchIdView();
            getmailVO.setNamedWhereClauseParam("pBatchId", batchId);
            getmailVO.executeQuery();
            currentRow = getmailVO.first();
            String mailID = currentRow.getAttribute("EmailId").toString();
            String subject = "Insufficient information.";
            sendmail(mailID, null, null, subject, text);
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while sending mail to agent." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }

    /**
     * Method to send email.
     * call sendmail_notif_proc db function .
     */
    public void sendmail(String to, String cc, String bcc, String subject, String body) {
        CallableStatement st = null;
        try {
            String sql = "BEGIN RMI_SICD_PUB.SENDMAIL_NOTIF_PROC(?,?,?,?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            st.setObject(1, "exch-03.iri.int"); //MAIL SERVER
            st.setObject(2, "no-reply@register-iri.com"); //SENDER
            st.setObject(3, to); //TO
            st.setObject(4, cc); //CC
            st.setObject(5, bcc); //BCC
            st.setObject(6, subject); //SUBJECT
            st.setObject(7, body); //BODY
            st.registerOutParameter(8, Types.VARCHAR); //OUT PARAM ERROR
            st.execute();
        } catch (SQLException e) {
            addFormattedFacesErrorMessage("System encountered an exception while sending mail." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();

        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                                  e.printStackTrace();
                }
            }
        }
    }

    /**
     * Container's getter for GetAgentEmailIdFromBatchIdRO1.
     * @return GetAgentEmailIdFromBatchIdRO1
     */
    public ViewObjectImpl getGetAgentEmailIdFromBatchIdView() {
        return (ViewObjectImpl) findViewObject("GetAgentEmailIdFromBatchIdView");
    }

    /**
     * Container's getter for GetEmailIdFromUserIdRO1.
     * @return GetEmailIdFromUserIdRO1
     */
    public ViewObjectImpl getGetEmailIdFromUserIdView() {
        return (ViewObjectImpl) findViewObject("GetEmailIdFromUserIdView");
    }

    public void acceptBatchByOperator() {

    }

    /**
     * Method to check wheather user has operator or not.
     * @param p_user_id User Id of the logged in user.
     */
    public String userHasOperator(Integer user_id) {
        String ret = "Yes";
        try {
            ViewObject masterOperatorVO = getGetMasterOperatorView();
            masterOperatorVO.setNamedWhereClauseParam("pUserId", user_id);
            masterOperatorVO.executeQuery();
            //            System.out.println(masterOperatorVO.getRowCount()+"---------rowcount");
            Row operatorRow = masterOperatorVO.first();
            //            System.out.println(operatorRow+"----------row");

            if (operatorRow.getAttribute("MasterOperator") == null) {

                ret = "No";

            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return ret;
    }

    /**
     * Container's getter for BatchesPendingTcRO1.
     * @return BatchesPendingTcRO1
     */
    public ViewObjectImpl getBatchesPendingTcView() {
        return (ViewObjectImpl) findViewObject("BatchesPendingTcView");
    }

    /**
     * Method to filter views on the trade compliance queue based on logged in user.
     * @param p_user_id User Id of the logged in user.
     */
    public void onLoadBatchPendingTC(Integer user_id) {
        //        System.out.println("------"+user_id+"-------111");
        try {
            ViewObject tcVo = getBatchesPendingTcView();
            ViewObject tc1VO = getBatchesPendingTcExpeditedProcessingView();
            ViewObject tc2VO = getBatchesPendingTcCraView();
            ViewObject tc3VO = getBatchesPendingTcPendingAckView();
            ViewObject tc4VO = getBatchesPendingTcResubmittedView();
            tcVo.setNamedWhereClauseParam("pUserId", user_id);
            tc1VO.setNamedWhereClauseParam("pUserId", user_id);
            tc2VO.setNamedWhereClauseParam("pUserId", user_id);
            tc3VO.setNamedWhereClauseParam("pUserId", user_id);
            tc4VO.setNamedWhereClauseParam("pUserId", user_id);
            tcVo.executeQuery();
            tc1VO.executeQuery();
            tc2VO.executeQuery();
            tc3VO.executeQuery();
            tc4VO.executeQuery();
        } catch (Exception e) {
//            addFormattedFacesErrorMessage("System encountered an exception while loading page." +
//                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }

    /**
     * Method to filter views on the manual trade compliance queue based on logged in user.
     * @param p_user_id User Id of the logged in user.
     */
    public void onLoadBatchPendingMTC(Integer user_id) {
        //        System.out.println("------"+user_id+"-------111");
        try {
            ViewObject mtcVo = getBatchesPendingMtcView();
            ViewObject rejVo = getBatchesMtcRejectedView();
            mtcVo.setNamedWhereClauseParam("pUserId", user_id);
            rejVo.setNamedWhereClauseParam("pUserId", user_id);
            mtcVo.executeQuery();
            rejVo.executeQuery();
            ViewObject mtclegalvo = getBatchesPendingMtcLegalView();
            mtclegalvo.setNamedWhereClauseParam("pUserId", user_id);
            mtclegalvo.executeQuery();
            mtclegalvo.setWhereClause("COUNT_LEGAL > 0");
            mtclegalvo.executeQuery();

        } catch (Exception e) {
//            addFormattedFacesErrorMessage("System encountered an exception while loading page." +
//                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }

    /**
     * Method to filter data on upload document queue based on logged in user.
     * @param p_user_id User Id of the logged in user.
     */
    public void onLoadBatchPendingUploadDocument(Integer user_id) {
        try {
            ViewObject docVo = getBatchesPendingUploadDocumentView();
            docVo.setNamedWhereClauseParam("pUserId", user_id);
            docVo.executeQuery();
        } catch (Exception e) {
//            addFormattedFacesErrorMessage("System encountered an exception while loading page." +
//                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }

    /**
     * Method to comlete trade compliance process and send batch to evaluation queue.
     * call process_tc db function .
     * @param batch_id batch id of the processed batch.
     */
    public void processTC(Integer batch_id) {

        //            try {
        //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.Process_TC(?)", new Object[] { batch_id });
        //            ViewObject mytask = getMyTasksView();
        //            mytask.executeQuery();
        //        } catch (Exception e) {
        //            addFormattedFacesErrorMessage("System encountered an exception while processing batch." +
        //            " Please contact your System Administrator." ,
        //            "", FacesMessage.SEVERITY_ERROR);
        //            e.printStackTrace();
        //        }
    }

    /**
     * Method to filter data on the evaluation queue based on the logged in user.
     * @param p_user_id User Id of the logged in user.
     */
    public void onLoadBatchPendingEVAL(Integer user_id) {
        //        System.out.println("------"+user_id+"-------111");
        try {
            ViewObject evalVo = getBatchesPendingEvalView();
            ViewObject craVo = getBatchesPendingEvalCraView();
            ViewObject rejVo = getBatchesEvalRejectedView();
            craVo.setNamedWhereClauseParam("pUserId", user_id);
            evalVo.setNamedWhereClauseParam("pUserId", user_id);
            rejVo.setNamedWhereClauseParam("pUserId", user_id);
            evalVo.executeQuery();
            craVo.executeQuery();
            rejVo.executeQuery();
        } catch (Exception e) {
//            addFormattedFacesErrorMessage("System encountered an exception while loading page." +
//                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
    }

    /**
     * Container's getter for BatchesPendingEvalRO1.
     * @return BatchesPendingEvalRO1
     */
    public ViewObjectImpl getBatchesPendingEvalView() {
        return (ViewObjectImpl) findViewObject("BatchesPendingEvalView");
    }

    /**
     * Method to assign batch to logged in user.
     * call assign_task_to_user db function .
     * @param p_user_id User Id of the logged in user.
     */
    public String assignTaskToUserEval(Integer user_id) {
        try {

            String batch_status = "Pending_VAL";
            ViewObject valVO = getBatchesPendingEvalView();
            Row currentRow = valVO.getCurrentRow();
            Integer batchId = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.ASSIGN_TASK_TO_USER(?,?)", new Object[] {
            //                                             batchId, user_id });

            String res = validateBatchWorkFlowStatus(batchId, batch_status);
                        if(res.equalsIgnoreCase("new"))
                        {
                        assignTaskToCurrentUser(batchId, user_id, batch_status);
                            valVO.executeQuery();                        
                        }
                        else
                        {
                                valVO.executeQuery();                            
                            }
                        return res;
           
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while assigning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return "new";
    }

    /**
     * Method to assign batch to logged in user.
     * call assign_task_to_user db function .
     * @param p_user_id User Id of the logged in user.
     */
    public String assignTaskToUserEvalCra(Integer user_id) {
        try {
            String batch_status = "Pending_VAL";
            ViewObject valVO = getBatchesPendingEvalCraView();
            Row currentRow = valVO.getCurrentRow();
            Integer batchId = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.ASSIGN_TASK_TO_USER(?,?)", new Object[] {
            //                                             batchId, user_id });

            String res = validateBatchWorkFlowStatus(batchId, batch_status);
                        if(res.equalsIgnoreCase("new"))
                        {
                        assignTaskToCurrentUser(batchId, user_id, batch_status);
                            valVO.executeQuery();                        
                        }
                        else
                        {
                                valVO.executeQuery();                            
                            }
                        return res;
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while assigning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return "new";
    }
    
    public String assignTaskToUserClosed(Integer user_id) {
        try {
            String batch_status = "Closed";
            ViewObject valVO = getBatchesPendingtrackingNumberView();
            Row currentRow = valVO.getCurrentRow();
            Integer batchId = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.ASSIGN_TASK_TO_USER(?,?)", new Object[] {
            //                                             batchId, user_id });

            String res = validateBatchWorkFlowStatus(batchId, batch_status);
                        if(res.equalsIgnoreCase("new"))
                        {
                        assignTaskToCurrentUser(batchId, user_id, batch_status);
                            valVO.executeQuery();                        
                        }
                        else
                        {
                                valVO.executeQuery();                            
                            }
                        return res;
        } catch (Exception e) {
//            addFormattedFacesErrorMessage("System encountered an exception while assigning batch." +
//                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return "new";
    }

    /**
     * Method to assign batch to logged in user.
     * call assign_task_to_user db function .
     * @param p_user_id User Id of the logged in user.
     */
    public String assignTaskToUserEvalRejected(Integer user_id) {
        try {
            String batch_status = "Pending_VAL";
            ViewObject valVO = getBatchesEvalRejectedView();
            Row currentRow = valVO.getCurrentRow();
            Integer batchId = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.ASSIGN_TASK_TO_USER(?,?)", new Object[] {
            //                                             batchId, user_id });

            String res = validateBatchWorkFlowStatus(batchId, batch_status);
                        if(res.equalsIgnoreCase("new"))
                        {
                        assignTaskToCurrentUser(batchId, user_id, batch_status);
                            valVO.executeQuery();                        
                        }
                        else
                        {
                                valVO.executeQuery();                            
                            }
                        return res;
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while assigning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return "new";
    }

    /**
     * Method to assign batch to logged in user.
     * call assign_task_to_user db function .
     * @param p_user_id User Id of the logged in user.
     */
    public String assignTaskToUserMTCRejected(Integer user_id) {
        try {
            String batch_status = "Pending_MTC";
            ViewObject valVO = getBatchesMtcRejectedView();
            Row currentRow = valVO.getCurrentRow();
            Integer batchId = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.ASSIGN_TASK_TO_USER(?,?)", new Object[] {
            //                                             batchId, user_id });

            String res = validateBatchWorkFlowStatus(batchId, batch_status);
                        if(res.equalsIgnoreCase("new"))
                        {
                        assignTaskToCurrentUser(batchId, user_id, batch_status);
                        valVO.executeQuery();
                        
                        }
                        else
                        {
                                valVO.executeQuery();   
                            
                            }
                        return res;
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while assigning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return "new";
    }
    
    /**
     * Method to assign batch to logged in user.
     * @param p_user_id User Id of the logged in user.
     */
    public String assignTaskToUserMTCLegal(Integer user_id) {
        try {
            String batch_status = "Pending_MTC";
            ViewObject valVO = getBatchesPendingMtcLegalView();
            Row currentRow = valVO.getCurrentRow();
            Integer batchId = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.ASSIGN_TASK_TO_USER(?,?)", new Object[] {
            //                                             batchId, user_id });

            String res = validateBatchWorkFlowStatus(batchId, batch_status);
                        if(res.equalsIgnoreCase("new"))
                        {
                        assignTaskToCurrentUser(batchId, user_id, batch_status);
                        valVO.executeQuery();
                        
                        }
                        else
                        {
                                valVO.executeQuery();   
                            
                            }
                        return res;
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while assigning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return "new";
    }

    /**
     * Method to comlete evaluation process and send batch to evaluation queue.
     * call process_eval db function .
     * @param batch_id batch id of the processed batch.
     */
    public void processEVAL(Integer batch_id) {

        //        try {
        //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.Process_EVAL(?)", new Object[] { batch_id });
        //            ViewObject mytask = getMyTasksView();
        //            mytask.executeQuery();
        //        } catch (Exception e) {
        //            addFormattedFacesErrorMessage("System encountered an exception while processing batch." +
        //            " Please contact your System Administrator." ,
        //            "", FacesMessage.SEVERITY_ERROR);
        //            e.printStackTrace();
        //        }
    }

    /**
     * Container's getter for BatchesPendingQaRO1.
     * @return BatchesPendingQaRO1
     */
    public ViewObjectImpl getBatchesPendingQaView() {
        return (ViewObjectImpl) findViewObject("BatchesPendingQaView");
    }

    /**
     * Method to assign batch to logged in user.
     * call assign_task_to_user db function .
     * @param user_id user id of the logged in user.
     */
    public String assignTaskToUserQA(Integer user_id) {
        try {
            String batch_status = "Pending_QA";
            ViewObject qaVO = getBatchesPendingQaView();
            Row currentRow = qaVO.getCurrentRow();
            Integer batchId = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.ASSIGN_TASK_TO_USER(?,?)", new Object[] {
            //                                             batchId, user_id });

            String res = validateBatchWorkFlowStatus(batchId, batch_status);
                        if(res.equalsIgnoreCase("new"))
                        {
                        assignTaskToCurrentUser(batchId, user_id, batch_status);
                        qaVO.executeQuery();
                        
                        }
                        else
                        {
                                qaVO.executeQuery();   
                            
                            }
                        return res;
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while assigning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return "new";
    }


    /**
     * Method to assign batch to logged in user.
     * call assign_task_to_user db function .
     * @param user_id user id of the logged in user.
     */
    public String assignTaskToUserMTC(Integer user_id) {
        try {
            String batch_status = "Pending_MTC";
            ViewObject mtcVO = getBatchesPendingMtcView();
            Row currentRow = mtcVO.getCurrentRow();
            Integer batchId = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.ASSIGN_TASK_TO_USER(?,?)", new Object[] {
            //                                             batchId, user_id });

            String res = validateBatchWorkFlowStatus(batchId, batch_status);
                        if(res.equalsIgnoreCase("new"))
                        {
                        assignTaskToCurrentUser(batchId, user_id, batch_status);
                        mtcVO.executeQuery();
                        
                        }
                        else
                        {
                                mtcVO.executeQuery();   
                            
                            }
                        return res;
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while assigning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return "new";
    }

    /**
     * Method to assign batch to logged in user.
     * call assign_task_to_user db function .
     * @param user_id user id of the logged in user.
     */
    public String assignTaskToUserABN(Integer user_id) {
        try {
            String batch_status = "Pending_ABN";
            ViewObject abnVO = getBatchesPendingAsbView();
            Row currentRow = abnVO.getCurrentRow();
            Integer batchId = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.ASSIGN_TASK_TO_USER(?,?)", new Object[] {
            //                                             batchId, user_id });

            String res = validateBatchWorkFlowStatus(batchId, batch_status);
                        if(res.equalsIgnoreCase("new"))
                        {
                        assignTaskToCurrentUser(batchId, user_id, batch_status);
                        abnVO.executeQuery();
                        
                        }
                        else
                        {
                                abnVO.executeQuery();   
                            
                            }
                        return res;
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while assigning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return "new";
    }

    /**
     * Method to filter data qa queue based on the logged in user.
     * @param user_id user id of the logged in user.
     */
    public void onLoadBatchPendingQA(Integer user_id) {
        //        System.out.println("------"+user_id+"-------111");
        try {
            ViewObject qaVo = getBatchesPendingQaView();
            qaVo.setNamedWhereClauseParam("pUserId", user_id);
            qaVo.executeQuery();
            
            ViewObject qaresVo = getBatchesQaResubmittedView();
            qaresVo.setNamedWhereClauseParam("pUserId", user_id);
            qaresVo.executeQuery();
        } catch (Exception e) {
//            addFormattedFacesErrorMessage("System encountered an exception while loading page." +
//                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
    }

    /**
     * Method to filter data assign book number queue based on the logged in user.
     * @param user_id user id of the logged in user.
     */
    public void onLoadBatchPendingAbn(Integer user_id) {
//                System.out.println("------"+user_id+"-------111");
        try {
            ViewObject abnVo = getBatchesPendingAsbView();
            abnVo.setNamedWhereClauseParam("pUserId", user_id);
            abnVo.executeQuery();
            
//            System.out.println(abnVo.getRowCount()+"-----");
        } catch (Exception e) {
//            addFormattedFacesErrorMessage("System encountered an exception while loading page." +
//                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
    }

    /**
     * Method to compelete qa process and send batch to shipping queue.
     * call process_qa db function .
     * @param batch_id batch id of the processed batch.
     */
    public void processQA(Integer batch_id) {

        //        try {
        //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.Process_QA(?)", new Object[] { batch_id });
        //            ViewObject mytask = getMyTasksView();
        //            mytask.executeQuery();
        //        } catch (Exception e) {
        //            addFormattedFacesErrorMessage("System encountered an exception while processing batch." +
        //            " Please contact your System Administrator." ,
        //            "", FacesMessage.SEVERITY_ERROR);
        //            e.printStackTrace();
        //        }
    }

    /**
     * Container's getter for BatchesPendingShippingRO1.
     * @return BatchesPendingShippingRO1
     */
    public ViewObjectImpl getBatchesPendingShippingView() {
        return (ViewObjectImpl) findViewObject("BatchesPendingShippingView");
    }


    /**
     * Method to filter data on the shipping queue based on the logged in user.
     * @param user_id user id of the logged in user.
     */
    public void onLoadBatchPendingShipping(Integer user_id) {
        //        System.out.println("------"+user_id+"-------111");
        try {
            ViewObject shippingVo = getBatchesPendingShippingView();
            shippingVo.setNamedWhereClauseParam("pUserId", user_id);
            shippingVo.executeQuery();
        } catch (Exception e) {
//            addFormattedFacesErrorMessage("System encountered an exception while loading page." +
//                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
    }


    /**
     * Method to assign batch to logged in user.
     * call assign_task_to_user db function .
     * @param user_id user id of the logged in user.
     */
    public String assignTaskToUserShipping(Integer user_id) {
        try {
            String batch_status = "Pending_Shipping";
            ViewObject shippingVO = getBatchesPendingShippingView();
            Row currentRow = shippingVO.getCurrentRow();
            Integer batchId = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.ASSIGN_TASK_TO_USER(?,?)", new Object[] {
            //                                             batchId, user_id });

            String res = validateBatchWorkFlowStatus(batchId, batch_status);
                        if(res.equalsIgnoreCase("new"))
                        {
                        assignTaskToCurrentUser(batchId, user_id, batch_status);
                        shippingVO.executeQuery();
                        
                        }
                        else
                        {
                                shippingVO.executeQuery();   
                            
                            }
                        return res;
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while assigning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return "new";
    }


    /**
     * Method to complete shipping process .
     * call process_shipping db function .
     * @param batch_id batch id of the processed batch.
     */
    public void processShipping(Integer batch_id) {

        //        try {
        //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.Process_Shipping(?)", new Object[] { batch_id });
        //            ViewObject mytask = getMyTasksView();
        //            mytask.executeQuery();
        //        } catch (Exception e) {
        //            addFormattedFacesErrorMessage("System encountered an exception while procesing batch." +
        //            " Please contact your System Administrator." ,
        //            "", FacesMessage.SEVERITY_ERROR);
        //            e.printStackTrace();
        //        }
    }

    /**
     * Container's getter for GetBatchInfoRO1.
     * @return GetBatchInfoRO1
     */
    public ViewObjectImpl getGetBatchInfoView() {
        return (ViewObjectImpl) findViewObject("GetBatchInfoView");
    }

    /**
     * Method to filter data on tc page load.
     */
    public void onLoadTC(Integer batch_id) {
        try {
            ViewObject btVO = getGetBatchInfoView();
            btVO.setNamedWhereClauseParam("pBatchId", batch_id);
            btVO.executeQuery();
        } catch (Exception e) {
//            addFormattedFacesErrorMessage("System encountered an exception while loading page." +
//                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
    }
    
    public void addCraForExternalBatch()
    {
            ViewObject batVO = getBatchIfaceView();
            Row currentRow = batVO.getCurrentRow();
            Integer batchId = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            Integer user_id = Integer.parseInt(currentRow.getAttribute("CreatedBy").toString());
            Integer orderingAgent =  Integer.parseInt(currentRow.getAttribute("DeliverToCustAccountId").toString());
        String email = null;
        ViewObject craEmail = getGetCraEmailAddressForExternalView();
        craEmail.setNamedWhereClauseParam("pCustomer", orderingAgent);
            craEmail.setNamedWhereClauseParam("pUserId", user_id);
            craEmail.executeQuery();
         if(craEmail.getRowCount() > 0)
         {
             Row row = craEmail.first();
         email = row.getAttribute("EmailAddress").toString(); 
         update_email_id(email);
             
        }
         else
         {
                 ViewObject getmailVO = getGetEmailIdFromUserIdView();
                 getmailVO.setNamedWhereClauseParam("pUserId", user_id);
                 getmailVO.executeQuery();

                 Row frow = getmailVO.first();
                 email = frow.getAttribute("EmailId").toString(); 
                 update_email_id(email);
             }
         this.getDBTransaction().commit();
         
        
        }

    /**
     * Method to create order on the batch submission.
     * call iri_sicd_online_adf.create_order db function .
     */
    public String createOrder(Integer p_user_id) {
        //          String user = ADFContext.getCurrent().getSessionScope().get("param_user_id").toString();
        //        System.out.println("-----create order----");
        ViewObject batVO = getBatchIfaceView();
        Row currentRow = batVO.getCurrentRow();
        Integer batchId = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
        Integer user_id = Integer.parseInt(currentRow.getAttribute("CreatedBy").toString());
        CallableStatement st = null;
        Integer header_id = null;
//        System.out.println("-----" + batchId + "---");
        try {
            //          System.out.println("-------calling pocedure----");
            String sql = "BEGIN RMI_SICD_PUB.create_order(?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            st.setObject(1, batchId);
            st.setObject(2, p_user_id);
            //MAIL SERVER
            st.registerOutParameter(3, Types.NUMERIC); //OUT PARAM ERROR
            st.registerOutParameter(4, Types.VARCHAR);
            st.registerOutParameter(5, Types.NUMERIC);
            //            header_id = Integer.parseInt(st.getObject(4).toString());
            st.execute();
//            System.out.println(st.getString(3) + "--------2");
           
            String msg = st.getString(4);
//            System.out.println(msg+"--------3");
//            System.out.println(st.getString(5) + "-----------headerid");
            
            if(st.getString(5) != null)
                header_id = Integer.parseInt(st.getString(5));
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.add_workorder(?,?)", new Object[] {header_id,batchId});
            currentRow.setAttribute("OeHeaderId", header_id);
            this.getDBTransaction().commit();
            if (st.getString(3).equalsIgnoreCase("0")) {
                submitBatchToAdmin(p_user_id);

                String agent_email_id = null;
                if (currentRow.getAttribute("tranEmailOrdering") != null) {
                    agent_email_id = currentRow.getAttribute("tranEmailOrdering").toString();

                }
                String user_type = getUserType(user_id);
//                System.out.println(user_type + "----usertype");
                String emailId = null;
//                if (user_type.equalsIgnoreCase("external")) {
//                    ViewObject getmailVO = getGetEmailIdFromUserIdView();
//                    getmailVO.setNamedWhereClauseParam("pUserId", user_id);
//                    getmailVO.executeQuery();
//
//                    Row frow = getmailVO.first();
//                    emailId = frow.getAttribute("EmailId").toString();
//                } else {
                    emailId = agent_email_id;
//                }
//                System.out.println(emailId + "-------emailID");
                Object stat = callStoredFunction(Types.INTEGER, "RMI_SICD_PUB.FND_REQUEST_CRA(?,?,?)", new Object[] {
                                                 batchId,p_user_id, emailId
                });
                this.getTransaction().commit();
                batVO.executeQuery();
                batVO.setWhereClause("esi_batch_id =" + batchId);
                batVO.executeQuery();
                return "success";
            } else {
//                System.out.println(msg+"--------3");
                return msg;
            }


        } catch (SQLException e) {
            addFormattedFacesErrorMessage("System encountered an exception while creating order." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();

        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                                  e.printStackTrace();
                }
            }
        }
        ViewObject workOrderVO = getWorkOrderDetailsView();
        workOrderVO.executeQuery();
        return null;
    }

    /**
     * Container's getter for WorkOrderDetailsRO1.
     * @return WorkOrderDetailsRO1
     */
    public ViewObjectImpl getWorkOrderDetailsView() {
        return (ViewObjectImpl) findViewObject("WorkOrderDetailsView");
    }

    /**
     * Container's getter for BatchWorkOrderLK1.
     * @return BatchWorkOrderLK1
     */
    public ViewLinkImpl getBatchWorkOrderLK1() {
        return (ViewLinkImpl) findViewLink("BatchWorkOrderLK1");
    }

    /**
     * Container's getter for GetDocumentLinkRO1.
     * @return GetDocumentLinkRO1
     */
    public ViewObjectImpl getGetDocumentLinkView() {
        return (ViewObjectImpl) findViewObject("GetDocumentLinkView");
    }


    /**
     * Method to get link of the documents based on the edoc id.
     */
    public String getlink(String code) {
        ViewObject seafarer = getSeafarerIfaceView();
        Row currRow = seafarer.getCurrentRow();
        String edocId = null;
        String ret = null;
        //        System.out.println(currRow +"------currRow");
        try {
            if (code.equalsIgnoreCase("0025")) {
                if (currRow.getAttribute("ConsentEdocId") != null) {
                    edocId = currRow.getAttribute("ConsentEdocId").toString();
                }
            }

            if (code.equalsIgnoreCase("0002")) {
                if (currRow.getAttribute("PhotoEdocId") != null) {
                    edocId = currRow.getAttribute("PhotoEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0003")) {
                if (currRow.getAttribute("IdentityDocEdocId") != null) {
                    edocId = currRow.getAttribute("IdentityDocEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0004")) {
                //                System.out.println("---------in medical");
                //                    System.out.println(currRow.getAttribute("PhysicalEdocId")+"------physical");
                //                    System.out.println(currRow.getAttribute("PhysicalEdocId").toString()+"----edoc");
                if (currRow.getAttribute("PhysicalEdocId") != null) {
                    edocId = currRow.getAttribute("PhysicalEdocId").toString();

                    //                System.out.println(edocId+"-------edocid");
                }
            }
            if (code.equalsIgnoreCase("0008")) {
                if (currRow.getAttribute("SeaserviceTranscriptEdocId") != null) {
                    edocId = currRow.getAttribute("SeaserviceTranscriptEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0001")) {
                if (currRow.getAttribute("ApplicationEdocId") != null) {
                    edocId = currRow.getAttribute("ApplicationEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0009")) {
                if (currRow.getAttribute("AffidavitEdocId") != null) {
                    edocId = currRow.getAttribute("AffidavitEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0016")) {
                if (currRow.getAttribute("SatEdocId") != null) {
                    edocId = currRow.getAttribute("SatEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0031")) {
                if (currRow.getAttribute("InternalEdocId") != null) {
                    edocId = currRow.getAttribute("InternalEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0033")) {
                if (currRow.getAttribute("AdditionalDocEdocId") != null) {
                    edocId = currRow.getAttribute("AdditionalDocEdocId").toString();
                }
            }
            //            System.out.println(edocId+"-------edocId");
//            ViewObject linkVO = getGetDocumentLinkView();
//            linkVO.setNamedWhereClauseParam("pEdocId", edocId);
//            linkVO.executeQuery();
            //      System.out.println(linkVO.getRowCount()+"--------rowcount");
//            if (linkVO.getRowCount() > 0) {
//                Row row = linkVO.first();
//                ret = row.getAttribute("DocPath").toString();
//            }
             ret = edocId;
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
            ret = null;
        }
        return ret;
    }
    /**
     * Method to refresh seafarerIfaceView.
     */
    public void cancelSeafarer() {
        ViewObject seaVO = getSeafarerIfaceView();
   
        try {
            seaVO.executeQuery();
        } catch (Exception e) {
            e.printStackTrace();

        }
    }
    
    /**
     * Method to return the count of the seafareres in the current batch.
     */
    public String checkSeafarerValidate() {
        try {
            ViewObject seaVO = getSeafarerIfaceView();
            if (seaVO.getRowCount() > 0) {
                return "true";
            } else {
                return "false";
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }
        return "false";
    }

    /**
     * Container's getter for PendingBatchesRO1.
     * @return PendingBatchesRO1
     */
    public ViewObjectImpl getPendingBatchesView() {
        return (ViewObjectImpl) findViewObject("PendingBatchesView");
    }

    /**
     * Container's getter for SubmittedBatchesRO1.
     * @return SubmittedBatchesRO1
     */
    public ViewObjectImpl getSubmittedBatchesView() {
        return (ViewObjectImpl) findViewObject("SubmittedBatchesView");
    }
    /**
     * Method to set the BatchStatus to pending on save action.
     */
    public void saveBatch() {
        try {
            ViewObject batVO = getBatchIfaceView();
            batVO.getCurrentRow().setAttribute("BatchStatus", "Pending");
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while saving data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }

    }

    /**
     * Container's getter for SeafarersDetailsRO1.
     * @return SeafarersDetailsRO1
     */
    public ViewObjectImpl getSeafarersDetailsView() {
        return (ViewObjectImpl) findViewObject("SeafarersDetailsView");
    }

    /**
     * Container's getter for SubmittedBatchesSeafarerDetailsLK1.
     * @return SubmittedBatchesSeafarerDetailsLK1
     */
    public ViewLinkImpl getSubmittedBatchesSeafarerDetailsLK1() {
        return (ViewLinkImpl) findViewLink("SubmittedBatchesSeafarerDetailsLK1");
    }

    /**
     * Method to find user type .
     */
    public String getUsertypeForBatchesPage() {
        String user_type = null;
        try {
            ViewObject seafarer = getSubmittedBatchesView();
            Row currRow = seafarer.getCurrentRow();
            Integer user_id = Integer.parseInt(currRow.getAttribute("CreatedBy").toString());
            ViewObject userDetailsRo = getUserDetailsView();
            userDetailsRo.setNamedWhereClauseParam("pUserId", user_id);
            userDetailsRo.executeQuery();
            if (userDetailsRo.getRowCount() > 0) {
                Row row = userDetailsRo.first();
                String ut = row.getAttribute("UserType").toString();
                user_type = ut;
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        //            System.out.println("usertype--"+user_type);
        return user_type;
    }
    
    public String getUsertypeForBatchesAccountPage() {
        String user_type = null;
        try {
            ViewObject seafarer = getSubmittedBatchesForAccountStatusView();
            Row currRow = seafarer.getCurrentRow();
            Integer user_id = Integer.parseInt(currRow.getAttribute("CreatedBy").toString());
            ViewObject userDetailsRo = getUserDetailsView();
            userDetailsRo.setNamedWhereClauseParam("pUserId", user_id);
            userDetailsRo.executeQuery();
            if (userDetailsRo.getRowCount() > 0) {
                Row row = userDetailsRo.first();
                String ut = row.getAttribute("UserType").toString();
                user_type = ut;
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        //            System.out.println("usertype--"+user_type);
        return user_type;
    }

    /**
     * Method to find user type .
     */
    public String getUsertypeForTaskAssignmentPage() {
        String user_type = null;
        try {
            ViewObject seafarer = getWorkFlowSubmittedBatchesView();
            Row currRow = seafarer.getCurrentRow();
            Integer user_id = Integer.parseInt(currRow.getAttribute("CreatedBy").toString());
            ViewObject userDetailsRo = getUserDetailsView();
            userDetailsRo.setNamedWhereClauseParam("pUserId", user_id);
            userDetailsRo.executeQuery();
            if (userDetailsRo.getRowCount() > 0) {
                Row row = userDetailsRo.first();
                String ut = row.getAttribute("UserType").toString();
                user_type = ut;
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return user_type;
    }

    /**
     * Method to get link of the documents based on the edoc id.
     */

    public String getlinkforBatchespage(String code) {
        ViewObject seafarer = getSeafarersDetailsView();
        Row currRow = seafarer.getCurrentRow();
        String edocId = null;
        String ret = null;
                System.out.println(code +"------currRow");
        try {
            if (code.equalsIgnoreCase("0002")) {
                if (currRow.getAttribute("PhotoEdocId") != null) {
                    edocId = currRow.getAttribute("PhotoEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0033")) {
                if (currRow.getAttribute("AdditionalDocEdocId") != null) {
                    edocId = currRow.getAttribute("AdditionalDocEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0003")) {
                if (currRow.getAttribute("IdentityDocEdocId") != null) {
                    edocId = currRow.getAttribute("IdentityDocEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0004")) {
                //                System.out.println("---------in medical");
                //                    System.out.println(currRow.getAttribute("PhysicalEdocId")+"------physical");
                //                    System.out.println(currRow.getAttribute("PhysicalEdocId").toString()+"----edoc");
                if (currRow.getAttribute("PhysicalEdocId") != null) {
                    edocId = currRow.getAttribute("PhysicalEdocId").toString();

                    //                System.out.println(edocId+"-------edocid");
                }
            }
            if (code.equalsIgnoreCase("0008")) {
                if (currRow.getAttribute("SeaserviceTranscriptEdocId") != null) {
                    edocId = currRow.getAttribute("SeaserviceTranscriptEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0001")) {
                if (currRow.getAttribute("ApplicationEdocId") != null) {
                    edocId = currRow.getAttribute("ApplicationEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0009")) {
                if (currRow.getAttribute("AffidavitEdocId") != null) {
                    edocId = currRow.getAttribute("AffidavitEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0016")) {
                if (currRow.getAttribute("SatEdocId") != null) {
                    edocId = currRow.getAttribute("SatEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0031")) {
                if (currRow.getAttribute("InternalEdocId") != null) {
                    edocId = currRow.getAttribute("InternalEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0025")) {
                if (currRow.getAttribute("ConsentEdocId") == null) {
                    copyConsentValuesforBatches();

                }
                if (currRow.getAttribute("ConsentEdocId") != null) {
                    edocId = currRow.getAttribute("ConsentEdocId").toString();
                }
            }
            //            System.out.println(edocId+"-------edocId");
//            ViewObject linkVO = getGetDocumentLinkView();
//            linkVO.setNamedWhereClauseParam("pEdocId", edocId);
//            linkVO.executeQuery();
//            //      System.out.println(linkVO.getRowCount()+"--------rowcount");
//            if (linkVO.getRowCount() > 0) {
//                Row row = linkVO.first();
//                ret = row.getAttribute("DocPath").toString();
//            }
   ret = edocId;
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
            ret = null;
        }
        return ret;
    }


    /**
     * Method to fetch consent details of the seafarer.
     */
    public void copyConsentValuesforBatches() {
        try {
            ViewObject seafarer = getSeafarersDetailsView();
            Row currRow = seafarer.getCurrentRow();
            String firstname = "";
            String lastname = "";
            Date birthDate = null;
            String nationality = "";
            Integer seafarer_id = null;
            if (currRow.getAttribute("FirstName") != null) {
                firstname = currRow.getAttribute("FirstName").toString();
            }
            if (currRow.getAttribute("LastName") != null) {
                lastname = currRow.getAttribute("LastName").toString();
            }
            if (currRow.getAttribute("BirthDate") != null) {
                birthDate = (Date) currRow.getAttribute("BirthDate");
            }
            if (currRow.getAttribute("ResidenceCountry") != null) {
                nationality = currRow.getAttribute("ResidenceCountry").toString();
            }
            if (currRow.getAttribute("SeafarerId") != null) {
                seafarer_id = Integer.parseInt(currRow.getAttribute("SeafarerId").toString());
            }
            String finalName = firstname.concat(" ").concat(lastname);
            //                    System.out.println("FinalName:- "+finalName);
            //                System.out.println(birthDate);
            //                System.out.println(nationality);
//            Object stat = callStoredFunction(Types.VARCHAR, "rmi_seaf_consent_id(?,?,?)", new Object[] {
//                                             finalName, nationality, birthDate
//            });
            Object stat = callStoredFunction(Types.NUMERIC, "RMI_SICD_PUB.get_consent_id(?,?,?,?,?)", new Object[] {
                                             "SICD_SEAFARERS", seafarer_id, null,null,null
            });
            //                    System.out.println(stat+"----");
            Integer res = Integer.parseInt(stat.toString());
            if (res != 0) {
                //                    System.out.println("111111----");
                ViewObject consentVo = getConsentDetailsView();
                consentVo.setNamedWhereClauseParam("pConsentId", res);
                consentVo.executeQuery();

                if (consentVo.getRowCount() > 0) {
                    Row row = consentVo.first();

                    String confirmNo = row.getAttribute("ConfirmationNumber").toString();
                    Date date1 = (Date) row.getAttribute("ConsentDate");
                    Date date2 = (Date) row.getAttribute("ConsentExpireDate");
                    currRow.setAttribute("tranConsentAckNo", confirmNo);
                    currRow.setAttribute("trnConsentStartDate", date1);
                    currRow.setAttribute("tranConsentExpDate", date2);
                }
            } else {
                currRow.setAttribute("tranConsentAckNo", null);
                currRow.setAttribute("trnConsentStartDate", null);
                currRow.setAttribute("tranConsentExpDate", null);
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching consent data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }
    }

    /**
     * Method to get link of the documents based on the edoc id.
     */
    public String getlinkforOC() {
        ViewObject seafarerOC = getSeafarerDocsOcView();
        Row currRow = seafarerOC.getCurrentRow();
        Integer edocId = null;
        String ret = null;
        //        System.out.println(currRow +"------currRow");
        try {
            if (currRow.getAttribute("EdocId") != null) {
                edocId = Integer.parseInt(currRow.getAttribute("EdocId").toString());
                //            System.out.println(edocId+"-------edocId");
            }
            ViewObject linkVO = getGetDocumentLinkView();
            linkVO.setNamedWhereClauseParam("pEdocId", edocId);
            linkVO.executeQuery();
            //      System.out.println(linkVO.getRowCount()+"--------rowcount");
            if (linkVO.getRowCount() > 0) {
                Row row = linkVO.first();
                ret = row.getAttribute("DocLink").toString();
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                            e.printStackTrace();
            ret = null;
        }
        return ret;
    }


    /**
     * Method to get link of the documents based on the edoc id.
     */
    public String getlinkforSQC(String code) {
        ViewObject seafarer = getSeafarerDocsSqcView();
        Row currRow = seafarer.getCurrentRow();
        Integer edocId = null;
        String ret = null;
        //            System.out.println(currRow +"------currRow");
        try {
            if (code.equalsIgnoreCase("0006")) {
                if (currRow.getAttribute("EdocId") != null) {
                    edocId = Integer.parseInt(currRow.getAttribute("EdocId").toString());
                }
            }
            if (code.equalsIgnoreCase("0011")) {
                if (currRow.getAttribute("SupportEdocId") != null) {
                    edocId = Integer.parseInt(currRow.getAttribute("SupportEdocId").toString());
                }
            }
            //                System.out.println(edocId+"-------edocId");
            ViewObject linkVO = getGetDocumentLinkView();
            linkVO.setNamedWhereClauseParam("pEdocId", edocId);
            linkVO.executeQuery();
            //            System.out.println(linkVO.getRowCount()+"--------rowcount");
            if (linkVO.getRowCount() > 0) {
                Row row = linkVO.first();
                ret = row.getAttribute("DocLink").toString();
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                                e.printStackTrace();
            ret = null;
        }
        return ret;
    }

    /**
     * Container's getter for SeafarerOcDetailsRO1.
     * @return SeafarerOcDetailsRO1
     */
    public ViewObjectImpl getSeafarerOcDetailsView() {
        return (ViewObjectImpl) findViewObject("SeafarerOcDetailsView");
    }

    /**
     * Container's getter for SeafarerDetailOcDetailLK1.
     * @return SeafarerDetailOcDetailLK1
     */
    public ViewLinkImpl getSeafarerDetailOcDetailLK1() {
        return (ViewLinkImpl) findViewLink("SeafarerDetailOcDetailLK1");
    }

    /**
     * Container's getter for SeafarerSqcDetailsRO1.
     * @return SeafarerSqcDetailsRO1
     */
    public ViewObjectImpl getSeafarerSqcDocumentDetailsView() {
        return (ViewObjectImpl) findViewObject("SeafarerSqcDocumentDetailsView");
    }

    /**
     * Container's getter for SeafarerDetailSqcDetailLK1.
     * @return SeafarerDetailSqcDetailLK1
     */
    public ViewLinkImpl getSeafarerDetailSqcDetailLK1() {
        return (ViewLinkImpl) findViewLink("SeafarerDetailSqcDetailLK1");
    }

    /**
     * Container's getter for RegionListForAssignRO1.
     * @return RegionListForAssignRO1
     */
    public ViewObjectImpl getRegionListForAssignView() {
        return (ViewObjectImpl) findViewObject("RegionListForAssignView");
    }

    /**
     * Method to assign batch to selected region.
     * call assign_batch_to_region db function.
     */
    public void assignBatchesToRegion(Integer regionId) {
        //        System.out.println(regionId+"-----region");
        try {
            Integer batch_id = null;
            ViewObject batchesVO = getWorkFlowSubmittedBatchesView();
            RowSetIterator rit = batchesVO.createRowSetIterator(null);
            while (rit.hasNext()) {
                Row r = rit.next();
                String selected = "false";
//                System.out.println(r.getAttribute("tranSelect")+"---1212");
                if (r.getAttribute("tranSelect") != null) {
                    selected = r.getAttribute("tranSelect").toString();
                }
                if (selected.equalsIgnoreCase("true")) {
                    batch_id = Integer.parseInt(r.getAttribute("EsiBatchId").toString());
                    Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.rmi_upd_order_sales_rep(?,?,?)", new Object[] {
                                                     batch_id, getUserId(), regionId
                                                    });
                    System.out.println(batch_id+"----"+stat);
                    assignBatchToSelectedRegion(batch_id, regionId);

                }
                //                              System.out.println(batch_id+"--------boolean");
            }

            batchesVO.executeQuery();
            refresh_workflow();
        } catch (Exception e) {
            e.printStackTrace();
            addFormattedFacesErrorMessage("System encountered an exception while assigning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
    }

    /**
     * Method to select/Deselect all the rows in WorkFlowSubmittedBatchesView by setting the tranSelect.
     */
    public void selectAllonTaskAssignment(String check) {
        //        System.out.println(regionId+"-----region");
        try {
            ViewObject batchesVO = getWorkFlowSubmittedBatchesView();
            RowSetIterator rit = batchesVO.createRowSetIterator(null);
            while (rit.hasNext()) {
                Row r = rit.next();
                r.setAttribute("tranSelect", check);

                }
                //                              System.out.println(batch_id+"--------boolean");
            }

           
         catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while assigning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
    }
    /**
     * Method to validate seafarer data.
     * @param p_user_id User Id of the logged in user.
     * @return returns validation message.
     */
    public String validateSeafarer(Integer p_user_id) {
        try {
            String validation_type = "SUBMIT";
            ViewObject batchesVO = getBatchIfaceView();
            Row row = batchesVO.getCurrentRow();
            //    System.out.println(row+"-------row");
            Integer batch_id = Integer.parseInt(row.getAttribute("EsiBatchId").toString());
            //    System.out.println(batch_id+"--------batchId");
            String p_log = checkSeafarerValidate();
            if (p_log.equalsIgnoreCase("true")) {
                p_log = callValidateProcedure(validation_type, batch_id, p_user_id);
            }
            //            System.out.println(p_log + "---------p_log");
            return p_log;
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while validating seafarer data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return null;
    }

    /**
     * call database procedure to validate seafarer data.
     * @param batch_id batch id of the selected batch.
     * @param user_id user id of the logged in user
     * @return returns the object returned by the procedure.
     */
    public String callValidateProcedure(String validation_type, Integer batch_id, Integer user_id) {
        CallableStatement st = null;
        String status = null;
        String p_log = "Success";
        try {
            //                System.out.println(validation_type+"----"+batch_id+"------");
            String sql = "BEGIN RMI_SICD_PUB.PROCESS_VALIDATION(?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            st.setObject(1, validation_type); //MAIL SERVER
            st.setObject(2, batch_id);
            st.registerOutParameter(3, Types.VARCHAR); //OUT PARAM ERROR
            st.registerOutParameter(4, Types.VARCHAR);
            st.setObject(5, user_id);
            //            header_id = Integer.parseInt(st.getObject(4).toString());
            st.execute();
            //                System.out.println("-----1111-----");
            //                    ret[0] = st.getObject(1).toString();
            //                System.out.println(st.getObject(4)+"------2222");
            if (st.getObject(4) != null) {
                p_log = st.getObject(4).toString();
            }
            //                System.out.println(p_log +"-------error");
            //                    System.out.println(st.getObject(7)+"-----error");
            //                System.out.println(st.getObject(1));
            //        String str1 = st.getObject(6).toString();
            //         String str2 =  st.getObject(1).toString();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while validating seafarer data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        } finally {
            if (st != null) {
                try {

                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }


            }
        }
        return p_log;
    }

    /**
     * call rmi_fnd_request_cra db function.
     */
    public void callConcurrentProgramForTC() {

        try {
            ViewObject batchesVO = getBatchIfaceView();
            Row row = batchesVO.getCurrentRow();
//            System.out.println(row + "-------row");
            String batch = row.getAttribute("EsiBatchId").toString();
//            System.out.println(batch + "----batch");
            String agent_email_id = null;
            System.out.println(row.getAttribute("CreatedBy"));
//            System.out.println(row.getAttribute("CreatedBy").toString());
            Integer user_id = Integer.parseInt(row.getAttribute("CreatedBy").toString());
//            System.out.println(user_id + "-----user Id");
            if (row.getAttribute("tranEmailOrdering") != null) {
                agent_email_id = row.getAttribute("tranEmailOrdering").toString();

            }
            String user_type = getUserType(user_id);
//            System.out.println(user_type + "----usertype");
            String emailId = null;
            if (user_type.equalsIgnoreCase("external")) {
                ViewObject getmailVO = getGetEmailIdFromUserIdView();
                getmailVO.setNamedWhereClauseParam("pUserId", user_id);
                getmailVO.executeQuery();

                Row frow = getmailVO.first();
                emailId = frow.getAttribute("EmailId").toString();
            } else {
                emailId = agent_email_id;
            }
            //            System.out.println(emailId+"-------emailID");
            Integer batch_id = Integer.parseInt(row.getAttribute("EsiBatchId").toString());
            Object stat = callStoredFunction(Types.INTEGER, "RMI_SICD_PUB.FND_REQUEST_CRA(?,?)", new Object[] {
                                             batch_id, emailId
            });
            this.getTransaction().commit();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while processing batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }
        //System.out.println(stat+"-----stat");


    }


    /**
     * call rmi_fnd_request_cra db function.
     */
    public void callConcurrentProgramManually() {

        try {
            ViewObject pendingAckVO = getBatchesPendingTcPendingAckView();
            Row row = pendingAckVO.getCurrentRow();
            //            System.out.println(row+"-------row");
            String batch = row.getAttribute("EsiBatchId").toString();
            Integer batch_id = Integer.parseInt(row.getAttribute("EsiBatchId").toString());
            ViewObject mailVO = getGetEmailIdForAckView();
            mailVO.setNamedWhereClauseParam("pBatchId", batch_id);
            mailVO.executeQuery();
            Row firstRow = mailVO.first();
            String mail = firstRow.getAttribute("MEmailId").toString();

            Object stat = callStoredFunction(Types.INTEGER, "RMI_SICD_PUB.FND_REQUEST_CRA(?,?)", new Object[] {
                                             batch_id, mail
            });
            this.getTransaction().commit();
            //    System.out.println(stat+"-----stat");

            pendingAckVO.executeQuery();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while processing batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }


    /**
     * Method to find type of the logged in user.
     */
    public String getUserType(Integer user_id) {
        String user_type = null;
        try {
            System.out.println("first method---"+new Timestamp(System.currentTimeMillis()));
            ViewObject userDetailsRo = getUserDetailsView();
            userDetailsRo.setNamedWhereClauseParam("pUserId", user_id);
            userDetailsRo.executeQuery();
            System.out.println("first method---1"+new Timestamp(System.currentTimeMillis()));
            if (userDetailsRo.getRowCount() > 0) {
                Row row = userDetailsRo.first();
                System.out.println("first method---2"+new Timestamp(System.currentTimeMillis()));

                String ut = row.getAttribute("UserType").toString();
                user_type = ut;
                ADFContext.getCurrent().getSessionScope().put("user_type", ut);
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }
        return user_type;

    }


    /**
     * Method to find type of the logged in user.
     */
    public String getUserTypeForApplicationSource(Integer user_id, String batch_mode, Integer batch_id) {
        String user_type = null;
        try {
            Integer user = null;
            if (batch_mode.equalsIgnoreCase("edit")) {
                ViewObject btDtls = getgetBatchDetailsView();
                btDtls.setNamedWhereClauseParam("pBatchId", batch_id);
                btDtls.executeQuery();
                Row row = btDtls.first();
                user = Integer.parseInt(row.getAttribute("CreatedBy").toString());
            } else {
                user = user_id;
            }
            ViewObject userDetailsRo = getUserDetailsView();
            userDetailsRo.setNamedWhereClauseParam("pUserId", user);
            userDetailsRo.executeQuery();
            if (userDetailsRo.getRowCount() > 0) {
                Row row = userDetailsRo.first();
                String ut = row.getAttribute("UserType").toString();
                user_type = ut;
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return user_type;
    }

    /**
     * Container's getter for UserDetailsRO1.
     * @return UserDetailsRO1
     */
    public ViewObjectImpl getUserDetailsView() {
        return (ViewObjectImpl) findViewObject("UserDetailsView");
    }

    /**
     * Method to send the batch to internal agent 2.
     * call assign_batch_to_internal2 db function.
     *
     */
    public void send_to_internal2() {
        try {
            ViewObject batchesVO = getBatchIfaceView();
            Row row = batchesVO.getCurrentRow();
            //            System.out.println(row+"-------row");
            Integer batch_id = Integer.parseInt(row.getAttribute("EsiBatchId").toString());
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.assign_batch_to_internal2(?)", new Object[] {
            //                                             batch_id });
            assignBatchToInternalAgent2(batch_id);
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while submitting batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }


    }

    /**
     * Container's getter for BatchesPendingUploadDocumentRO1.
     * @return BatchesPendingUploadDocumentRO1
     */
    public ViewObjectImpl getBatchesPendingUploadDocumentView() {
        return (ViewObjectImpl) findViewObject("BatchesPendingUploadDocumentView");
    }

    /**
     * Method to assign the batch to logged in user.
     * call ASSIGN_TASK_TO_USER db function.
     *
     */
    public String assignTaskToUseruploadDoc(Integer user_id) {
        try {
            String batch_status = "Pending_upload_document";
            ViewObject valVO = getBatchesPendingUploadDocumentView();
            Row currentRow = valVO.getCurrentRow();
            Integer batchId = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.ASSIGN_TASK_TO_USER(?,?)", new Object[] {
            //                                             batchId, user_id });

            String res = validateBatchWorkFlowStatus(batchId, batch_status);
                        if(res.equalsIgnoreCase("new"))
                        {
                        assignTaskToCurrentUser(batchId, user_id, batch_status);
                        valVO.executeQuery();
                        
                        }
                        else
                        {
                                valVO.executeQuery();   
                            
                            }
                        return res;
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while assigning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return "new";
    }


    /**
     * Method to update batch details(email id).
     * call update_batch_details db function.
     *
     */
    public void update_email_id(String email) {

        try {
            ViewObject batchesVO = getBatchIfaceView();
            Row row = batchesVO.getCurrentRow();
            Integer batch_id = Integer.parseInt(row.getAttribute("EsiBatchId").toString());
            //            String email_id = row.getAttribute("tranEmailOrdering").toString();
            //            System.out.println(batch_id+"-------"+email+"-----5555");
            Integer user_id =
                Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
            if(email != null)
            {
                if(!email.toString().equalsIgnoreCase(""))
                {
            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.update_batch_details(?,?,?)", new Object[] {
                                             batch_id, email,user_id
            });
            }
            }
            
        } catch (Exception e) {
            e.printStackTrace();
            addFormattedFacesErrorMessage("System encountered an exception while updating email id." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }


    }

    /**
     * Container's getter for SeafarersDetailsRO1.
     * @return SeafarersDetailsRO1
     */
    public ViewObjectImpl getSeafarersDetailLinkView() {
        return (ViewObjectImpl) findViewObject("SeafarersDetailLinkView");
    }

    /**
     * Container's getter for WfSubmittedBatchesSeafarerDetailsLK1.
     * @return WfSubmittedBatchesSeafarerDetailsLK1
     */
    public ViewLinkImpl getWfSubmittedBatchesSeafarerDetailsLK1() {
        return (ViewLinkImpl) findViewLink("WfSubmittedBatchesSeafarerDetailsLK1");
    }

    /**
     * Method to get link of the documents based on the edoc id.
     *
     */
    public String getlinkforTaskAssignmentpage(String code) {
        ViewObject seafarer = getSeafarersDetailLinkView();
        Row currRow = seafarer.getCurrentRow();
        String edocId = null;
        String ret = null;
        //        System.out.println(currRow +"------currRow");
        try {
            if (code.equalsIgnoreCase("0002")) {
                if (currRow.getAttribute("PhotoEdocId") != null) {
                    edocId = currRow.getAttribute("PhotoEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0003")) {
                if (currRow.getAttribute("IdentityDocEdocId") != null) {
                    edocId = currRow.getAttribute("IdentityDocEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0004")) {
                //                System.out.println("---------in medical");
                //                    System.out.println(currRow.getAttribute("PhysicalEdocId")+"------physical");
                //                    System.out.println(currRow.getAttribute("PhysicalEdocId").toString()+"----edoc");
                if (currRow.getAttribute("PhysicalEdocId") != null) {
                    edocId = currRow.getAttribute("PhysicalEdocId").toString();

                    //                System.out.println(edocId+"-------edocid");
                }
            }
            if (code.equalsIgnoreCase("0008")) {
                if (currRow.getAttribute("SeaserviceTranscriptEdocId") != null) {
                    edocId = currRow.getAttribute("SeaserviceTranscriptEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0001")) {
                if (currRow.getAttribute("ApplicationEdocId") != null) {
                    edocId = currRow.getAttribute("ApplicationEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0009")) {
                if (currRow.getAttribute("AffidavitEdocId") != null) {
                    edocId = currRow.getAttribute("AffidavitEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0016")) {
                if (currRow.getAttribute("SatEdocId") != null) {
                    edocId = currRow.getAttribute("SatEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0031")) {
                if (currRow.getAttribute("InternalEdocId") != null) {
                    edocId = currRow.getAttribute("InternalEdocId").toString();
                }
            }
            if (code.equalsIgnoreCase("0025")) {
                if (currRow.getAttribute("ConsentEdocId") == null) {
                    copyConsentValues();

                }
                if (currRow.getAttribute("ConsentEdocId") != null) {
                    edocId = currRow.getAttribute("ConsentEdocId").toString();
                }
            }
            //            System.out.println(edocId+"-------edocId");
//            ViewObject linkVO = getGetDocumentLinkView();
//            linkVO.setNamedWhereClauseParam("pEdocId", edocId);
//            linkVO.executeQuery();
//            //      System.out.println(linkVO.getRowCount()+"--------rowcount");
//            if (linkVO.getRowCount() > 0) {
//                Row row = linkVO.first();
//                ret = row.getAttribute("DocLink").toString();
//            }
            ret = edocId;
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                            e.printStackTrace();
            ret = null;
        }
        return ret;
    }


    /**
     * Method to get the consent details.
     *
     */
    public void copyConsentValues() {
        try {
            ViewObject seafarer = getSeafarersDetailLinkView();
            Row currRow = seafarer.getCurrentRow();
            String firstname = "";
            String lastname = "";
            Date birthDate = null;
            String nationality = "";
            Integer seafarer_id = null;
            if (currRow.getAttribute("FirstName") != null) {
                firstname = currRow.getAttribute("FirstName").toString();
            }
            if (currRow.getAttribute("LastName") != null) {
                lastname = currRow.getAttribute("LastName").toString();
            }
            if (currRow.getAttribute("BirthDate") != null) {
                birthDate = (Date) currRow.getAttribute("BirthDate");
            }
            if (currRow.getAttribute("ResidenceCountry") != null) {
                nationality = currRow.getAttribute("ResidenceCountry").toString();
            }
            if (currRow.getAttribute("SeafarerId") != null) {
                seafarer_id = Integer.parseInt(currRow.getAttribute("SeafarerId").toString());
            }
            String finalName = firstname.concat(" ").concat(lastname);
            //                System.out.println("FinalName:- "+finalName);
            //            System.out.println(birthDate);
            //            System.out.println(nationality);
//            Object stat = callStoredFunction(Types.VARCHAR, "rmi_seaf_consent_id(?,?,?)", new Object[] {
//                                             finalName, nationality, birthDate
//            });
                             Object stat = callStoredFunction(Types.NUMERIC, "RMI_SICD_PUB.get_consent_id(?,?,?,?,?)", new Object[] {
                                             "SICD_SEAFARERS", seafarer_id, null,null,null
            });
            //                System.out.println(stat+"----");
            Integer res = Integer.parseInt(stat.toString());
            if (res != 0) {
                //                System.out.println("111111----");
                ViewObject consentVo = getConsentDetailsView();
                consentVo.setNamedWhereClauseParam("pConsentId", res);
                consentVo.executeQuery();

                if (consentVo.getRowCount() > 0) {
                    //            System.out.println("2222----"+consentVo.getRowCount());
                    Row row = consentVo.first();
                    //System.out.println(row+"-------");
                    String confirmNo = row.getAttribute("ConfirmationNumber").toString();
                    //            System.out.println("333333----"+confirmNo);
                    Date date1 = (Date) row.getAttribute("ConsentDate");
                    //            System.out.println("2222----"+date1);
                    Date date2 = (Date) row.getAttribute("ConsentExpireDate");
                    //            System.out.println("2222----"+date2);

                    //            System.out.println(confirmNo+"-----"+date1+"---"+date2);
                    currRow.setAttribute("tranConsentAckNo", confirmNo);
                    currRow.setAttribute("trnConsentStartDate", date1);
                    currRow.setAttribute("tranConsentExpDate", date2);
                }
            } else {
                currRow.setAttribute("tranConsentAckNo", null);
                currRow.setAttribute("trnConsentStartDate", null);
                currRow.setAttribute("tranConsentExpDate", null);
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching consent data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }
    }

    /**
     * Container's getter for SeafarerSqcDetailsRO1.
     * @return SeafarerSqcDetailsRO1
     */
    public ViewObjectImpl getSeafarerSqcDetailsView() {
        return (ViewObjectImpl) findViewObject("SeafarerSqcDetailsView");
    }

    /**
     * Container's getter for SeafarerOcDetailsRO1.
     * @return SeafarerOcDetailsRO1
     */
    public ViewObjectImpl getSeafarerOcDetailsLinkView() {
        return (ViewObjectImpl) findViewObject("SeafarerOcDetailsLinkView");
    }

    /**
     * Container's getter for SeafarerDetailOcDetailLK2.
     * @return SeafarerDetailOcDetailLK2
     */
    public ViewLinkImpl getSeafarerDetailOcDetailLK2() {
        return (ViewLinkImpl) findViewLink("SeafarerDetailOcDetailLK2");
    }

    /**
     * Container's getter for SeafarerSqcDetailsRO2.
     * @return SeafarerSqcDetailsRO2
     */
    public ViewObjectImpl getSeafarerSqcDetailsLinkView() {
        return (ViewObjectImpl) findViewObject("SeafarerSqcDetailsLinkView");
    }

    /**
     * Container's getter for SeafarerDetailSqcDetailLK2.
     * @return SeafarerDetailSqcDetailLK2
     */
    public ViewLinkImpl getSeafarerDetailSqcDetailLK2() {
        return (ViewLinkImpl) findViewLink("SeafarerDetailSqcDetailLK2");
    }

    /**
     * Container's getter for BatchesPendingTcCraRO1.
     * @return BatchesPendingTcCraRO1
     */
    public ViewObjectImpl getBatchesPendingTcCraView() {
        return (ViewObjectImpl) findViewObject("BatchesPendingTcCraView");
    }

    /**
     * Container's getter for BatchesPendingTcExpeditedProcessingRO1.
     * @return BatchesPendingTcExpeditedProcessingRO1
     */
    public ViewObjectImpl getBatchesPendingTcExpeditedProcessingView() {
        return (ViewObjectImpl) findViewObject("BatchesPendingTcExpeditedProcessingView");
    }

    /**
     * Container's getter for BatchesPendingTcPendingAckRO1.
     * @return BatchesPendingTcPendingAckRO1
     */
    public ViewObjectImpl getBatchesPendingTcPendingAckView() {
        return (ViewObjectImpl) findViewObject("BatchesPendingTcPendingAckView");
    }

    /**
     * Container's getter for GetEmailIdForAckRO1.
     * @return GetEmailIdForAckRO1
     */
    public ViewObjectImpl getGetEmailIdForAckView() {
        return (ViewObjectImpl) findViewObject("GetEmailIdForAckView");
    }

    /**
     * Container's getter for FindSeafarerRO1.
     * @return FindSeafarerRO1
     */
    public ViewObjectImpl getFindSeafarerView() {
        return (ViewObjectImpl) findViewObject("FindSeafarerView");
    }


    /**
     * Method to filter FindSeafarerView
     * @param esi_id
     * @param sea_name seafarer name.
     */
    public void find_seafarer(Integer esi_id, String sea_name , Date birth_date) {
        try {
            String seafarerid = null;
            String name = null;
            oracle.jbo.domain.Date date = null;
//            System.out.println(esi_id+"---"+sea_name);
            ViewObject dualView = getFindSeafarerDualView();
            Row row = dualView.getCurrentRow();
            if(row.getAttribute("TranSeafarerId") != null)
            {
               seafarerid = row.getAttribute("TranSeafarerId").toString(); 
                }
            if(row.getAttribute("TranLastName") != null)
            {
               name = row.getAttribute("TranLastName").toString().trim(); 
                }
            if(row.getAttribute("TranDateOfBirth") != null)
            {
               date = (oracle.jbo.domain.Date)row.getAttribute("TranDateOfBirth"); 
                }
            ViewObject findSeafarer = getSeafarerOrderHistoryDetailsView();
            findSeafarer.setNamedWhereClauseParam("pSeafarer_id", seafarerid);
            findSeafarer.setNamedWhereClauseParam("pLastName", name);
            findSeafarer.setNamedWhereClauseParam("pBirthDate", date);
            findSeafarer.executeQuery();
            
            System.out.println(findSeafarer.getRowCount()+"---rowcount");
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while searching seafarer." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }
    }
    public void clearFindSeafarerSearch()
    {
    ViewObject findSeafarerDual = getFindSeafarerDualView();
    findSeafarerDual.executeQuery();
        ViewObject findSeafarer = getSeafarerOrderHistoryDetailsView();
        findSeafarer.setNamedWhereClauseParam("pSeafarer_id", null);
        findSeafarer.setNamedWhereClauseParam("pLastName", null);
        findSeafarer.setNamedWhereClauseParam("pBirthDate", null);
        findSeafarer.executeQuery();
    }
    /**
     * Method to reset the filter on FindSeafarerView and execute
     */
    public void findSeafarerReset() {
        try {
            ViewObject findSeafarer = getFindSeafarerView();
            findSeafarer.setNamedWhereClauseParam("pSeafarerId", null);
            findSeafarer.setNamedWhereClauseParam("pName", null);
            findSeafarer.setNamedWhereClauseParam("pDateOfBirth", null);
            findSeafarer.executeQuery();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while refreshing page." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }


    /**
     * Container's getter for getBatchDetailsRO1.
     * @return getBatchDetailsRO1
     */
    public ViewObjectImpl getgetBatchDetailsView() {
        return (ViewObjectImpl) findViewObject("getBatchDetailsView");
    }


    /**
     * Method to remove sqc line.
     *
     */

    public void deleteSqc() {
        //        System.out.println("------sqc---delete");
        try {
            ViewObject sqcVO = getSeafarerDocsSqcView();
            Row row = sqcVO.getCurrentRow();
            //      System.out.println(row+"---------row11");
            row.remove();
            sqcVO.executeQuery();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while deleting line." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }


    /**
     * Method to delete oc line.
     */
    public void deleteOc() {
        //            System.out.println("------oc---delete");

        try {
            ViewObject ocVO = getSeafarerDocsOcView();
            Row row = ocVO.getCurrentRow();
            //            System.out.println(row+"---------row11");
            row.remove();
            ocVO.executeQuery();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while deleting line." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
    }

    /**
     * Container's getter for GradeOcRO1.
     * @return GradeOcRO1
     */
    public ViewObjectImpl getGradeOcView() {
        return (ViewObjectImpl) findViewObject("GradeOcView");
    }

    /**
     * Container's getter for GradeSqcRO1.
     * @return GradeSqcRO1
     */
    public ViewObjectImpl getGradeSqcView() {
        return (ViewObjectImpl) findViewObject("GradeSqcView");
    }

    public void gradeIdOcValueChangeListener()
    {
            Integer user_id =
                Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
            String userType = "Internal";
            ViewObject userDetails = getUserDetailsView();
            userDetails.setNamedWhereClauseParam("pUserId", user_id);
            userDetails.executeQuery();
            if(userDetails.getRowCount() > 0)
            {
                Row frow = userDetails.first();
              if(frow.getAttribute("UserType") != null)
              {
                 userType = frow.getAttribute("UserType").toString(); 
                  }
                
                
                }
            
            if(userType.equalsIgnoreCase("Internal"))
            {
            ViewObject seafarerVo = getSeafarerIfaceView();
            Row currentRow = seafarerVo.getCurrentRow();
            Integer seafarerId = Integer.parseInt(currentRow.getAttribute("SeafarerId").toString());  
            
            ViewObject docsOc = getSeafarerDocsOcView();
            Row currentOcRow = docsOc.getCurrentRow();
            Integer gradeId = null;
            String gradeCode = null;
            String gradeName = null;
            
                
            if(currentOcRow.getAttribute("GradeId") != null)
            {
                    gradeId =   Integer.parseInt(currentOcRow.getAttribute("GradeId").toString());   
                }
            if(currentOcRow.getAttribute("tranGradeCode") != null)
            {
                   gradeCode = currentOcRow.getAttribute("tranGradeCode").toString();
                }
            if(currentOcRow.getAttribute("tranGradeName") != null)
            {
                  gradeName =  currentOcRow.getAttribute("tranGradeName").toString();
                }
            System.out.println(gradeId+"-----gradeId");
            ViewObject preOc = getPreviousOCDetailsView();
            preOc.setNamedWhereClauseParam("pGradeId", gradeId);
            preOc.setNamedWhereClauseParam("pSeafarerId", seafarerId);
            preOc.executeQuery();
            
            if(preOc.getRowCount() > 0)
            {
                System.out.println("in the if---");
                
//                    currentOcRow.remove();
                    Row frow = preOc.first();  
//                    Row createRow = docsOc.createRow();
//                    createRow.setAttribute("GradeId", gradeId);
//                    createRow.setAttribute("tranGradeCode", gradeCode);
//                    createRow.setAttribute("tranGradeName", gradeName);
//                    createRow.setAttribute("CreatedBy", user_id);    
                                        currentOcRow.setAttribute("CocIdentifier", null);
                    currentOcRow.setAttribute("CocCountry", null);
                    currentOcRow.setAttribute("CocIssueDate", null);
                    currentOcRow.setAttribute("CocExpirationDate", null);
                    
                    currentOcRow.setAttribute("CocIdentifier", frow.getAttribute("EndorsementNumber"));
                    currentOcRow.setAttribute("CocCountry", frow.getAttribute("EndorsementCountry"));
                    currentOcRow.setAttribute("CocIssueDate", frow.getAttribute("EndorsementIssueDate"));
                    currentOcRow.setAttribute("CocExpirationDate", frow.getAttribute("EndorsementExpirationDate"));
//                    createRow.setAttribute("DocChargeable", frow.getAttribute("DocChargeable"));
//                    docsOc.insertRow(createRow);
                    System.out.println(frow.getAttribute("EndorsementIssueDate")+"----11");
                    
    //                System.out.println(currentSqcRow.getAttribute("CocIssueDate")+"----");
                }
            }
           
            
            
        }
    /**
     * Method to create oc lines and set default data based on the selected grades.
     * @param user_id user id of the logged in user.
     */
    public void usegradeOc(Integer user_id) {
        //            System.out.println("--------usegradeocam");
        try {
           
            String userType = "Internal";
            ViewObject userDetails = getUserDetailsView();
            userDetails.setNamedWhereClauseParam("pUserId", user_id);
            userDetails.executeQuery();
            if(userDetails.getRowCount() > 0)
            {
                Row frow = userDetails.first();
              if(frow.getAttribute("UserType") != null)
              {
                 userType = frow.getAttribute("UserType").toString(); 
                  }
                
                
                }
            ViewObject seafarerVo = getSeafarerIfaceView();
            Row currentRow = seafarerVo.getCurrentRow();
            Integer seafarerId = Integer.parseInt(currentRow.getAttribute("SeafarerId").toString());
            
            ViewObject gradeOc = getGradeOcView();
            RowSetIterator rit = gradeOc.createRowSetIterator(null);
            while (rit.hasNext()) {
                Row row = rit.next();
                String val = "N";
                if (row.getAttribute("tranSelect") != null) {
                    //                    System.out.println(row.getAttribute("tranSelect") + "-----transelect");
                    val = row.getAttribute("tranSelect").toString();
                    //                    System.out.println(val + "-----val");
                    row.setAttribute("tranSelect", "N");
                }
                if (val.equalsIgnoreCase("Y")) {
                    
                    
                    //                    System.out.println("in the if condition");
                    Integer gradeid = Integer.parseInt(row.getAttribute("GradeId").toString());
                    String gradeCode = row.getAttribute("GradeCode").toString();
                    String gradename = row.getAttribute("GradeName").toString();
                    
                    ViewObject preOc = getPreviousOCDetailsView();
                                    preOc.setNamedWhereClauseParam("pGradeId", gradeid);
                                   preOc.setNamedWhereClauseParam("pSeafarerId", seafarerId);
                                   preOc.executeQuery();
                                   
                                   
                    ViewObject docsOc = getSeafarerDocsOcView();
                    Row createRow = docsOc.createRow();
                    createRow.setAttribute("GradeId", gradeid);
                    createRow.setAttribute("tranGradeCode", gradeCode);
                    createRow.setAttribute("tranGradeName", gradename);
                    createRow.setAttribute("CreatedBy", user_id);
                    if(preOc.getRowCount() > 0 && userType.equalsIgnoreCase("Internal"))
                                        {
                                          Row frow = preOc.first();  
                                                createRow.setAttribute("CocIdentifier", frow.getAttribute("EndorsementNumber"));
                                                createRow.setAttribute("CocCountry", frow.getAttribute("EndorsementCountry"));
                                                createRow.setAttribute("CocIssueDate", frow.getAttribute("EndorsementIssueDate"));
                                                createRow.setAttribute("CocExpirationDate", frow.getAttribute("EndorsementExpirationDate"));
//                                                createRow.setAttribute("DocChargeable", frow.getAttribute("DocChargeable"));
                                            }
                    docsOc.insertRow(createRow);


                }
                // System.out.println(val+"-----------");


            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }

public void gradeIdValueChangeListener()
{
        Integer user_id =
            Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
        String userType = "Internal";
        ViewObject userDetails = getUserDetailsView();
        userDetails.setNamedWhereClauseParam("pUserId", user_id);
        userDetails.executeQuery();
        if(userDetails.getRowCount() > 0)
        {
            Row frow = userDetails.first();
          if(frow.getAttribute("UserType") != null)
          {
             userType = frow.getAttribute("UserType").toString(); 
              }
            
            
            }
        
        
        ViewObject seafarerVo = getSeafarerIfaceView();
        Row currentRow = seafarerVo.getCurrentRow();
        Integer seafarerId = Integer.parseInt(currentRow.getAttribute("SeafarerId").toString());  
        
        ViewObject docsSqcc = getSeafarerDocsSqcView();
        Row currentSqcRow = docsSqcc.getCurrentRow();
        Integer gradeId = null;
        String gradeCode = null;
        String gradeName = null;
        
            
        if(currentSqcRow.getAttribute("GradeId") != null)
        {
                gradeId =   Integer.parseInt(currentSqcRow.getAttribute("GradeId").toString());   
            }
        if(currentSqcRow.getAttribute("tranGradeCode") != null)
        {
               gradeCode = currentSqcRow.getAttribute("tranGradeCode").toString();
            }
        if(currentSqcRow.getAttribute("tranGradeDescription") != null)
        {
              gradeName =  currentSqcRow.getAttribute("tranGradeDescription").toString();
            }
        System.out.println(gradeId+"-----gradeId");
        ViewObject preSqc = getPreviousSqcDetailsView();
        preSqc.setNamedWhereClauseParam("pGradeId", gradeId);
        preSqc.setNamedWhereClauseParam("pSeafarerId", seafarerId);
        preSqc.executeQuery();
        
        if(preSqc.getRowCount() > 0)
        {
            System.out.println("in the if---");
            
//                currentSqcRow.remove();
                Row frow = preSqc.first();  
//                Row createRow = docsSqcc.createRow();
//                createRow.setAttribute("GradeId", gradeId);
//                createRow.setAttribute("tranGradeCode", gradeCode);
//                createRow.setAttribute("tranGradeDescription", gradeName);
//                createRow.setAttribute("CreatedBy", user_id); 
                                currentSqcRow.setAttribute("CocIdentifier", null);
                currentSqcRow.setAttribute("CocCountry", null);
                currentSqcRow.setAttribute("CocIssueDate", null);
                currentSqcRow.setAttribute("CocExpirationDate", null);
                currentSqcRow.setAttribute("DocChargeable", null);
                
                if(userType.equalsIgnoreCase("Internal"))
                {
                currentSqcRow.setAttribute("CocIdentifier", frow.getAttribute("EndorsementNumber"));
                currentSqcRow.setAttribute("CocCountry", frow.getAttribute("EndorsementCountry"));
                currentSqcRow.setAttribute("CocIssueDate", frow.getAttribute("EndorsementIssueDate"));
                currentSqcRow.setAttribute("CocExpirationDate", frow.getAttribute("EndorsementExpirationDate"));
                }
               
                currentSqcRow.setAttribute("DocChargeable", frow.getAttribute("DocChargeable"));
//                docsSqcc.insertRow(createRow);
                System.out.println(frow.getAttribute("EndorsementIssueDate")+"----11");
                
//                System.out.println(currentSqcRow.getAttribute("CocIssueDate")+"----");
            }
        
       
        
        
    }
    /**
     * Method to create sqc lines and set default data based on the selected grades.
     * @param user_id user id of the logged in user.
     */
    public void usegradeSqcc(Integer user_id) {
        //        System.out.println("in the sqc ");
        try {
            String userType = "Internal";
            ViewObject userDetails = getUserDetailsView();
            userDetails.setNamedWhereClauseParam("pUserId", user_id);
            userDetails.executeQuery();
            if(userDetails.getRowCount() > 0)
            {
                Row frow = userDetails.first();
              if(frow.getAttribute("UserType") != null)
              {
                 userType = frow.getAttribute("UserType").toString(); 
                  }
                
                
                }
            
            
            ViewObject seafarerVo = getSeafarerIfaceView();
            Row currentRow = seafarerVo.getCurrentRow();
            Integer seafarerId = Integer.parseInt(currentRow.getAttribute("SeafarerId").toString());
            
            ViewObject gradeSqc = getGradeSqcView();
            RowSetIterator rit = gradeSqc.createRowSetIterator(null);
            while (rit.hasNext()) {
                Row row = rit.next();
                String val = "N";
                if (row.getAttribute("tranRadio") != null) {
                    val = row.getAttribute("tranRadio").toString();
                    row.setAttribute("tranRadio", "N");
                }
                if (val.equalsIgnoreCase("Y")) {
                    Integer gradeid = Integer.parseInt(row.getAttribute("GradeId").toString());
                    String gradeCode = row.getAttribute("GradeCode").toString();
                    String gradename = row.getAttribute("GradeName").toString();
                    
                     ViewObject preSqc = getPreviousSqcDetailsView();
                     preSqc.setNamedWhereClauseParam("pGradeId", gradeid);
                    preSqc.setNamedWhereClauseParam("pSeafarerId", seafarerId);
                    preSqc.executeQuery();
                   
                    
                    ViewObject docsSqcc = getSeafarerDocsSqcView();
                    Row createRow = docsSqcc.createRow();
                    createRow.setAttribute("GradeId", gradeid);
                    createRow.setAttribute("tranGradeCode", gradeCode);
                    createRow.setAttribute("tranGradeDescription", gradename);
                    createRow.setAttribute("CreatedBy", user_id);
                    if(preSqc.getRowCount() > 0)
                    {
                      Row frow = preSqc.first();  
                      if(userType.equalsIgnoreCase("Internal"))
                      {
                            createRow.setAttribute("CocIdentifier", frow.getAttribute("EndorsementNumber"));
                            createRow.setAttribute("CocCountry", frow.getAttribute("EndorsementCountry"));
                            createRow.setAttribute("CocIssueDate", frow.getAttribute("EndorsementIssueDate"));
                            createRow.setAttribute("CocExpirationDate", frow.getAttribute("EndorsementExpirationDate"));
                       
                      }
                            createRow.setAttribute("DocChargeable", frow.getAttribute("DocChargeable"));
                        }
                    docsSqcc.insertRow(createRow);


                }
                //    System.out.println(val+"-----------");


            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }


    /**
     * Method to find consent details.
     */
    public String findConsent() {
        String ret = "null";
        try {
            ViewObject seafarerVO = getSeafarerIfaceView();
            Row currRow = seafarerVO.getCurrentRow();
            Integer seafarer_id = null;
            if (currRow.getAttribute("SeafarerId") != null) {
                seafarer_id = Integer.parseInt(currRow.getAttribute("SeafarerId").toString());
            }
            
            ViewObject online = getOnlineConsentBySeafarerIdView();
            online.setNamedWhereClauseParam("pSeafarerId", seafarer_id);
            online.executeQuery();
String check = checkSeafarerNew();
            if(check.equalsIgnoreCase("old"))
            {
           
            String firstname = "";
            String lastname = "";
            Date birthDate = null;
            String nationality = "";
            String entityType = "";
           
            if (currRow.getAttribute("FirstName") != null) {
                firstname = currRow.getAttribute("FirstName").toString();
            }
            if (currRow.getAttribute("LastName") != null) {
                lastname = currRow.getAttribute("LastName").toString();
            }
            if (currRow.getAttribute("BirthDate") != null) {
                birthDate = (Date) currRow.getAttribute("BirthDate");
            }
            if (currRow.getAttribute("transNationality") != null) {
                nationality = currRow.getAttribute("transNationality").toString();
            }
               
            String finalName = firstname.concat(" ").concat(lastname);
            //            System.out.println("FinalName:- "+finalName);
            //        System.out.println(birthDate);
            //        System.out.println(nationality);
//            Object stat = callStoredFunction(Types.VARCHAR, "rmi_seaf_consent_id(?,?,?)", new Object[] {
//                                             finalName, nationality, birthDate
//            });
                                         Object stat = callStoredFunction(Types.NUMERIC, "RMI_SICD_PUB.get_consent_id(?,?,?,?,?)", new Object[] {
                                             "SICD_SEAFARERS", seafarer_id, null,null,null
            });
            //            System.out.println(stat+"----");
            Integer res = Integer.parseInt(stat.toString());
            if (res != 0) {
                //                    System.out.println("111111----");
                ViewObject consentVo = getConsentDetailsView();
                consentVo.setNamedWhereClauseParam("pConsentId", res);
                consentVo.executeQuery();

                if (consentVo.getRowCount() > 0) {
                    //                System.out.println("22222----");
                    Row row = consentVo.first();
                    currRow.setAttribute("tranEntityType", row.getAttribute("EntityType").toString());
                    String source = row.getAttribute("ConsentSource").toString();
                    if (source.equalsIgnoreCase("Online")) {
                        ret = "Online";
                        //              System.out.println("3333----");

                        String confirmNo = row.getAttribute("ConfirmationNumber").toString();
                        Date date1 = (Date) row.getAttribute("ConsentDate");
                        Date date2 = (Date) row.getAttribute("ConsentExpireDate");
                        currRow.setAttribute("tranAckNoConsent", confirmNo);
                        currRow.setAttribute("tranConsentStartDate", date1);
                        currRow.setAttribute("tranConsentExpDate", date2);
                        currRow.setAttribute("tranUploadedConsentStartDate", null);
                        currRow.setAttribute("tranUploadedConsentExpireDate", null);
                    } else {
                        String edoc = "null";
                        Integer edoc_id = null;
                        if (row.getAttribute("EdocId") != null) {
                            edoc_id = Integer.parseInt(row.getAttribute("EdocId").toString());
                            edoc = row.getAttribute("EdocId").toString();
                        }
//                         edoc = row.getAttribute("EdocId").toString();
                        Date date1 = (Date) row.getAttribute("ConsentDate");
                        Date date2 = (Date) row.getAttribute("ConsentExpireDate");
                        //              System.out.println(date1+"-------"+date2);
                        String market_comm = "false";
                        String market = row.getAttribute("MarketingCommunication").toString();
                        if(market.equalsIgnoreCase("Y"))
                        {
                          market_comm = "true";  
                            }
                        currRow.setAttribute("ConsentEdocId", edoc_id);
                        currRow.setAttribute("tranUploadedConsentStartDate", date1);
                        currRow.setAttribute("tranUploadedConsentExpireDate", date2);
                        currRow.setAttribute("tranConsentMarketing", market_comm);
                        ret = edoc;
                        currRow.setAttribute("tranAckNoConsent", null);
                        currRow.setAttribute("tranConsentStartDate", null);
                        currRow.setAttribute("tranConsentExpDate", null);
                    }
                }

            } else {
                currRow.setAttribute("tranAckNoConsent", null);
                currRow.setAttribute("tranConsentStartDate", null);
                currRow.setAttribute("tranConsentExpDate", null);
                currRow.setAttribute("tranUploadedConsentStartDate", null);
                currRow.setAttribute("tranUploadedConsentExpireDate", null);
            }
            }
            else if(online.getRowCount() > 0)
            {
              Row onlineRow = online.first();
           Integer consentId = Integer.parseInt(onlineRow.getAttribute("ConsentId").toString());   
                    ViewObject consentVo = getConsentDetailsView();
                    consentVo.setNamedWhereClauseParam("pConsentId", consentId);
                    consentVo.executeQuery();  
                
                
                    if (consentVo.getRowCount() > 0) {
                        //                System.out.println("22222----");
                        Row row = consentVo.first();
                        currRow.setAttribute("tranEntityType", row.getAttribute("EntityType").toString());
                        String source = row.getAttribute("ConsentSource").toString();
                        if (source.equalsIgnoreCase("Online")) {
                            ret = "Online";
                            //              System.out.println("3333----");

                            String confirmNo = row.getAttribute("ConfirmationNumber").toString();
                            Date date1 = (Date) row.getAttribute("ConsentDate");
                            Date date2 = (Date) row.getAttribute("ConsentExpireDate");
                            currRow.setAttribute("tranAckNoConsent", confirmNo);
                            currRow.setAttribute("tranConsentStartDate", date1);
                            currRow.setAttribute("tranConsentExpDate", date2);
                            currRow.setAttribute("tranUploadedConsentStartDate", null);
                            currRow.setAttribute("tranUploadedConsentExpireDate", null);
                        }
                    }
                
                
                
                }
                
            else
            {
                    currRow.setAttribute("tranAckNoConsent", null);
                    currRow.setAttribute("tranConsentStartDate", null);
                    currRow.setAttribute("tranConsentExpDate", null);
                    currRow.setAttribute("tranUploadedConsentStartDate", null);
                    currRow.setAttribute("tranUploadedConsentExpireDate", null);  
                }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching consent data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }
        return ret;
    }

    /**
     * Method to upload consent.
     */
    public void setUploadConsent() {
        try {
            ViewObject seafarerVO = getSeafarerIfaceView();
            Row currRow = seafarerVO.getCurrentRow();
            Integer seafarer_id = null;
            if (currRow.getAttribute("SeafarerId") != null) {
                seafarer_id = Integer.parseInt(currRow.getAttribute("SeafarerId").toString());
            }
            ViewObject online = getOnlineConsentBySeafarerIdView();
            online.setNamedWhereClauseParam("pSeafarerId", seafarer_id);
            online.executeQuery();
            
           String check = checkSeafarerNew();
            if(check.equalsIgnoreCase("old"))
            {            
            
            String firstname = "";
            String lastname = "";
            Date birthDate = null;
            String nationality = "";
            
            if (currRow.getAttribute("FirstName") != null) {
                firstname = currRow.getAttribute("FirstName").toString();
            }
            if (currRow.getAttribute("LastName") != null) {
                lastname = currRow.getAttribute("LastName").toString();
            }
            if (currRow.getAttribute("BirthDate") != null) {
                birthDate = (Date) currRow.getAttribute("BirthDate");
            }
            if (currRow.getAttribute("transNationality") != null) {
                nationality = currRow.getAttribute("transNationality").toString();
            }
               
            String finalName = firstname.concat(" ").concat(lastname);
            //                    System.out.println("FinalName:- "+finalName);
            //                System.out.println(birthDate);
            //                System.out.println(nationality);
//            Object stat = callStoredFunction(Types.VARCHAR, "rmi_seaf_consent_id(?,?,?)", new Object[] {
//                                             finalName, nationality, birthDate
//            });
                                          Object stat = callStoredFunction(Types.NUMERIC, "RMI_SICD_PUB.get_consent_id(?,?,?,?,?)", new Object[] {
                                             "SICD_SEAFARERS", seafarer_id, null,null,null
            });
                                System.out.println(stat.toString()+"----");
            Integer res = Integer.parseInt(stat.toString());
            if (res != 0) {
                currRow.setAttribute("tranConsentUploadedBoolean", "Uploaded");
                currRow.setAttribute("tranUploadButtonLabel", "Uploaded");
                findConsent();
            } else {
                currRow.setAttribute("tranConsentUploadedBoolean", "Not Uploaded");
                currRow.setAttribute("tranUploadButtonLabel", "Upload");
            }
            }
            else if(online.getRowCount() > 0)
            {                currRow.setAttribute("tranConsentUploadedBoolean", "Uploaded");
                currRow.setAttribute("tranUploadButtonLabel", "Uploaded");
                findConsent();
                
                }
            else
            {
                    currRow.setAttribute("tranConsentUploadedBoolean", "Not Uploaded");
                    currRow.setAttribute("tranUploadButtonLabel", "Upload");
                
                }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching consent data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }

    }


    /**
     * Method to get link of the document based on the edoc id.
     * @param edoc_id of the document.
     */
    public String getLinkForConsent(Integer edoc_id) {
        String ret = null;
        try {

            ViewObject linkVO = getGetDocumentLinkView();
            linkVO.setNamedWhereClauseParam("pEdocId", edoc_id);
            linkVO.executeQuery();
            //            System.out.println(linkVO.getRowCount()+"--------rowcount");
            if (linkVO.getRowCount() > 0) {
                Row row = linkVO.first();
                ret = row.getAttribute("DocLink").toString();
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return ret;
    }

    /**
     * Container's getter for ConsentDetailsRO1.
     * @return ConsentDetailsRO1
     */
    public ViewObjectImpl getConsentDetailsView() {
        return (ViewObjectImpl) findViewObject("ConsentDetailsView");
    }

    /**
     * Container's getter for BatchesRejectedRO1.
     * @return BatchesRejectedRO1
     */
    public ViewObjectImpl getBatchesRejectedView() {
        return (ViewObjectImpl) findViewObject("BatchesRejectedView");
    }


    /**
     * Method to resubmit batch and set required values in SeafarerIfaceView.
     */
    public void resubmit(Integer user_id) {
        try {
            sendResubmitEmail(user_id);


            ViewObject batchVo = getBatchIfaceView();
            Row row1 = batchVo.getCurrentRow();
            Integer batchId = null;
            if (row1.getAttribute("EsiBatchId") != null) {
                batchId = Integer.parseInt(row1.getAttribute("EsiBatchId").toString());
            }


            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.resubmit_batch(?,?)", new Object[] {
            //                 
            // rebatchId, user_id});
            resubmitDeficientWorkFlow(batchId, user_id);
            resubmitBatch(batchId, user_id);

            this.getTransaction().commit();

        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while submitting batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }
    
    public void resubmitDeficientWorkFlow(Integer batch_id , Integer user_id)
    {
        int correctedCount = 0;
        int totalCount = 0;
     ViewObject seafarer = getSeafarerIfaceView();
     RowSetIterator rit = seafarer.createRowSetIterator(null);
     while(rit.hasNext())
     {
      Row row = rit.next();   
     if(row.getAttribute("CorrectedFlag") != null)
     {
       if(row.getAttribute("CorrectedFlag").toString().equalsIgnoreCase("Y"))
       {
           correctedCount++;
           }
         
         }
             if(row.getAttribute("SeafarerWfStatus") != null)
             {
               if(row.getAttribute("SeafarerWfStatus").toString().equalsIgnoreCase("Rejected"))
               {
                   totalCount++;
                   }
                     if(row.getAttribute("SeafarerWfStatus").toString().equalsIgnoreCase("Unverified"))
                     {
                         totalCount++;
                         }  
                 }     
         }
        
        if(correctedCount == totalCount)
        {
                ViewObject wfView = getWorkFlowView();
                wfView.setNamedWhereClauseParam("pBatchId", batch_id);
                wfView.executeQuery();

                //            System.out.println(wfView.getRowCount());

                RowSetIterator createRowSetIterator = wfView.createRowSetIterator(null);

                while (createRowSetIterator.hasNext()) {
                    Row row = createRowSetIterator.next();
                    if (row.getAttribute("BatchStatus").toString().equalsIgnoreCase("Deficient")) {
                        row.setAttribute("LastUpdatedRow", "N");
                    }
                }       
            
            
            }
        
        }

    /**
     * Container's getter for BatchesProcessingCraRO1.
     * @return BatchesProcessingCraRO1
     */
    public ViewObjectImpl getBatchesProcessingCraView() {
        return (ViewObjectImpl) findViewObject("BatchesProcessingCraView");
    }
    
    public String validateCraLines()
    {
            ViewObject craVo = getBatchesProcessingCraView();
            //            System.out.println(craVo.getRowCount() + "-------rowcount");
            RowSetIterator rit = craVo.createRowSetIterator(null); 
            
            while (rit.hasNext()) {
                Row row = rit.next();
                String selected = "N";
                if (row.getAttribute("batchSelect") != null) {
            //                    System.out.println(row.getAttribute("batchSelect") + "---------1111");
                    selected = row.getAttribute("batchSelect").toString();
                
                if (selected.equalsIgnoreCase("Y") || selected.equalsIgnoreCase("true")) {
                    return "success";
                }
            }
        
        }
            return "error";
    }

    /**
     * Method to create cra batch.
     * @param user_id user id of the logged in user.
     */
    public void createcrabatch(Integer user_id) {
        //        System.out.println(user_id+"-------user_id");
        try {
            String origin = null;
            Integer esdi_id = null;
            Integer document_id = 0;
            String certificate_type = null;
            int req_count = 1;
                    String f_esdi_id = null;
            ViewObject craVo = getBatchesProcessingCraView();
//            System.out.println(craVo.getRowCount() + "-------rowcount");
            RowSetIterator rit = craVo.createRowSetIterator(null);
            while (rit.hasNext()) {
                Row row = rit.next();
                String selected = "N";
                if (row.getAttribute("batchSelect") != null) {
//                    System.out.println(row.getAttribute("batchSelect") + "---------1111");
                    selected = row.getAttribute("batchSelect").toString();
                }
                if (selected.equalsIgnoreCase("Y") || selected.equalsIgnoreCase("true")) {
                    if (row.getAttribute("Origin") != null) {
                        origin = row.getAttribute("Origin").toString();
                    }
                    if (row.getAttribute("EsdiId") != null) {
                        esdi_id = Integer.parseInt(row.getAttribute("EsdiId").toString());
                    }
                    if (row.getAttribute("DocumentId") != null) {
                        document_id = Integer.parseInt(row.getAttribute("DocumentId").toString());
                    }
                    if (row.getAttribute("CertificateType") != null) {
                        certificate_type = row.getAttribute("CertificateType").toString();
                    }
//                    System.out.println("--------------in the selected");
                    Integer[] itr = createCraProcessing(origin, esdi_id, document_id, certificate_type, user_id);
//                    System.out.println("-------111------");
//                    System.out.println(itr[0] + "--1");
//                    System.out.println(itr[1] + "--2");
//                    System.out.println(row + "------");
                    row.setAttribute("RequestId", itr[0]);
                    row.setAttribute("DocumentId", itr[1]);
                    if (req_count == 1) {
                        f_esdi_id = esdi_id.toString();
                    } else {
                        f_esdi_id = f_esdi_id.concat(",").concat(esdi_id.toString());
                    }

                    req_count++;
                }

            }
            String sentcra = (String) callStoredFunction(Types.VARCHAR, "rmi_seafarer.rmi_UPDATE_CRA_SENT_DATE(?)", new Object[] {
            f_esdi_id
            });
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while creating cra." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }
    }

    /**
     * Method to call RMI_SICD_PUB.rmi_create_cra db procedure.
     * @return request id and document id returned by the procedure
     */
    public Integer[] createCraProcessing(String p_origin, Integer esdi_id, Integer document_id, String certificate_type,
                                         Integer user_id) {
        Integer[] itr = { 0, 0 };
        CallableStatement st = null;
        try {
//            System.out.println("------1--------2--------3---");
//            System.out.println(p_origin + "-----" + esdi_id + "------" + document_id + "----" + certificate_type +
//                               "-------" + user_id + "-------user_id");
            String sql = "BEGIN RMI_SICD_PUB.rmi_create_cra(?,?,?,?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            st.setObject(1, p_origin); //MAIL SERVER
            st.setObject(2, esdi_id);
            st.setObject(3, document_id);
            st.setObject(4, certificate_type);
            st.setObject(5, user_id);
            //          st.registerOutParameter(3, Types.NUMERIC);
            st.registerOutParameter(6, Types.LONGVARCHAR); //OUT PARAM ERROR
            st.registerOutParameter(7, Types.LONGNVARCHAR);
            st.registerOutParameter(8, Types.NUMERIC);
            //            System.out.println(st.getObject(6));
            //            System.out.println(st.getObject(7));
            //            System.out.println(st.getObject(8));
            //            header_id = Integer.parseInt(st.getObject(4).toString());
            st.executeUpdate();
//            System.out.println(st.getObject(6));
//            System.out.println(st.getObject(7));
//            System.out.println(st.getObject(8));
            //                        System.out.println(st.getObject(3));
            Integer req = Integer.parseInt(st.getObject(8).toString());
            String docstring = st.getObject(3).toString();
            String ret = docstring.substring(0, docstring.indexOf("."));
//            System.out.println(ret + "-----ret");
            Integer doc = Integer.parseInt(ret);
//            System.out.println(req + "-------req");
            itr[0] = req;
            itr[1] = doc;
//            System.out.println(itr[0]);
//            System.out.println(itr[1]);

        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while creating cra." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();

        } finally {
            try 
            {
                if (st != null) {
                    st.close();
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }

        return itr;
    }
    
    /**
     * Method to set consent expiration_date based on start date
     */
    public void setConsentExpDate(Date startDate) {
        //        System.out.println(startDate+"----------startDate-1");
        ViewObject seafarerVO = getSeafarerIfaceView();
        Row currRow = seafarerVO.getCurrentRow();
        Date date2 = null;


        String strDate = startDate.toString();
        //            System.out.println("Date before Addition: "+strDate);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar c = Calendar.getInstance();
        try {
            //Setting the date to the given date
            c.setTime(sdf.parse(strDate));
            c.add(Calendar.YEAR, 5);
            c.add(Calendar.DATE, -1);
            String newDate = sdf.format(c.getTime());
            //                        System.out.println("Date after Addition: "+newDate);
            java.util.Date utdate = new SimpleDateFormat("yyyy-MM-dd").parse(newDate);
            java.sql.Date sqlDate = new java.sql.Date(utdate.getTime());
            date2 = new Date(sqlDate);
            //                        System.out.println(date2+"----date2");
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while setting consent date." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                                     e.printStackTrace();
        }


        //           System.out.println(date2+"--------date2--2");
        currRow.setAttribute("tranUploadedConsentExpireDate", date2);

    }

    /**
     * Method to delete current seafarer.
     */
    public void deleteSeafarer() {
        try {
            ViewObject ocVo = getSeafarerDocsOcView();
            RowSetIterator ritOc = ocVo.createRowSetIterator(null);
            while(ritOc.hasNext())
            {
              Row row = ritOc.next();
                row.remove();
                }
            ViewObject sqcVo = getSeafarerDocsSqcView();
            RowSetIterator ritSqc = sqcVo.createRowSetIterator(null);
            while(ritSqc.hasNext())
            {
              Row row = ritSqc.next();
                row.remove();
                }
            this.getDBTransaction().commit(); 
            ocVo.executeQuery();
            sqcVo.executeQuery();
            System.out.println(ocVo.getRowCount()+"-----11");
            System.out.println(sqcVo.getRowCount()+"-----11");
            ViewObject seaVO = getSeafarerIfaceView();
            Row currentRow = seaVO.getCurrentRow();
            currentRow.remove();
            seaVO.executeQuery();
            this.getDBTransaction().commit();
            if(seaVO.getRowCount() < 1)
            {
               Row row = seaVO.createRow();
               seaVO.insertRow(row);
               
            }
           
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while deleting seafarer." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }


    }


    public void deleteSingleSeafarer() 
    {
        ViewObject seafarer = getSeafarerIfaceView();
        RowSetIterator rit = seafarer.createRowSetIterator(null);
        while (rit.hasNext()) {
            Row row = rit.next();
            if (row.getAttribute("SeafarerId") == null) {
                row.remove();
            }
        }
        rit.closeRowSetIterator();
    }
    /**
     * Method to create oc line and set default data.
     * @param user_id user id of the logged in user.
     */
    public void addocLine(Integer user_id) {
        try {
//            System.out.println(user_id + "----user_id");
            ViewObject ocVo = getSeafarerDocsOcView();
            Row createRow = ocVo.createRow();
            createRow.setAttribute("CreatedBy", user_id);
            ocVo.insertRow(createRow);
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while adding new line." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }
    }


    /**
     * Method to create oc line and set default data.
     * @param user_id user id of the logged in user.
     */
    public void addsqcLine(Integer user_id) {
        try {
            ViewObject sqcVo = getSeafarerDocsSqcView();
            Row createRow = sqcVo.createRow();
            createRow.setAttribute("CreatedBy", user_id);
            sqcVo.insertRow(createRow);
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while adding new line." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
    }

    /**
     * Container's getter for UserListForAdminRO1.
     * @return UserListForAdminRO1
     */
    public ViewObjectImpl getUserListForAdminView() {
        return (ViewObjectImpl) findViewObject("UserListForAdminView");
    }


    /**
     * Method to filter data on Master my task page.
     * @param user_id user id of the logged in user.
     */
    public void onLoadMasterMytask(Integer user_id) {
        try {
            ViewObject masterVo = getUserListForAdminView();
            masterVo.setNamedWhereClauseParam("pUserId", user_id);
            masterVo.executeQuery();
        } catch (Exception e) {
//            addFormattedFacesErrorMessage("System encountered an exception while loading page." +
//                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
    }

    /**
     * Method to filter data on Master my task page.
     * @param user_id user id of the logged in user.
     */
    public void searchMasterMyTask() {
        try {
            ViewObject masterVo = getUserListForAdminView();
            Row row = masterVo.getCurrentRow();
            Integer user_id = Integer.parseInt(row.getAttribute("UserList").toString());
            System.out.println(user_id+"----user id");

            ViewObject mytask = getMyTaskMasterView();
            mytask.setNamedWhereClauseParam("pUserId", user_id);
            mytask.executeQuery();
//            System.out.println(mytask.getRowCount());
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while searching tasks." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }


    }

    /**
     * Method to send acknowledgement to agent.
     * call rmi_sicd_adf_pub.send_ack db function.
     */
    public void sendAcknowledgement() {
        ViewObject ackVo = getBatchesPendingTcPendingAckView();
        Row row = ackVo.getCurrentRow();
        Integer batch_id = Integer.parseInt(row.getAttribute("EsiBatchId").toString());
            CallableStatement st = null;
        //        System.out.println(batch_id+"-------batch_id");
        try {
            //                System.out.println("------1--------2--------3---");
            String sql = "BEGIN RMI_SICD_PUB.send_ack(?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            st.registerOutParameter(1, Types.VARCHAR); //OUT PARAM ERROR
            st.registerOutParameter(2, Types.VARCHAR);
            st.setObject(3, batch_id); //MAIL SERVER
            st.setObject(4, null);
            st.setObject(5, "N");
            //
            st.executeUpdate();

        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while sending acknowledgement." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                                e.printStackTrace();

        } finally {
            try 
            {
                if (st != null) {
                    st.close();
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }


    }
//    /**
//     * Method to create cra email body and attachment.
//     */
//    public void batchEmailCra(Integer p_user_id) {
//
//        Integer request_id = null;
//        String seafarer_name = null;
//        String outputFileName = null;
//        Integer esi_id = null;
//        Integer document_id = null;
//        Integer seafarer_id = null;
//        String email_re = null;
//        String email_message = null;
//        String senderEmailId = null;
//        String destinationEmailId = null;
//        Integer batch_id = null;
//        Integer DispensationId = null;
//        Integer v_header_id = null;
//        Integer comm_id = null;
//        Integer esdi_id = null;
//        String desti_cc = null;
////        Integer seafarer_id = null;
//        try {
//            ViewObject craVo = getBatchesProcessingCraView();
//            System.out.println(craVo.getRowCount() + "-------rowcount");
//            RowSetIterator rit = craVo.createRowSetIterator(null);
//            while (rit.hasNext()) {
//                Row row = rit.next();
//                String selected = "N";
//                if (row.getAttribute("batchSelect") != null) {
//                    System.out.println(row.getAttribute("batchSelect") + "---------1111");
//                    selected = row.getAttribute("batchSelect").toString();
//                }
//                if (selected.equalsIgnoreCase("Y")) {
//                    java.util.Date date = new java.util.Date();
//                    //This method returns the time in millis
//                    long timeMilli = date.getTime();
//                    System.out.println("Time in milliseconds using Date class: " + timeMilli);
//                    request_id = Integer.parseInt(row.getAttribute("RequestId").toString());
//                    seafarer_id = Integer.parseInt(row.getAttribute("SeafarerId").toString());
//                    
//                    //            request_id = 18961224;
//                    seafarer_name = row.getAttribute("SeafarerName").toString();
//                    //            seafarer_name ="Pawan Kathpal";
//                    String str = "CRA"+timeMilli+seafarer_id;
//                    String str1 = str.concat(".pdf");
//                    System.out.println(seafarer_name + "-------121212");
//                    System.out.println(request_id + "-----" + seafarer_name);
//                    ArrayList<String> al = new ArrayList();
//                    al.add(request_id.toString());
//                    CallableStatement st = null;
//                    String sql = "BEGIN pdf_meld_utils_pkg.meld_concurrent_request(?,?,?,?,?);END;";
//                    st = getDBTransaction().createCallableStatement(sql, 0);
//                    st.setObject(1, al); //MAIL SERVER
//                    st.setObject(2, str1);
//
//
//                    st.registerOutParameter(3, Types.NUMERIC); //OUT PARAM ERROR
//                    st.registerOutParameter(4, Types.VARCHAR);
//                    st.registerOutParameter(5, Types.VARCHAR);
//
//                    st.executeUpdate();
//
//                    System.out.println(st.getObject(3));
//                    System.out.println(st.getObject(4));
//                    System.out.println(st.getObject(5));
//                    outputFileName = st.getObject(5).toString();
//                    esi_id = Integer.parseInt(row.getAttribute("EsiId").toString());
//
//                    document_id = Integer.parseInt(row.getAttribute("DocumentId").toString());
//
//                    seafarer_id = Integer.parseInt(row.getAttribute("SeafarerId").toString());
//
//                    System.out.println(esi_id + "-----1---" + document_id + "---2-" + seafarer_id);
//
//                    SequenceImpl s = new SequenceImpl("id_header_id_seq", getDBTransaction());
//                    v_header_id = Integer.parseInt(s.getSequenceNumber().toString());
//
//                    ViewObject iriEdocHeaderVo = getIriEdocsHeaderView();
//                    Row createRow = iriEdocHeaderVo.createRow();
//                    createRow.setAttribute("IeHeaderId", v_header_id);
//                    createRow.setAttribute("SourceTable", "rmi_seafarer_docs_iface");
//                    createRow.setAttribute("SourceColumn", "ESI_ID");
//                    createRow.setAttribute("SourceId", esi_id);
//                    createRow.setAttribute("OutputFilename", outputFileName);
//                    iriEdocHeaderVo.insertRow(createRow);
//
//                    SequenceImpl s1 = new SequenceImpl("VSSL_DISPENSATIONS_SEQ", getDBTransaction());
//                    DispensationId = Integer.parseInt(s1.getSequenceNumber().toString());
//                    System.out.println(DispensationId + "----no");
//                    ViewObject disLetterLinkVo = getDispensationLetterLinksView();
//                    Row createRow1 = disLetterLinkVo.createRow();
//                    createRow1.setAttribute("SeafarerId", seafarer_id);
//                    createRow1.setAttribute("SicdDocumentId", document_id);
//                    createRow1.setAttribute("DispensationId", DispensationId);
//                    disLetterLinkVo.insertRow(createRow1);
//                    this.getDBTransaction().commit();
//
//                    st = null;
//                    sql = "BEGIN iri_letter.get_letter_text(?,?,?);END;";
//                    st = getDBTransaction().createCallableStatement(sql, 0);
//                    st.setObject(1, 137); //MAIL SERVER
//                    st.registerOutParameter(2, Types.VARCHAR); //OUT PARAM ERROR
//                    st.registerOutParameter(3, Types.VARCHAR);
//                    st.executeUpdate();
//                    System.out.println(st.getObject(2));
//                    System.out.println(st.getObject(3));
//
//                    email_re = st.getObject(3).toString();
//                    email_message = st.getObject(2).toString();
//
//    //                    sql = "BEGIN iri_letter.create_replacement_list(?,?,?,?);END;";
//                    sql = "BEGIN RMI_SICD_PUB.create_replacement_list(?,?,?,?,?);END;";
//                    st = getDBTransaction().createCallableStatement(sql, 0);
//                    st.setObject(1, DispensationId);
//                    st.setObject(2, 137);
//                    st.setObject(3, p_user_id);
//                    st.registerOutParameter(4, Types.VARCHAR); //OUT PARAM ERROR
//                    st.registerOutParameter(5, Types.VARCHAR);
//                    st.executeUpdate();
//                    System.out.println(st.getObject(4));
//                    System.out.println(st.getObject(5));
//
//                    System.out.println(DispensationId + "---------letter_id");
//
//                    String stat = (String) callStoredFunction(Types.VARCHAR, "iri_letter.process_replacements(?,?)", new Object[] {
//                                                              email_re, DispensationId
//                    });
//                    String stat1 = (String) callStoredFunction(Types.VARCHAR, "iri_letter.process_replacements(?,?)", new Object[] {
//                                                               email_message, DispensationId
//                    });
//                    System.out.println(stat + "----1");
//                    System.out.println(stat1 + "----2");
//                    ViewObject getmailVO = getGetEmailIdFromUserIdView();
//                    getmailVO.setNamedWhereClauseParam("pUserId", p_user_id);
//                    getmailVO.executeQuery();
//
//                    Row frow = getmailVO.first();
//                    senderEmailId = frow.getAttribute("EmailId").toString();
//                    batch_id = Integer.parseInt(row.getAttribute("EsiBatchId").toString());
//                    //                    ViewObject getmailVO1 = getGetAgentEmailIdFromBatchIdRO();
//                    //                    getmailVO1.setNamedWhereClauseParam("p_batch_id", batch_id);
//                    //                    getmailVO1.executeQuery();
//                    destinationEmailId = getToEmailId(batch_id);
//                    desti_cc = getccEmailid(batch_id);
//                    //                    if(getmailVO1.getRowCount() > 0)
//                    //                    {
//                    //                    Row currentRow = getmailVO1.first();
//                    //                    destinationEmailId = currentRow.getAttribute("EmailId").toString();
//                    //                    }
//                    SequenceImpl s2 = new SequenceImpl("VSSL_INSP_COMM_SEQ", getDBTransaction());
//                    comm_id = Integer.parseInt(s2.getSequenceNumber().toString());
//
//                    ViewObject vsslCommVO = getVsslInspCommView();
//                    Row creaRow = vsslCommVO.createRow();
//                    creaRow.setAttribute("CommId", comm_id);
//                    creaRow.setAttribute("HeaderId", v_header_id);
//                    creaRow.setAttribute("CreatedBy", p_user_id);
//                    creaRow.setAttribute("LastUpdatedBy", p_user_id);
//                    creaRow.setAttribute("LastUpdateLogin", 1000);
//                    creaRow.setAttribute("VesselPk", null);
//                    creaRow.setAttribute("SentTo", destinationEmailId);
//                    creaRow.setAttribute("Cc", desti_cc);
//                    creaRow.setAttribute("Regarding", stat);
//                    creaRow.setAttribute("Message", stat1);
//                    creaRow.setAttribute("EmailFrom", senderEmailId);
//
//                    vsslCommVO.insertRow(creaRow);
//
//                    sql = "BEGIN IRI_EMAIL_PKG.EMAIL_TABLE_CLEANUP(?);END;";
//                    st = getDBTransaction().createCallableStatement(sql, 0);
//                    st.setObject(1, comm_id);
//                    st.executeUpdate();
//
//                    esdi_id = Integer.parseInt(row.getAttribute("EsdiId").toString());
//
//                    String stat3 = (String) callStoredFunction(Types.VARCHAR, "rmi_seafarer.add_email_updates(?,?)", new Object[] {
//                                                               comm_id, esdi_id
//                    });
//
//                    this.getDBTransaction().commit();
//
//                    ViewObject emailDualVO = getCraMailDualView();
//                    Row rowFirst = emailDualVO.first();
//                    rowFirst.setAttribute("sender_mail", senderEmailId);
//                    rowFirst.setAttribute("dest_mail", destinationEmailId);
//                    rowFirst.setAttribute("dest_cc", desti_cc);
//                    rowFirst.setAttribute("comm_id", comm_id);
//                    rowFirst.setAttribute("output_file_name", outputFileName);
//                    rowFirst.setAttribute("regrading", stat);
//                    rowFirst.setAttribute("message", stat1);
//                    rowFirst.setAttribute("batch_id", batch_id);
//                }
//            }
//
//
//        } catch (Exception e) {
//            addFormattedFacesErrorMessage("System encountered an exception while creating cra email." +
//                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
//            e.printStackTrace();
//        }
//    }
    /**
     * Method to create cra email body and attachment.
     */
    public void batchEmailCra(Integer p_user_id) {
        Integer request_id = null;
        String seafarer_name = null;
        String outputFileName = null;
        Integer esi_id = null;
        Integer document_id = null;
        Integer seafarer_id = null;
        String email_re = null;
        String email_message = null;
        String senderEmailId = null;
        String destinationEmailId = null;
        Integer batch_id = null;
        Integer DispensationId = null;
        Integer v_header_id = null;
        Integer comm_id = null;
        Integer esdi_id = null;
        String desti_cc = null;
        String seafarer_list = null;
        String grade_name = null;
        String f_request_id = null;
        int req_count = 1;
        String f_esdi_id = null;
        CallableStatement st = null;
        try {
            
            printTmpLogs("Batch email method starts...."+new Timestamp(System.currentTimeMillis()));
            ViewObject craVo = getBatchesProcessingCraView();
//            System.out.println(craVo.getRowCount() + "-------rowcount");
            RowSetIterator rit = craVo.createRowSetIterator(null);
            while (rit.hasNext()) {
                Row row = rit.next();
                String selected = "N";
                if (row.getAttribute("batchSelect") != null) {
//                    System.out.println(row.getAttribute("batchSelect") + "---------1111");
                    selected = row.getAttribute("batchSelect").toString();
                }
                if (selected.equalsIgnoreCase("Y") || selected.equalsIgnoreCase("true")) {
                    esi_id = Integer.parseInt(row.getAttribute("EsiId").toString());

                    document_id = Integer.parseInt(row.getAttribute("DocumentId").toString());

                    seafarer_id = Integer.parseInt(row.getAttribute("SeafarerId").toString());
                    seafarer_name = row.getAttribute("SeafarerName").toString();
                    if(row.getAttribute("GradeName") != null)
                    {
                    grade_name = row.getAttribute("GradeName").toString();
                    }
                    batch_id = Integer.parseInt(row.getAttribute("EsiBatchId").toString());
                    request_id = Integer.parseInt(row.getAttribute("RequestId").toString());
                    esdi_id = Integer.parseInt(row.getAttribute("EsdiId").toString());
                    if(req_count == 1)
                    {
                    f_request_id = request_id.toString();
                            seafarer_list = seafarer_name+" - "+grade_name;
                            f_esdi_id = esdi_id.toString();
                        }
                    else
                    {
                            f_request_id = f_request_id.concat(",").concat(request_id.toString());
                            seafarer_list = seafarer_list.concat("  ").concat(seafarer_name+" - "+grade_name);
                           
                            f_esdi_id = f_esdi_id.concat(",").concat(esdi_id.toString());
                        }
                    //            request_id = 18961224;
                    req_count++;
                  String certificateType = "CRA";
                  if(row.getAttribute("CertificateType") != null)
                  {
                    certificateType = row.getAttribute("CertificateType").toString();  
                      }
                    
                   Integer v_category_id = null;
                   ViewObject categoryView = getGetCategoryIdByCertificateTypeView();
                   categoryView.setNamedWhereClauseParam("pCertificateType", certificateType);
                   categoryView.executeQuery();
                   if(categoryView.getRowCount() > 0)
                   {
                     Row frow = categoryView.first();
                     if(frow.getAttribute("CategoryId") != null)
                     {
                         
                             v_category_id = Integer.parseInt(frow.getAttribute("CategoryId").toString());    
                         }
                       
                       }
                   String outFileName = null;
                   if(request_id != null)
                   {
                     ViewObject outfileView = getGetOutfileNameByRequestView();
                     outfileView.setNamedWhereClauseParam("pRequestId", request_id);
                     outfileView.executeQuery();
                     
                     if(outfileView.getRowCount() > 0)
                     {
                        Row orow = outfileView.first();
                        if(orow.getAttribute("OutfileName") != null)
                        {
                           outFileName = orow.getAttribute("OutfileName").toString(); 
                            
                            }
                         
                         }
                       
                       }
                    printTmpLogs("calling..iri_edocs_pkg.add_file_to_edocs.."+new Timestamp(System.currentTimeMillis()));

                   System.out.println(outFileName+"----"+v_category_id+"---"+seafarer_id+"------new testing");
                    String newSql = "BEGIN iri_edocs_pkg.add_file_to_edocs(?,?,?,?);END;";
                    st = getDBTransaction().createCallableStatement(newSql, 0);
                    st.setObject(1, outFileName); //MAIL SERVER
                    st.setObject(2, v_category_id);
                    st.setObject(3, seafarer_id.toString());


                    st.registerOutParameter(4, Types.NUMERIC); //OUT PARAM ERROR
                    
                    st.executeUpdate();
                    
                    System.out.println(st.getObject(4)+"------hello");
                    printTmpLogs("iri_edocs_pkg.add_file_to_edocs. executed."+new Timestamp(System.currentTimeMillis()));

                }
            }
                   
                    //            seafarer_name ="Pawan Kathpal";
//            System.out.println(f_request_id+"-----frequest");
//            System.out.println(f_esdi_id+"-----fesdi_id");
                    String str = seafarer_name.replaceAll(" ", "_");
                    String str1 = str.concat(".pdf");
//                    System.out.println(seafarer_name + "-------121212");
//                    System.out.println(request_id + "-----" + seafarer_name);
                                printTmpLogs("iri_edocs_pkg.add_file_to_edocs. starting."+new Timestamp(System.currentTimeMillis()));

                    String sql = "BEGIN RMI_SICD_PUB.call_meld_conc_req(?,?,?,?,?);END;";
                    st = getDBTransaction().createCallableStatement(sql, 0);
                    st.setObject(1, f_request_id); //MAIL SERVER
                    st.setObject(2, str1);


                    st.registerOutParameter(3, Types.NUMERIC); //OUT PARAM ERROR
                    st.registerOutParameter(4, Types.VARCHAR);
                    st.registerOutParameter(5, Types.VARCHAR);

                    st.executeUpdate();
            printTmpLogs("iri_edocs_pkg.add_file_to_edocs. executed."+new Timestamp(System.currentTimeMillis()));

//                    System.out.println(st.getObject(3));
//                    System.out.println(st.getObject(4));
//                    System.out.println(st.getObject(5));
                    outputFileName = st.getObject(5).toString();
                    

//                    System.out.println(esi_id + "-----1---" + document_id + "---2-" + seafarer_id);
                                printTmpLogs("entering data to iri edocs header."+new Timestamp(System.currentTimeMillis()));

                    SequenceImpl s = new SequenceImpl("id_header_id_seq", getDBTransaction());
                    v_header_id = Integer.parseInt(s.getSequenceNumber().toString());

                    ViewObject iriEdocHeaderVo = getIriEdocsHeaderView();
                    Row createRow = iriEdocHeaderVo.createRow();
                    createRow.setAttribute("IeHeaderId", v_header_id);
                    createRow.setAttribute("SourceTable", "rmi_seafarer_docs_iface");
                    createRow.setAttribute("SourceColumn", "ESI_ID");
                    createRow.setAttribute("SourceId", esi_id);
                    createRow.setAttribute("OutputFilename", outputFileName);
                    iriEdocHeaderVo.insertRow(createRow);
            printTmpLogs("entering data to DispensationLetterLinks."+new Timestamp(System.currentTimeMillis()));

                    SequenceImpl s1 = new SequenceImpl("VSSL_DISPENSATIONS_SEQ", getDBTransaction());
                    DispensationId = Integer.parseInt(s1.getSequenceNumber().toString());
//                    System.out.println(DispensationId + "----no");
                    ViewObject disLetterLinkVo = getDispensationLetterLinksView();
                    Row createRow1 = disLetterLinkVo.createRow();
                    createRow1.setAttribute("SeafarerId", seafarer_id);
                    createRow1.setAttribute("SicdDocumentId", document_id);
                    createRow1.setAttribute("DispensationId", DispensationId);
                    disLetterLinkVo.insertRow(createRow1);
                    this.getDBTransaction().commit();

                    st = null;
            printTmpLogs("iri_letter.get_letter_text starting."+new Timestamp(System.currentTimeMillis()));

                    sql = "BEGIN iri_letter.get_letter_text(?,?,?);END;";
                    st = getDBTransaction().createCallableStatement(sql, 0);
                    st.setObject(1, 137); //MAIL SERVER
                    st.registerOutParameter(2, Types.VARCHAR); //OUT PARAM ERROR
                    st.registerOutParameter(3, Types.VARCHAR);
                    st.executeUpdate();
//                    System.out.println(st.getObject(2));
//                    System.out.println(st.getObject(3));

                    email_re = st.getObject(3).toString();
                    email_message = st.getObject(2).toString();
            printTmpLogs("iri_letter.get_letter_text executed."+new Timestamp(System.currentTimeMillis()));
//                    sql = "BEGIN iri_letter.create_replacement_list(?,?,?,?);END;";
                    sql = "BEGIN RMI_SICD_PUB.create_replacement_list(?,?,?,?,?);END;";
                    st = getDBTransaction().createCallableStatement(sql, 0);
                    st.setObject(1, DispensationId);
                    st.setObject(2, 137);
                    st.setObject(3, p_user_id);
                    st.registerOutParameter(4, Types.VARCHAR); //OUT PARAM ERROR
                    st.registerOutParameter(5, Types.VARCHAR);
                    st.executeUpdate();
//                    System.out.println(st.getObject(4));
//                    System.out.println(st.getObject(5));

//                    System.out.println(DispensationId + "---------letter_id");
  printTmpLogs("RMI_SICD_PUB.create_replacement_list executed."+new Timestamp(System.currentTimeMillis()));
                    String stat = (String) callStoredFunction(Types.VARCHAR, "iri_letter.process_replacements(?,?)", new Object[] {
                                                              email_re, DispensationId
                    });
                    String stat1 = (String) callStoredFunction(Types.VARCHAR, "iri_letter.process_replacements(?,?)", new Object[] {
                                                               email_message, DispensationId
                    });
            printTmpLogs("iri_letter.process_replacements executed."+new Timestamp(System.currentTimeMillis()));
//                    System.out.println(stat + "----1");
//                    System.out.println(stat1 + "----2");
                    
                    stat1 = stat1.concat(seafarer_list);
                    ViewObject getmailVO = getGetEmailIdFromUserIdView();
                    getmailVO.setNamedWhereClauseParam("pUserId", p_user_id);
                    getmailVO.executeQuery();

                    Row frow = getmailVO.first();
                    senderEmailId = frow.getAttribute("EmailId").toString();
            
            ViewObject officemail = getDefaultOfficeEmailAddressView();
            officemail.setNamedWhereClauseParam("pUserId", p_user_id);
            officemail.executeQuery();
            
            if(officemail.getRowCount() > 0)
            {
               Row offRow = officemail.first();
               String officeMailAddress = offRow.getAttribute("SicdEmail").toString();
                    desti_cc =officeMailAddress;
                }
                    
                    //                    ViewObject getmailVO1 = getGetAgentEmailIdFromBatchIdRO();
                    //                    getmailVO1.setNamedWhereClauseParam("p_batch_id", batch_id);
                    //                    getmailVO1.executeQuery();
                    destinationEmailId = getToEmailId(batch_id);
                    
                    //                    if(getmailVO1.getRowCount() > 0)
                    //                    {
                    //                    Row currentRow = getmailVO1.first();
                    //                    destinationEmailId = currentRow.getAttribute("EmailId").toString();
                    //                    }
                    SequenceImpl s2 = new SequenceImpl("VSSL_INSP_COMM_SEQ", getDBTransaction());
                    comm_id = Integer.parseInt(s2.getSequenceNumber().toString());

                    ViewObject vsslCommVO = getVsslInspCommView();
                    Row creaRow = vsslCommVO.createRow();
                    creaRow.setAttribute("CommId", comm_id);
                    creaRow.setAttribute("HeaderId", v_header_id);
                    creaRow.setAttribute("CreatedBy", p_user_id);
                    creaRow.setAttribute("LastUpdatedBy", p_user_id);
                    creaRow.setAttribute("LastUpdateLogin", 1000);
                    creaRow.setAttribute("VesselPk", null);
                    creaRow.setAttribute("SentTo", destinationEmailId);
                    creaRow.setAttribute("Cc", desti_cc);
                    creaRow.setAttribute("Regarding", stat);
                    creaRow.setAttribute("Message", stat1);
                    creaRow.setAttribute("EmailFrom", senderEmailId);

                    vsslCommVO.insertRow(creaRow);

                    sql = "BEGIN IRI_EMAIL_PKG.EMAIL_TABLE_CLEANUP(?);END;";
                    st = getDBTransaction().createCallableStatement(sql, 0);
                    st.setObject(1, comm_id);
                    st.executeUpdate();

                    

//                    String stat3 = (String) callStoredFunction(Types.VARCHAR, "rmi_seafarer.add_email_updates(?,?)", new Object[] {
//                                                               comm_id, esdi_id
//                    });

                    this.getDBTransaction().commit();

                    ViewObject emailDualVO = getCraMailDualView();
                    Row rowFirst = emailDualVO.first();
                    rowFirst.setAttribute("sender_mail", senderEmailId);
                    rowFirst.setAttribute("dest_mail", destinationEmailId);
                    rowFirst.setAttribute("dest_cc", desti_cc);
                    rowFirst.setAttribute("comm_id", comm_id);
                    rowFirst.setAttribute("output_file_name", outputFileName);
                    rowFirst.setAttribute("regrading", stat);
                    rowFirst.setAttribute("message", stat1);
                    rowFirst.setAttribute("batch_id", batch_id);
            rowFirst.setAttribute("esdiIdStr", f_esdi_id);
                
            


        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while creating cra email." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        } finally {
            try 
            {
                if (st != null) {
                    st.close();
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }
    }

    /**
     * Method send email to agent with cra data.
     */
    public void sendCRAMailButton() {
        try {
            String sender = null;
            String cc = null;
            String reg = null;
            Integer batch_id = null;
            String messagebody = null;
            ViewObject emailDualVO = getCraMailDualView();
            Row row = emailDualVO.getCurrentRow();
            Integer comm_id = Integer.parseInt(row.getAttribute("comm_id").toString());
            if(row.getAttribute("dest_mail") != null)
            {
             sender = row.getAttribute("dest_mail").toString();
            }
            if(row.getAttribute("dest_cc") != null)
            {
             cc = row.getAttribute("dest_cc").toString();
            }
            if(row.getAttribute("regrading") != null)
            {
             reg = row.getAttribute("regrading").toString();
            }
            if(row.getAttribute("message") != null)
            {
             messagebody = row.getAttribute("message").toString();
            }
            String fromMail = row.getAttribute("sender_mail").toString();
//            System.out.println(sender + "------sender");
            String outFileName = row.getAttribute("output_file_name").toString();
            String fes = row.getAttribute("esdiIdStr").toString();
//            String sentcra = (String) callStoredFunction(Types.VARCHAR, "rmi_seafarer.UPDATE_CRA_SENT_DATE(?)", new Object[] {
//            fes
//            });
            if (row.getAttribute("batch_id") != null) {
                batch_id = Integer.parseInt(row.getAttribute("batch_id").toString());

            }
//            System.out.println(comm_id + "------commid");
            String stat = (String) callStoredFunction(Types.VARCHAR, "rmi_seafarer.rmi_update_email_sender(?,?,?,?,?,?)", new Object[] {
                                                      comm_id, sender, cc ,reg , fromMail, messagebody
            });

            String stat3 = (String) callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.send_email_notif_attach(?,?)", new Object[] {
                                                       comm_id, outFileName
            });
//            System.out.println(batch_id + "------batch_id");
//            if (batch_id != null) {
//
//                ViewObject cracountVo = getGetCountCraForBatchView();
//                cracountVo.setNamedWhereClauseParam("pBatchId", batch_id);
//                cracountVo.executeQuery();
//
//                if (cracountVo.getRowCount() > 0) {
//                    //                                     System.out.println("in the if----");
//
//                    Row craRow = cracountVo.first();
//                    Integer craCount = Integer.parseInt(craRow.getAttribute("CountCra").toString());
//                    if (craCount == 0) {
//                        //                   System.out.println("count cra = 0----");
//                        //                        processTC(batch_id);
//                        processTradeComplianceAfterCraProcessing(batch_id);
//                    }
//                }
//
//            }

            ViewObject craVo = getBatchesProcessingCraView();
            craVo.executeQuery();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while sending email." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }


    }

    /**
     * Container's getter for IriEdocsHeaderVO1.
     * @return IriEdocsHeaderVO1
     */
    public ViewObjectImpl getIriEdocsHeaderView() {
        return (ViewObjectImpl) findViewObject("IriEdocsHeaderView");
    }

    /**
     * Container's getter for DispensationLetterLinksVO1.
     * @return DispensationLetterLinksVO1
     */
    public ViewObjectImpl getDispensationLetterLinksView() {
        return (ViewObjectImpl) findViewObject("DispensationLetterLinksView");
    }

    /**
     * Container's getter for VsslInspCommVO1.
     * @return VsslInspCommVO1
     */
    public ViewObjectImpl getVsslInspCommView() {
        return (ViewObjectImpl) findViewObject("VsslInspCommView");
    }

    /**
     * Container's getter for CraMailDualRO1.
     * @return CraMailDualRO1
     */
    public ViewObjectImpl getCraMailDualView() {
        return (ViewObjectImpl) findViewObject("CraMailDualView");
    }


    /**
     * Method to send email about the resubmission of the batch.
     */
    public void sendResubmitEmail(Integer p_user_id) {
        try {
            //            System.out.println("----1---");

            ViewObject workOrderVO = getWorkOrderDetailsView();
            Row woRow = workOrderVO.getCurrentRow();
            Integer woNumber = Integer.parseInt(woRow.getAttribute("OrderNumber").toString());
            String woStr = woRow.getAttribute("OrderNumber").toString();
//            System.out.println(woNumber + "---1");


            ViewObject batchVo = getBatchIfaceView();
            Row row = batchVo.getCurrentRow();
            String batch_name = row.getAttribute("BatchName").toString();
            String batch_date = row.getAttribute("BatchDate").toString();
//            System.out.println(batch_date + "----date");
            Date bt_date = (Date) row.getAttribute("BatchDate");
            java.sql.Date bt_date1 = (java.sql.Date) bt_date.dateValue();
//            System.out.println(bt_date1 + "----date1");
            SimpleDateFormat oldFormat = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date date = oldFormat.parse(bt_date1.toString());
            SimpleDateFormat newFormat = new SimpleDateFormat("dd-MMM-yyyy");

            Integer batch_id = Integer.parseInt(row.getAttribute("EsiBatchId").toString());
            String output = newFormat.format(date);
//            System.out.println(output + "----output");
//            String msg1 = (String) callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.get_deficent_message(?)", new Object[] {
//                                                      batch_id });
//
//            String[] split = msg1.split("new line");
//
//            //            System.out.println(split.length+"-----array length");
//            String message =
//                "The order for seafarers documents with the Order Number " + woStr + " and batch name " + batch_name +
//                " dated " + output + " has been corrected and resubmitted to you by the " +
//                "External Agent for the below items.\n";
//            StringBuilder message11 = new StringBuilder("<html><body>");
//            message11.append("<p><b>" + "The order for seafarers documents with the order name of " + batch_name +
//                             " dated " + bt_date1 + " has been corrected and resubmitted to you by the " +
//                             "External Agent for the correction of the following information in the order." +
//                             "</b></p>");
//
//            for (int i = 0; i < split.length; i++) {
//                message = message.concat("\n" + split[i] + "\n");
//                //            message.add(split[i]);
//            }


            //   System.out.println(message+"---message");

            ViewObject getmailVO = getGetEmailIdFromUserIdView();
            getmailVO.setNamedWhereClauseParam("pUserId", p_user_id);
            getmailVO.executeQuery();

            Row frow = getmailVO.first();
            String senderEmailId = frow.getAttribute("EmailId").toString();

//            SequenceImpl s2 = new SequenceImpl("VSSL_INSP_COMM_SEQ", getDBTransaction());
//            Integer comm_id = Integer.parseInt(s2.getSequenceNumber().toString());
//            //            System.out.println("-------333----");
//            ViewObject vsslCommVO = getVsslInspCommView();
//            Row creaRow = vsslCommVO.createRow();
//            creaRow.setAttribute("CommId", comm_id);
//            creaRow.setAttribute("HeaderId", 00);
//            creaRow.setAttribute("CreatedBy", p_user_id);
//            creaRow.setAttribute("LastUpdatedBy", p_user_id);
//            creaRow.setAttribute("LastUpdateLogin", 1000);
//            creaRow.setAttribute("VesselPk", null);
//            creaRow.setAttribute("SentTo", "Seafarers@register-iri.com");
//            creaRow.setAttribute("Cc", "akanksha.thakur@qspear.com,gaurav.wadhwa@qspear.com");
//            creaRow.setAttribute("Regarding", "Marshall Islands Seafarers Documents - Deficient Documents");
//            creaRow.setAttribute("Message", message);
//            creaRow.setAttribute("EmailFrom", senderEmailId);
//
//            vsslCommVO.insertRow(creaRow);
            //            System.out.println("-------444----");

//            this.getDBTransaction().commit();
            //            System.out.println("-------555----");

            //            System.out.println(comm_id+"------comm_id");
//            String stat3 = (String) callStoredFunction(Types.VARCHAR, "FN_SEND_EMAIL_NOTIF_ATTACH(?,?)", new Object[] {
//                                                       comm_id, null
//            });
            String stat3 = (String) callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.send_notice_return(?,?,?,?)", new Object[] {
                                                       batch_id,woStr,"sender",p_user_id});
        }catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while sending email." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }
    }

    /**
     * Container's getter for GetCountCraForBatchRO1.
     * @return GetCountCraForBatchRO1
     */
    public ViewObjectImpl getGetCountCraForBatchView() {
        return (ViewObjectImpl) findViewObject("GetCountCraForBatchView");
    }

    /**
     * Method to add 5 years to the date.
     * @param issue date selected.
     */
    public Date getNewDate(Date issueDate) {
        if(issueDate != null)
        {
        String strDate = issueDate.toString();
        Date lastDate = null;
        //            System.out.println("Date before Addition: "+strDate);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar c = Calendar.getInstance();
        try {
            //Setting the date to the given date
            c.setTime(sdf.parse(strDate));
            c.add(Calendar.YEAR, 5);
            c.add(Calendar.DATE, -1);
            String newDate = sdf.format(c.getTime());
            //                        System.out.println("Date after Addition: "+newDate);
            java.util.Date utdate = new SimpleDateFormat("yyyy-MM-dd").parse(newDate);
            java.sql.Date sqlDate = new java.sql.Date(utdate.getTime());
            lastDate = new Date(sqlDate);
            //                        System.out.println(lastDate+"----date2");
        }            catch (Exception e) {
            //            addFormattedFacesErrorMessage("System encountered an exception while processing." +
            //                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                                                 e.printStackTrace();
                    }
            return lastDate;
        }
            
           


        return null;

    }

    /**
     * Method to all the mandatory field should be entered.
     */
    public String checkValidationBeforeSave() {

        try {
            ViewObject batchVo = getBatchIfaceView();
            Row currRow = batchVo.getCurrentRow();
            if (currRow.getAttribute("tranCustAccountDeliverToName") == null ||
                currRow.getAttribute("tranDeliverToSuAddress") == null ||
                currRow.getAttribute("tranCustAccountBillToName") == null ||
                currRow.getAttribute("tranBillToSuAddress") == null ||
                currRow.getAttribute("tranCustAccountShipToName") == null ||
                currRow.getAttribute("tranShipToSuAddress") == null || currRow.getAttribute("VesselNames") == null) {
                return "false";
            }
            else {
                Integer custAcc = null;
                String purNumber = null;
                Integer esiBatchId = null;
                if(currRow.getAttribute("DeliverToCustAccountId") != null && currRow.getAttribute("PurchaseOrderNumber") != null && currRow.getAttribute("EsiBatchId") != null)
                {
                    custAcc = Integer.parseInt(currRow.getAttribute("DeliverToCustAccountId").toString());
                    purNumber = currRow.getAttribute("PurchaseOrderNumber").toString();
                        esiBatchId = Integer.parseInt(currRow.getAttribute("EsiBatchId").toString());
                        ViewObject batchCount = getGetBatchCountByPurchaseNumberView();
                        batchCount.setNamedWhereClauseParam("pPurchaseNumber", purNumber);
                        batchCount.setNamedWhereClauseParam("pCustAccountId", custAcc);
                        batchCount.setNamedWhereClauseParam("pEsiBatchId", esiBatchId);
                        batchCount.executeQuery();
                        Row row = batchCount.first();
                        Integer count = Integer.parseInt(row.getAttribute("BatchCount").toString());
                        if(count  > 0)
                        {
                          return "repeat";  
                            }
                    
                    }
                
                
                }
                
            return "true";
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while validating data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }
        return "false";
    }

    /**
     * Container's getter for BatchesPendingEvalCraRO1.
     * @return BatchesPendingEvalCraRO1
     */
    public ViewObjectImpl getBatchesPendingEvalCraView() {
        return (ViewObjectImpl) findViewObject("BatchesPendingEvalCraView");
    }


    /**
     * Container's getter for BatchesPendingTcResubmittedRO1.
     * @return BatchesPendingTcResubmittedRO1
     */
    public ViewObjectImpl getBatchesPendingTcResubmittedView() {
        return (ViewObjectImpl) findViewObject("BatchesPendingTcResubmittedView");
    }

    /**
     * Method to validate end date should not be less than start date.
     * @param end date selected.
     */
    public String checkDateValidate(Date endDate) {
        try {
            ViewObject ocVO = getSeafarerDocsOcView();
            Row row = ocVO.getCurrentRow();
            java.sql.Date stSqlDate = null;
            if (row.getAttribute("CocIssueDate") != null) {
                Date startDate = (Date) row.getAttribute("CocIssueDate");
                //      System.out.println(startDate+"-----"+endDate);
                stSqlDate = startDate.dateValue();


                //          System.out.println(endDate.dateValue().before(stSqlDate));
                if (endDate.dateValue().before(stSqlDate)) {
                    return "true";
                }
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while validating data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

        return "false";
    }

    /**
     * Method to validate end date should not be less than start date.
     * @param end date selected.
     */
    public String checkDateValidateSqc(Date endDate) {
        try {
            ViewObject sqcVO = getSeafarerDocsSqcView();
            Row row = sqcVO.getCurrentRow();
            java.sql.Date stSqlDate = null;
            if (row.getAttribute("CocIssueDate") != null) {
                Date startDate = (Date) row.getAttribute("CocIssueDate");
                //      System.out.println(startDate+"-----"+endDate);
                stSqlDate = startDate.dateValue();
                //          System.out.println(endDate.dateValue().before(stSqlDate));
                if (endDate.dateValue().before(stSqlDate)) {
                    return "true";
                }
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while validating data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

        return "false";
    }

    /**
     * Method to reset city column when residece country value gets changed.
     */
    public void resetCity() {
        try {
            //            System.out.println("----in AM");
            ViewObject seaVo = getSeafarerIfaceView();
            Row row = seaVo.getCurrentRow();
            row.setAttribute("tranCity", null);
            row.setAttribute("WcCityListId", null);
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while processing." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
    }

    /**
     * Container's getter for CustAccountDeliverToLOV1.
     * @return CustAccountDeliverToLOV1
     */
    public CustAccountDeliverToViewImpl getDeliverToCustAccountsView() {
        return (CustAccountDeliverToViewImpl) findViewObject("DeliverToCustAccountsView");
    }

    /**
     * Container's getter for CustAccountBillToSuLOV1.
     * @return CustAccountBillToSuLOV1
     */
    public ViewObjectImpl getCustAccountBillToSuView() {
        return (ViewObjectImpl) findViewObject("CustAccountBillToSuView");
    }

    /**
     * Container's getter for CustAccountDeliverToSuLOV1.
     * @return CustAccountDeliverToSuLOV1
     */
    public ViewObjectImpl getCustAccountDeliverToSuView() {
        return (ViewObjectImpl) findViewObject("CustAccountDeliverToSuView");
    }

    /**
     * Container's getter for CustAccountShipToSuLOV1.
     * @return CustAccountShipToSuLOV1
     */
    public ViewObjectImpl getCustAccountShipToSuView() {
        return (ViewObjectImpl) findViewObject("CustAccountShipToSuView");
    }

    /**
     * Method to get  email id of the agent from customer contact table.
     * @param batch_id batch id of the current batch.
     */
    public String getToEmailId(Integer batch_id) {
        System.out.println(batch_id +"----batchId");
        String emailId = "";
        try {
//            ViewObject userTypeRo = getGetUserIdUserTypeByBatchIdView();
//            userTypeRo.setNamedWhereClauseParam("pBatchId", batch_id);
//            userTypeRo.executeQuery();
//            if (userTypeRo.getRowCount() > 0) {
//                 row = userTypeRo.first();
//                String userType = row.getAttribute("UserType").toString();
//                System.out.println(userType + "----");
//                if (userType.equalsIgnoreCase("Internal")) {
//                   
//
//
//                }
                ViewObject orderingRo = getGetOrderingAgentEmaildByBatchIdView();
                orderingRo.setNamedWhereClauseParam("pBatchId", batch_id);
                orderingRo.executeQuery();
                if (orderingRo.getRowCount() > 0) {
                  Row  row = orderingRo.first();
                    if (row.getAttribute("OrderingAgentEmailId") != null) {
                        String em = row.getAttribute("OrderingAgentEmailId").toString();
                        emailId = em;
                    }
                }
//                else {
//
//                ViewObject contact = getContactIdByBatchIdView();
//                                    contact.setNamedWhereClauseParam("pBatchId", batch_id);
//                                    contact.executeQuery();
//                             if(contact.getRowCount() > 0)
//                             {
//                   Row crow = contact.first();
//                                    if (crow.getAttribute("AppsCustContactId") != null) {
//                                        Integer contId = Integer.parseInt(crow.getAttribute("AppsCustContactId").toString());
//                                        ViewObject otpRo = getGetOtpEmailByContactIdView();
//                                        otpRo.setNamedWhereClauseParam("pContactId", contId);
//                                        otpRo.executeQuery();
//                                        if (otpRo.getRowCount() > 0) {
//                                            Row frow = otpRo.first();
//                                            if (frow.getAttribute("EmailAddress") != null) {
//                                                String otpemail = frow.getAttribute("EmailAddress").toString();
//                                                emailId = otpemail;
//
//                                            }
//
//
//                                        }
//                                    }
//                             }
//
//
//                                }
            }
        catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching email id." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        //        System.out.println(emailId+"------emailID");
        return emailId;

    }


    /**
     * Method to get cra email id of the agent from customer contact table.
     * @param batch_id batch id of the current batch.
     */
    public String getccEmailid(Integer batch_id) {
        String ccEmail = "";
        try {
            ViewObject userTypeRo = getGetUserIdUserTypeByBatchIdView();
            userTypeRo.setNamedWhereClauseParam("pBatchId", batch_id);
            userTypeRo.executeQuery();
            if (userTypeRo.getRowCount() > 0) {
                Row row = userTypeRo.first();
                String userType = row.getAttribute("UserType").toString();
                //                System.out.println(userType + "----");
//                if (userType.equalsIgnoreCase("External")) {
//                    if (row.getAttribute("AppsContactId") != null) {
//                        Integer contId = Integer.parseInt(row.getAttribute("AppsContactId").toString());
//                        ViewObject craRo = getGetCraEmailIdByContactIdView();
//                        craRo.setNamedWhereClauseParam("pContactId", contId);
//                        craRo.executeQuery();
//                        if (craRo.getRowCount() > 0) {
//                            Row frow = craRo.first();
//                            if (frow.getAttribute("CraEmailAddress") != null) {
//                                String craemail = frow.getAttribute("CraEmailAddress").toString();
//                                ccEmail = craemail;
//
//                            }
//                        }
//                    }
//                }
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching email id." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return ccEmail;
    }


    /**
     * Container's getter for GetUserIdUserTypeByBatchIdRO1.
     * @return GetUserIdUserTypeByBatchIdRO1
     */
    public ViewObjectImpl getGetUserIdUserTypeByBatchIdView() {
        return (ViewObjectImpl) findViewObject("GetUserIdUserTypeByBatchIdView");
    }

    /**
     * Container's getter for GetOrderingAgentEmaildByBatchIdRO1.
     * @return GetOrderingAgentEmaildByBatchIdRO1
     */
    public ViewObjectImpl getGetOrderingAgentEmaildByBatchIdView() {
        return (ViewObjectImpl) findViewObject("GetOrderingAgentEmaildByBatchIdView");
    }

    /**
     * Container's getter for GetOtpEmailByContactIdRO1.
     * @return GetOtpEmailByContactIdRO1
     */
    public ViewObjectImpl getGetOtpEmailByContactIdView() {
        return (ViewObjectImpl) findViewObject("GetOtpEmailByContactIdView");
    }

    /**
     * Container's getter for GetCraEmailIdByContactIdRO1.
     * @return GetCraEmailIdByContactIdRO1
     */
    public ViewObjectImpl getGetCraEmailIdByContactIdView() {
        return (ViewObjectImpl) findViewObject("GetCraEmailIdByContactIdView");
    }


    /**
     * Method to check if seafarer is new , set default values.
     */
    public String existsSeafarer() {
        try {
            ViewObject seafarerVo = getSeafarerIfaceView();
            Row currRow = seafarerVo.getCurrentRow();
            String first_name = null;
            String last_name = null;
            String nationality = null;
            Date date_of_birth = null;
            String country = null;
            Integer city = null;
            String seafarer_id = null;
            if (currRow.getAttribute("FirstName") != null) {
                first_name = currRow.getAttribute("FirstName").toString();
            }
            if (currRow.getAttribute("LastName") != null) {
                last_name = currRow.getAttribute("LastName").toString();
            }
            if (currRow.getAttribute("Nationality") != null) {
                nationality = currRow.getAttribute("Nationality").toString();
            }
            if (currRow.getAttribute("BirthDate") != null) {
                date_of_birth = (Date) currRow.getAttribute("BirthDate");
            }
            if (currRow.getAttribute("ResidenceCountryCode") != null) {
                country = currRow.getAttribute("ResidenceCountryCode").toString();
            }
            if (currRow.getAttribute("SeafarerId") != null) {
                seafarer_id = currRow.getAttribute("SeafarerId").toString();
            }
            ViewObject searchVo = getSeafarerChekView();
            searchVo.setNamedWhereClauseParam("pSeafarerId", seafarer_id);
            searchVo.executeQuery();
            if (searchVo.getRowCount() == 0) {
                String issueType = null;
                String issueTypeIdCard = null;
                if (currRow.getAttribute("IssueType") != null) {
                    issueType = currRow.getAttribute("IssueType").toString();
                }

                if (!issueType.equalsIgnoreCase("New"))

                {
                    return "error";
                }
            }
            
            System.out.println("gender :: "+currRow.getAttribute("Gender"));
            
            if (currRow.getAttribute("Gender") == null || currRow.getAttribute("BirthDate") == null || currRow.getAttribute("LastName") == null ||
                currRow.getAttribute("PassportIssuingCountryCode") == null || currRow.getAttribute("PermanentAddress") == null  ||
            currRow.getAttribute("ResidenceCountryCode") == null || currRow.getAttribute("VesselPk") == null ||
            currRow.getAttribute("Nationality") == null) {
                return "permanent";
            }
            if (country != null) {
                if (country.equalsIgnoreCase("RUSS") || country.equalsIgnoreCase("UKRA")) {
                    if (!(currRow.getAttribute("WcCityListId") != null)) {
                        return "city";

                    }

                }

            }
            String grade = checkOcSQCGradeMandatory();
            if(!grade.equalsIgnoreCase("success"))
            {
               return grade; 
                }
            
        } catch (Exception e) {
//            addFormattedFacesErrorMessage("System encountered an exception while validating seafarer data." +
//                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

        return "sucess";
    }

public String checkOcSQCGradeMandatory()
{
    ViewObject oc = getSeafarerDocsOcView();
    RowSetIterator ocrit = oc.createRowSetIterator(null);
    while(ocrit.hasNext())
    {
       Row row = ocrit.next();
       if(row.getAttribute("tranGradeCode") == null)
       {
         return "ocgrade";  
           }
        
        }
        ViewObject sqc = getSeafarerDocsSqcView();
        RowSetIterator sqcrit = sqc.createRowSetIterator(null);
        while(sqcrit.hasNext())
        {
           Row row = sqcrit.next();
           if(row.getAttribute("tranGradeCode") == null)
           {
             return "sqcgrade";  
               }
            
            }
    
    return "success";
    }

public String seafarerValidationMessage()
{
    String ret = null;
    int count = 0;
        ViewObject seafarerVo = getSeafarerIfaceView();
        Row currRow = seafarerVo.getCurrentRow(); 
    if(currRow.getAttribute("BirthDate") == null)
    {
       if(count == 0)
       {
         ret = "Date Of Birth";  
           }
       else
       {
          ret = ret+", Date Of Birth"; 
           }
       count++;
        }
    
    System.out.println("Gender :: "+currRow.getAttribute("Gender"));
    
        if(currRow.getAttribute("Gender") == null)
        {
           if(count == 0)
           {
             ret = "Gender";  
               }
           else
           {
              ret = ret+", Gender"; 
               }
           count++;
            }
        if(currRow.getAttribute("LastName") == null)
        {
           if(count == 0)
           {
             ret = "Last Name";  
               }
           else
           {
              ret = ret+", Last Name"; 
               }
           count++;
            }
        if(currRow.getAttribute("PassportIssuingCountryCode") == null)
        {
           if(count == 0)
           {
             ret = "Passport Issuing Country";  
               }
           else
           {
              ret = ret+", Passport Issuing Country"; 
               }
           count++;
            }
        if(currRow.getAttribute("PermanentAddress") == null)
        {
           if(count == 0)
           {
             ret = "Permanent Address";  
               }
           else
           {
              ret = ret+", Permanent Address"; 
               }
           count++;
            }
        if(currRow.getAttribute("Nationality") == null)
        {
           if(count == 0)
           {
             ret = "Citizenship";  
               }
           else
           {
              ret = ret+", Citizenship"; 
               }
           count++;
            }
        if(currRow.getAttribute("ResidenceCountryCode") == null)
        {
           if(count == 0)
           {
             ret = "Residence Country";  
               }
           else
           {
              ret = ret+", Residence Country"; 
               }
           count++;
            }
        if(currRow.getAttribute("VesselPk") == null)
        {
           if(count == 0)
           {
             ret = "Vessel Name";  
               }
           else
           {
              ret = ret+", Vessel Name"; 
               }
           count++;
            }
        ret = "Please enter "+ret+" before saving.";
    return ret;
    }


    /**
     * Container's getter for SeafarerSearchRO1.
     * @return SeafarerSearchRO1
     */
    public ViewObjectImpl getSeafarerSearchView() {
        return (ViewObjectImpl) findViewObject("SeafarerSearchView");
    }

    /**
     * Container's getter for OrderingAgentEmailIdLOV1.
     * @return OrderingAgentEmailIdLOV1
     */
    public ViewObjectImpl getOrderingAgentEmailIdView() {
        return (ViewObjectImpl) findViewObject("OrderingAgentEmailIdView");
    }

    /**
     * Container's getter for AccountStatusRO1.
     * @return AccountStatusRO1
     */
    public ViewObjectImpl getAccountStatusView() {
        return (ViewObjectImpl) findViewObject("AccountStatusView");
    }

    /**
     * Container's getter for BatchesPendingAsbRO1.
     * @return BatchesPendingAsbRO1
     */
    public ViewObjectImpl getBatchesPendingAsbView() {
        return (ViewObjectImpl) findViewObject("BatchesPendingAsbView");
    }

    /**
     * Container's getter for GetBatchWorkflowStatusView1.
     * @return GetBatchWorkflowStatusView1
     */
    public ViewObjectImpl getGetBatchWorkflowStatusView() {
        return (ViewObjectImpl) findViewObject("GetBatchWorkflowStatusView");
    }

    /**
     * Container's getter for WorkFlowView1.
     * @return WorkFlowView1
     */
    public WorkFlowViewImpl getWorkFlowView() {
        return (WorkFlowViewImpl) findViewObject("WorkFlowView");
    }


    /**
     * Method to assign a batch to current user.
     * @param p_batch_id batch id of the current batch.
     * @param p_user_id user id of the logged in user.
     */
    public void assignTaskToCurrentUser(Integer p_batch_id, Integer p_user_id, String p_batch_status) {
        try {
            //            ViewObject wfStatus = getGetBatchWorkflowStatusView();
            //            wfStatus.setNamedWhereClauseParam("pBatchId", p_batch_id);
            //            wfStatus.executeQuery();

            //            String p_batch_status = null;

            //            if (wfStatus.getRowCount() > 0) {
            //                Row fRow = wfStatus.first();
            //                if (fRow.getAttribute("BatchStatus") != null) {
            //                    p_batch_status = fRow.getAttribute("BatchStatus").toString();
            //                }
            //            }

            ViewObject wfView = getWorkFlowView();
            wfView.setNamedWhereClauseParam("pBatchId", p_batch_id);
            wfView.executeQuery();

            //            System.out.println(wfView.getRowCount());

            RowSetIterator createRowSetIterator = wfView.createRowSetIterator(null);

            while (createRowSetIterator.hasNext()) {
                Row row = createRowSetIterator.next();
                if (row.getAttribute("BatchStatus").toString().equalsIgnoreCase(p_batch_status)) {
                    row.setAttribute("LastUpdatedRow", "N");
                }
            }

            Row createRow = wfView.createRow();
            createRow.setAttribute("EsiBatchId", p_batch_id);
            createRow.setAttribute("AssignedTo", p_user_id);
            createRow.setAttribute("BatchStatus", p_batch_status);
            createRow.setAttribute("LastUpdatedRow", "Y");
            wfView.insertRow(createRow);

            this.getDBTransaction().commit();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while assigning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
    }


    /**
     * Method to return assigned batch to queue.
     * @param p_batch_id batch id of the current batch.
     */
    public void returnBatchToQueue(Integer p_batch_id) {
        String Role_name = ADFContext.getCurrent().getSessionScope().get("RoleName").toString();
//        System.out.println(Role_name);
        
        String st = null;
        if (Role_name.equalsIgnoreCase("INTERNAL AGENT - II")) {
            st = "Pending_upload_document";
        }
        if (Role_name.equalsIgnoreCase("PROCESSOR - I")) {
            st = "Pending_TC";
        }
        if (Role_name.equalsIgnoreCase("EVALUATOR")) {
            st = "Pending_VAL";
        }
        if (Role_name.equalsIgnoreCase("QA PROCESSOR")) {
            st = "Pending_QA";
        }
        if (Role_name.equalsIgnoreCase("SHIPPING USER")) {
            st = "Pending_Shipping";
        }
        if (Role_name.equalsIgnoreCase("PROCESSOR - II")) {
            st = "Pending_ABN";
        }
        if (Role_name.equalsIgnoreCase("TRADE COMPLIANCE PROCESSOR")) {
            st = "Pending_MTC";
        }
        if (Role_name.equalsIgnoreCase("ASSIGN TRACKING NUMBER")) {
            st = "Closed";
        }
//        System.out.println(st);

        try {
//            ViewObject wfStatus = getGetBatchWorkflowStatusView();
//            wfStatus.setNamedWhereClauseParam("pBatchId", p_batch_id);
//            wfStatus.executeQuery();
//
//            String p_batch_status = null;
//
//            if (wfStatus.getRowCount() > 0) {
//                Row fRow = wfStatus.first();
//                if (fRow.getAttribute("BatchStatus") != null) {
//                    p_batch_status = fRow.getAttribute("BatchStatus").toString();
//                }
//            }
//
            ViewObject wfView = getWorkFlowView();
            wfView.setNamedWhereClauseParam("pBatchId", p_batch_id);
            wfView.executeQuery();

//            //            System.out.println(wfView.getRowCount());

            RowSetIterator createRowSetIterator = wfView.createRowSetIterator(null);

            while (createRowSetIterator.hasNext()) {
                Row row = createRowSetIterator.next();
                if(row.getAttribute("BatchStatus").toString().equalsIgnoreCase(st))
                {
                row.setAttribute("LastUpdatedRow", "N");
                }

            }

            Row createRow = wfView.createRow();
            createRow.setAttribute("EsiBatchId", p_batch_id);
            createRow.setAttribute("BatchStatus", st);
            createRow.setAttribute("LastUpdatedRow", "Y");
            wfView.insertRow(createRow);

            this.getDBTransaction().commit();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while returning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }


    }
    
    
    /**
     * Method to return assigned batch to queue.
     * @param p_batch_id batch id of the current batch.
     */
    public void returnMasterBatchToQueue(Integer p_batch_id,String status) {
//        String Role_name = ADFContext.getCurrent().getSessionScope().get("RoleName").toString();
//        System.out.println(Role_name);
        
       
        
        
        System.out.println(status);

        try {
    //            ViewObject wfStatus = getGetBatchWorkflowStatusView();
    //            wfStatus.setNamedWhereClauseParam("pBatchId", p_batch_id);
    //            wfStatus.executeQuery();
    //
    //            String p_batch_status = null;
    //
    //            if (wfStatus.getRowCount() > 0) {
    //                Row fRow = wfStatus.first();
    //                if (fRow.getAttribute("BatchStatus") != null) {
    //                    p_batch_status = fRow.getAttribute("BatchStatus").toString();
    //                }
    //            }
    //
            ViewObject wfView = getWorkFlowView();
            wfView.setNamedWhereClauseParam("pBatchId", p_batch_id);
            wfView.executeQuery();

    //            //            System.out.println(wfView.getRowCount());

            RowSetIterator createRowSetIterator = wfView.createRowSetIterator(null);

            while (createRowSetIterator.hasNext()) {
                Row row = createRowSetIterator.next();
                if(row.getAttribute("BatchStatus").toString().equalsIgnoreCase(status))
                {
                row.setAttribute("LastUpdatedRow", "N");
                }

            }

            Row createRow = wfView.createRow();
            createRow.setAttribute("EsiBatchId", p_batch_id);
            createRow.setAttribute("BatchStatus", status);
            createRow.setAttribute("LastUpdatedRow", "Y");
            wfView.insertRow(createRow);

            this.getDBTransaction().commit();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while returning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }


    }

    /**
     * Method to assign batch to other region.
     * @param p_batch_id batch id of the current batch.
     * @param p_region_id region id of the region to which batch to be assigned.
     */
    public void assignBatchToSelectedRegion(Integer p_batch_id, Integer p_region_id) {
        try {
            ViewObject batchIfaceView = getBatchIfaceView();
            batchIfaceView.setWhereClause("esi_batch_id =" + p_batch_id);
            batchIfaceView.executeQuery();

            //            System.out.println(batchIfaceView.getRowCount() + "---");

            Row frow = batchIfaceView.first();

            frow.setAttribute("BatchAssignedToRegion", p_region_id);

            this.getDBTransaction().commit();

            batchIfaceView.setWhereClause(null);
            batchIfaceView.executeQuery();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while assigning batch to selected region." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }

    }

    /**
     * Method to submit batch to internal agent 2.
     * @param p_batch_id batch id of the current batch.
     */
    public void assignBatchToInternalAgent2(Integer p_batch_id) {
        try {
            ViewObject wfView = getWorkFlowView();
            wfView.setNamedWhereClauseParam("pBatchId", p_batch_id);
            wfView.executeQuery();

            //            System.out.println(wfView.getRowCount());

            RowSetIterator createRowSetIterator = wfView.createRowSetIterator(null);

            while (createRowSetIterator.hasNext()) {
                Row row = createRowSetIterator.next();
                row.setAttribute("LastUpdatedRow", "N");

            }

            Row createRow = wfView.createRow();
            createRow.setAttribute("EsiBatchId", p_batch_id);
            createRow.setAttribute("BatchStatus", "Pending_upload_document");
            createRow.setAttribute("LastUpdatedRow", "Y");
            wfView.insertRow(createRow);


            ViewObject batchIfaceView = getBatchIfaceView();
            batchIfaceView.setWhereClause("esi_batch_id =" + p_batch_id);
            batchIfaceView.executeQuery();

            //            System.out.println(batchIfaceView.getRowCount() + "---");

            Row frow = batchIfaceView.first();

            frow.setAttribute("BatchStatus", "Pending_upload_document");

            this.getDBTransaction().commit();

//            batchIfaceView.setWhereClause(null);
//            batchIfaceView.executeQuery();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while submitting batch to internal agent 2." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }


    }


    /**
     * Method to Resubmit batch after uploading correct documents.
     * @param p_batch_id batch id of the current batch.
     * @param p_user_id user id of the logged in user.
     */
    public void resubmitBatch(Integer p_batch_id, Integer p_user_id) {
        try {
            ViewObject wfView = getWorkFlowView();
            wfView.setNamedWhereClauseParam("pBatchId", p_batch_id);
            wfView.executeQuery();

            //            System.out.println(wfView.getRowCount());
            int evalCount = 0;
            int mtcCount = 0;
            int qaCount = 0;
            RowSetIterator createRowSetIterator = wfView.createRowSetIterator(null);

            while (createRowSetIterator.hasNext()) {
                Row row = createRowSetIterator.next();
                if (row.getAttribute("BatchStatus").toString().equalsIgnoreCase("Pending_VAL") &&
                    row.getAttribute("LastUpdatedRow").toString().equalsIgnoreCase("Y")) {
                    evalCount++;
                }
                if (row.getAttribute("BatchStatus").toString().equalsIgnoreCase("Pending_MTC") &&
                    row.getAttribute("LastUpdatedRow").toString().equalsIgnoreCase("Y")) {
                    mtcCount++;
                }
                if (row.getAttribute("BatchStatus").toString().equalsIgnoreCase("Pending_QA") &&
                    row.getAttribute("LastUpdatedRow").toString().equalsIgnoreCase("Y")) {
                    qaCount++;
                }

            }

System.out.println("-----11------");
            int pendingValCount = 0;
            int pendingMtcCount = 0;
            int pendingQaCount = 0;
            ViewObject seaVO = getSeafarerIfaceView();
            //    System.out.println(seaVO.getRowCount()+"------");

            RowSetIterator rit = seaVO.createRowSetIterator(null);
            while (rit.hasNext()) {
                Row row = rit.next();
                System.out.println(row.getAttribute("CorrectedFlag")+"------corrected flag");
                if(row.getAttribute("CorrectedFlag") != null && row.getAttribute("CorrectedFlag").toString().equalsIgnoreCase("Y"))
                {
                row.setAttribute("DeficientAckDate", null);
                row.setAttribute("DeficientAckFlag", null);

                    System.out.println(row.getAttribute("CorrectedFlag")+"---121212");
                    /**
                     *  Code commented and added by Sushil on 01-11-2021 to send all 
                     *      resubmitted/rejected batches to Evaluator for mandatory TC. **/
                    
                                    if (row.getAttribute("SeafarerWfStatus").toString().equalsIgnoreCase("Rejected")) {
                                        if (row.getAttribute("SeafarerGrdStatus").toString().equalsIgnoreCase("Rejected")) {
                                            row.setAttribute("SeafarerWfStatus", "Pending_VAL");
                                            row.setAttribute("SeafarerGrdStatus", "Pending");
                                            pendingValCount++;
                                        } else {
                                            row.setAttribute("SeafarerWfStatus", "Pending_VAL");
                                            row.setAttribute("SeafarerGrdStatus", "Pending");
                                            pendingValCount++;
                                        }
                                    }
                    
                                      if (row.getAttribute("SeafarerWfStatus").toString().equalsIgnoreCase("Unverified")) {
                                        row.setAttribute("SeafarerWfStatus", "Pending_VAL");
                                        row.setAttribute("SeafarerGrdStatus", "Pending");
                                        row.setAttribute("AffidavitGrdStatus", "Approve");
                                        row.setAttribute("ApplicationGrdStatus", "Approve");
                                        row.setAttribute("BookGrdStatus", "Approve");
                                        row.setAttribute("IdCardGrdStatus", "Approve");
                                        row.setAttribute("IdentityDocGrdStatus", "Approve");
                                        row.setAttribute("PhotoGrdStatus", "Approve");
                                        row.setAttribute("PhysicalGrdStatus", "Approve");
                                        row.setAttribute("SeaserviceGrdStatus", "Approve");
                                        row.setAttribute("SatGrdStatus", "Approve");
                    //                    row.setAttribute("SeafarerGrdStatus", "Pending_QA");
                                        Integer seafarer_id = Integer.parseInt(row.getAttribute("SeafarerId").toString());
                                        Integer esi_id = Integer.parseInt(row.getAttribute("EsiId").toString());
                    
                                        ViewObject seaOcView = getSeafarerDocsOcViewForUpdate();
                                        seaOcView.setWhereClause("esi_id = "+esi_id);
                                        seaOcView.executeQuery();
                    
                    //                    System.out.println(seaOcView.getRowCount()+"----rowcount");
                    
                                        RowSetIterator ocit = seaOcView.createRowSetIterator(null);
                                        while(ocit.hasNext())
                                        {
                                        Row ocRow = ocit.next();
                                            if(ocRow.getAttribute("GradingStatus") != null)
                                            {
                                                    if(!ocRow.getAttribute("GradingStatus").toString().equalsIgnoreCase("Cancel"))
                                                    {
                    
                                            ocRow.setAttribute("GradingStatus", "Approve");
                                                        }
                                                }
                    
                                            }
                                        ViewObject seaSqcView = getSeafarerDocsSqcViewForUpdate();
                                        seaSqcView.setWhereClause("esi_id = "+esi_id);
                                        seaSqcView.executeQuery();
                    
                                        RowSetIterator sqcit = seaSqcView.createRowSetIterator(null);
                                        while(sqcit.hasNext())
                                        {
                                        Row sqcRow = sqcit.next();
                                            if(sqcRow.getAttribute("GradingStatus") != null)
                                            {
                                                    if(!sqcRow.getAttribute("GradingStatus").toString().equalsIgnoreCase("Cancel"))
                                                    {
                    
                                            sqcRow.setAttribute("GradingStatus", "Approve");
                                                        }
                                                }
                    
                                            }
                    //                   String retVal = (String)callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.verify_seafarer_data(?,?,?,?,?,?)", new Object[] {
                    //                                                                        row.getAttribute("SeafarerId"),
                    //                                                                        null,
                    //                                                                        row.getAttribute("EsiId"),
                    //                                                                        p_user_id,
                    //                                                                        null,
                    //                    null
                    //                                       });
                    //                    System.out.println(seafarer_id +"-----"+esi_id+"----"+p_user_id);
                    //                    this.getDBTransaction().postChanges();
                    //                    Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.verify_seafarer_data(?,?,?,?,?,?)", new Object[] {seafarer_id,null,esi_id,p_user_id,null,null });
                                        pendingValCount++;
                                        seaOcView.setWhereClause(null);
                                        seaOcView.executeQuery();
                                        seaSqcView.setWhereClause(null);
                                        seaSqcView.executeQuery();
                                    }
                    
//                    if (row.getAttribute("SeafarerWfStatus").toString().equalsIgnoreCase("Rejected")) {
//                        if (row.getAttribute("SeafarerGrdStatus").toString().equalsIgnoreCase("Rejected")) {
//                            row.setAttribute("SeafarerWfStatus", "Pending_VAL");
//                            row.setAttribute("SeafarerGrdStatus", "Pending");
//                            pendingValCount++;
//                        } else {
//                            row.setAttribute("SeafarerWfStatus", "Pending_VAL");
//                            row.setAttribute("SeafarerGrdStatus", "Pending");
//                            pendingValCount++;
//                        }
//                    }
                                      
                                      row.setAttribute("CorrectedFlag","N");
            }
            }
            if (pendingValCount > 0 && evalCount == 0) {
                Row createRow = wfView.createRow();
                createRow.setAttribute("EsiBatchId", p_batch_id);
                createRow.setAttribute("BatchStatus", "Pending_VAL");
                createRow.setAttribute("LastUpdatedRow", "Y");
                wfView.insertRow(createRow);
            }
            if (pendingMtcCount > 0 && mtcCount == 0) {
                Row createRow = wfView.createRow();
                createRow.setAttribute("EsiBatchId", p_batch_id);
                createRow.setAttribute("BatchStatus", "Pending_MTC");
                createRow.setAttribute("LastUpdatedRow", "Y");
                wfView.insertRow(createRow);
            }
            if (pendingQaCount > 0 && qaCount == 0) {
                Row createRow = wfView.createRow();
                createRow.setAttribute("EsiBatchId", p_batch_id);
                createRow.setAttribute("BatchStatus", "Pending_QA");
                createRow.setAttribute("LastUpdatedRow", "Y");
                wfView.insertRow(createRow);
            }
            this.getDBTransaction().commit();
            ViewObject batchIfaceView = getBatchIfaceView();
            batchIfaceView.setWhereClause("esi_batch_id =" + p_batch_id);
            batchIfaceView.executeQuery();

            //            System.out.println(batchIfaceView.getRowCount() + "---");

            Row frow = batchIfaceView.first();

            frow.setAttribute("BatchStatus", "Resubmitted");
//            frow.setAttribute("BatchSubmittedBy", p_user_id);
            frow.setAttribute("BatchResubmittedDate", new Timestamp(System.currentTimeMillis()));

            this.getDBTransaction().commit();

            batchIfaceView.setWhereClause(null);
            batchIfaceView.executeQuery();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while Resubmitting batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
    }


    /**
     * Method to Submit batch.
     * @param p_batch_id batch id of the current batch.
     * @param p_user_id user id of the logged in user.
     */
    public void submit_batch(Integer p_batch_id, Integer p_user_id) {
        try {
            ViewObject wfView = getWorkFlowView();
            wfView.setNamedWhereClauseParam("pBatchId", p_batch_id);
            wfView.executeQuery();

            //            System.out.println(wfView.getRowCount());

            RowSetIterator createRowSetIterator = wfView.createRowSetIterator(null);

            while (createRowSetIterator.hasNext()) {
                Row row = createRowSetIterator.next();
                row.setAttribute("LastUpdatedRow", "N");

            }

            Row createRow = wfView.createRow();
            createRow.setAttribute("EsiBatchId", p_batch_id);
            createRow.setAttribute("BatchStatus", "Pending_TC");
            createRow.setAttribute("LastUpdatedRow", "Y");
            wfView.insertRow(createRow);

            ViewObject batchIfaceView = getBatchIfaceView();
            batchIfaceView.setWhereClause("esi_batch_id =" + p_batch_id);
            batchIfaceView.executeQuery();

            //            System.out.println(batchIfaceView.getRowCount() + "---");

            Row frow = batchIfaceView.first();

            frow.setAttribute("BatchStatus", "Submitted");
            frow.setAttribute("BatchSubmittedBy", p_user_id);
            frow.setAttribute("BatchSubmittedDate",
                              new oracle.jbo.domain.Date(oracle.jbo.domain.Date.getCurrentDate()));

            this.getDBTransaction().commit();

            batchIfaceView.setWhereClause(null);
            batchIfaceView.executeQuery();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while Submitting batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }


    /**
     * Method to to complete the trade compilace process and to send the batch for evaluation.
     * @param p_batch_id batch id of the current batch.
     */
    public void processTradeCompliance(Integer p_batch_id) {
        try {
            ViewObject wfView = getWorkFlowView();
            wfView.setNamedWhereClauseParam("pBatchId", p_batch_id);
            wfView.executeQuery();

            //            System.out.println(wfView.getRowCount());

            RowSetIterator createRowSetIterator = wfView.createRowSetIterator(null);

            while (createRowSetIterator.hasNext()) {
                Row row = createRowSetIterator.next();
                if (row.getAttribute("BatchStatus").toString().equalsIgnoreCase("Pending_VAL")) {
                    row.setAttribute("LastUpdatedRow", "N");
                }
            }

            Row createRow = wfView.createRow();
            createRow.setAttribute("EsiBatchId", p_batch_id);
            createRow.setAttribute("BatchStatus", "Pending_VAL");
            createRow.setAttribute("LastUpdatedRow", "Y");
            wfView.insertRow(createRow);

            this.getDBTransaction().commit();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while Processing batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }

    /**
     * Method to send the batch to evaluation stage
     */
    public void processTradeComplianceAfterCraProcessing(Integer p_batch_id) {
        try {
            ViewObject wfView = getWorkFlowView();
            wfView.setNamedWhereClauseParam("pBatchId", p_batch_id);
            wfView.executeQuery();

            //            System.out.println(wfView.getRowCount());

            RowSetIterator createRowSetIterator = wfView.createRowSetIterator(null);

            while (createRowSetIterator.hasNext()) {
                Row row = createRowSetIterator.next();
                if (row.getAttribute("BatchStatus").toString().equalsIgnoreCase("Pending_VAL")) {
                    row.setAttribute("LastUpdatedRow", "N");
                }
            }

            Row createRow = wfView.createRow();
            createRow.setAttribute("EsiBatchId", p_batch_id);
            createRow.setAttribute("BatchStatus", "Pending_VAL");
            createRow.setAttribute("LastUpdatedRow", "Y");
            wfView.insertRow(createRow);

            this.getDBTransaction().commit();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while Processing batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }

    }

    /**
     * Container's getter for OrderingAgentEmailIdView1.
     * @return OrderingAgentEmailIdView1
     */
    public ViewObjectImpl getOrderingAgentEmailIdViewForMultipleChoice() {
        return (ViewObjectImpl) findViewObject("OrderingAgentEmailIdViewForMultipleChoice");
    }

    /**
     * Method to filter ordering agent email id LOV based on the ordering agent selected
     * @param partyName of the ordering agent selected
     */
    public void filterOrderingAgentEmailId(String partyName) {
//        System.out.println("---");
        try {
            ViewObject partyVo = getGetCustAccIdByNameView();
            partyVo.setNamedWhereClauseParam("pPartyName", partyName);
            partyVo.executeQuery();

            if (partyVo.getRowCount() > 0) {
//                System.out.println("---");
                Row row = partyVo.first();
                Integer custAccId = Integer.parseInt(row.getAttribute("CustAccountId").toString());
                ViewObject emailView = getMultipleChoiceOrderingAgentEmailView();
                emailView.setNamedWhereClauseParam("pCustomerId", custAccId);
                emailView.executeQuery();
//                System.out.println(emailView.getRowCount() + "-----1");
              ViewObject batch = getBatchIfaceView();
              Row batchrow = batch.getCurrentRow();
              if(batchrow.getAttribute("tranCustAccountBillToName") != null)
              {
              filterInvoiceAgentEmailId(batchrow.getAttribute("tranCustAccountBillToName").toString());
            }
            }
        } catch (NumberFormatException nfe) {
            addFormattedFacesErrorMessage("System encountered an exception while filtering data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
      nfe.printStackTrace();
        }


    }

    /**
     * Container's getter for GetCustAccIdByNameView1.
     * @return GetCustAccIdByNameView1
     */
    public ViewObjectImpl getGetCustAccIdByNameView() {
        return (ViewObjectImpl) findViewObject("GetCustAccIdByNameView");
    }

    /**
     * Container's getter for GetRegionNameByUserIdView1.
     * @return GetRegionNameByUserIdView1
     */
    public ViewObjectImpl getGetRegionNameByUserIdView() {
        return (ViewObjectImpl) findViewObject("GetRegionNameByUserIdView");
    }

    /**
     * Container's getter for DocumentHistoryView1.
     * @return DocumentHistoryView1
     */
    public ViewObjectImpl getDocumentHistoryView() {
        return (ViewObjectImpl) findViewObject("DocumentHistoryView");
    }
    /**
     * Method to insert the data in DocumentHistoryDataView when document reuploaded by the user
     */
    public void documentHistoryInsert(Integer p_batch_id, Integer p_edoc_id, Integer p_seafarer_id, String p_doc_code,
                                      Row batchCurretRow) {
        try {
            ViewObject document = getDocumentHistoryView();
            Row createRow = document.createRow();

            ViewObject historyDataView = getDocumentHistoryDataView();
            historyDataView.setNamedWhereClauseParam("pBatchId", p_batch_id);
            historyDataView.setNamedWhereClauseParam("pDocCode", p_doc_code);
            historyDataView.setNamedWhereClauseParam("pSeafarerId", p_seafarer_id);
            historyDataView.executeQuery();
            if (historyDataView.getRowCount() > 0) {
                Row frow = historyDataView.first();
//                System.out.println(frow.getAttribute("PDocId").toString() + "------pdocid");
                createRow.setAttribute("DocumentUploadedBy", frow.getAttribute("CreatedBy"));
                createRow.setAttribute("DocumentUploadedDate", frow.getAttribute("CreationDate"));

            } else {
                createRow.setAttribute("DocumentUploadedBy", batchCurretRow.getAttribute("BatchSubmittedBy"));
                createRow.setAttribute("DocumentUploadedDate", batchCurretRow.getAttribute("BatchSubmittedDate"));
            }

            createRow.setAttribute("EsiBatchId", p_batch_id);
            createRow.setAttribute("EdocId", p_edoc_id);
            createRow.setAttribute("SeafarerId", p_seafarer_id);
            createRow.setAttribute("DocCode", p_doc_code);
            document.insertRow(createRow);
            getDBTransaction().commit();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while uploading documents." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }
    }
    
    /**
     * Method to insert the data in DocumentHistoryDataView when document reuploaded by the user
     */
    public void documentHistoryDocsIfaceInsert(Integer p_edoc_id,String p_doc_code,Row DocsIfaceRow,Row batchRow) {
        
        try {
            Integer p_esdi_id = Integer.parseInt(DocsIfaceRow.getAttribute("EsdiId").toString());
            ViewObject document = getDocumentHistoryView();
            Row createRow = document.createRow();

            ViewObject historyDataView = getDocumentHistoryDataDocsIfaceView();
            //        historyDataView.setNamedWhereClauseParam("pBatchId", p_batch_id);
            historyDataView.setNamedWhereClauseParam("pDocCode", p_doc_code);
            historyDataView.setNamedWhereClauseParam("pEsdiId", p_esdi_id);
            historyDataView.executeQuery();
            if (historyDataView.getRowCount() > 0) {
                Row frow = historyDataView.first();
//                System.out.println(frow.getAttribute("PDocId").toString() + "------pdocid");
                createRow.setAttribute("DocumentUploadedBy", frow.getAttribute("CreatedBy"));
                createRow.setAttribute("DocumentUploadedDate", frow.getAttribute("CreationDate"));

            } else {
                createRow.setAttribute("DocumentUploadedBy", batchRow.getAttribute("BatchSubmittedBy"));
                createRow.setAttribute("DocumentUploadedDate", batchRow.getAttribute("BatchSubmittedDate"));
            }

            //        createRow.setAttribute("EsiBatchId", p_batch_id);
            createRow.setAttribute("EdocId", p_edoc_id);
            //        createRow.setAttribute("SeafarerId", p_seafarer_id);
            createRow.setAttribute("DocCode", p_doc_code);
            createRow.setAttribute("EsdiId", p_esdi_id);
            document.insertRow(createRow);
            getDBTransaction().commit();
        } catch (Exception nfe) {
            addFormattedFacesErrorMessage("System encountered an exception while uploading documents." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            nfe.printStackTrace();
        }
    }
    /**
     * Container's getter for DocumentHistoryDetailsView1.
     * @return DocumentHistoryDetailsView1
     */
    public ViewObjectImpl getDocumentHistoryDetailsView() {
        return (ViewObjectImpl) findViewObject("DocumentHistoryDetailsView");
    }
    /**
     * Method to filter DocumentHistoryDetailsView based on the document type
     * @param p_doc_code document code of the document type
     * */
    public void filterDocumentHistoryDetails(String p_doc_code) {
        try {
            ViewObject batchView = getBatchIfaceView();
            Integer batch_id = Integer.parseInt(batchView.getCurrentRow().getAttribute("EsiBatchId").toString());
            ViewObject seafarerView = getSeafarerIfaceView();
            Integer seafarer_id = Integer.parseInt(seafarerView.getCurrentRow().getAttribute("SeafarerId").toString());

            ViewObject docHistoryView = getDocumentHistoryDetailsView();
            docHistoryView.setNamedWhereClauseParam("pBatchId", batch_id);
            docHistoryView.setNamedWhereClauseParam("pSeafarerId", seafarer_id);
            docHistoryView.setNamedWhereClauseParam("pDocCode", p_doc_code);
            docHistoryView.executeQuery();
        } catch (NumberFormatException nfe) {
            addFormattedFacesErrorMessage("System encountered an exception while loading data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        nfe.printStackTrace();
        }


    }
    /**
     * Method to filter DocumentHistoryDetailsView based on the document type
     * @param p_doc_code document code of the document type
     * */
    public void filterDocumentHistoryDocsIfaceDetails(String p_doc_code) {
        try {
            Integer p_esdi_id = null;
            if (p_doc_code.equalsIgnoreCase("0005")) {
                ViewObject ocView = getSeafarerDocsOcView();
                p_esdi_id = Integer.parseInt(ocView.getCurrentRow().getAttribute("EsdiId").toString());
            } else {
                ViewObject ocView = getSeafarerDocsSqcView();
                p_esdi_id = Integer.parseInt(ocView.getCurrentRow().getAttribute("EsdiId").toString());
            }

            ViewObject docHistoryView = getDocumentHistoryDetailsDocsIfaceView();
            docHistoryView.setNamedWhereClauseParam("pEsdiId", p_esdi_id);
            //        docHistoryView.setNamedWhereClauseParam("pSeafarerId", seafarer_id);
            docHistoryView.setNamedWhereClauseParam("pDocCode", p_doc_code);
            docHistoryView.executeQuery();
        } catch (NumberFormatException nfe) {
            addFormattedFacesErrorMessage("System encountered an exception while loading data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        nfe.printStackTrace();
        }


    }
    /**
     * Container's getter for DocumentHistoryDataView1.
     * @return DocumentHistoryDataView1
     */
    public ViewObjectImpl getDocumentHistoryDataView() {
        return (ViewObjectImpl) findViewObject("DocumentHistoryDataView");
    }

    /**
     * Container's getter for MultipleChoiceOrderingAgentEmailView1.
     * @return MultipleChoiceOrderingAgentEmailView1
     */
    public ViewObjectImpl getMultipleChoiceOrderingAgentEmailView() {
        return (ViewObjectImpl) findViewObject("MultipleChoiceOrderingAgentEmailView");
    }
    /**
     * Method to get the email id based on the customer contact id
     * @param p_contact_id customer contact id
     * @return email id
     * */
    public String getEmailByContactId(Integer p_contact_id) {

        String ret = "";
        try {
            ViewObject emailvo = getGetEmailByContactIdView();
            emailvo.setNamedWhereClauseParam("pContactPointId", p_contact_id);
            emailvo.executeQuery();
            if (emailvo.getRowCount() > 0) {
                Row row = emailvo.first();
                ret = row.getAttribute("EmailAddress").toString();

            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }
        return ret;
    }

    /**
     * Container's getter for GetEmailByContactIdView1.
     * @return GetEmailByContactIdView1
     */
    public ViewObjectImpl getGetEmailByContactIdView() {
        return (ViewObjectImpl) findViewObject("GetEmailByContactIdView");
    }

    /**
     * Container's getter for SearchSeafarerDetailsView1.
     * @return SearchSeafarerDetailsView1
     */
    public ViewObjectImpl getSearchSeafarerDetailsView() {
        return (ViewObjectImpl) findViewObject("SearchSeafarerDetailsView");
    }
    /**
     * Method to filter SearchSeafarerDetailsView based on the current seafarer selected
     */
    public void filterSearchSeafarerDetails() {
        try {
            ViewObject searchSeafarerVo = getSearchSeafarerView();
            Row row = searchSeafarerVo.getCurrentRow();
            Integer seafarerId = Integer.parseInt(row.getAttribute("SeafarerId").toString());
            ViewObject searchdetailsVo = getSearchSeafarerDetailsView();
            searchdetailsVo.setNamedWhereClauseParam("pSeafarerId", seafarerId);
            searchdetailsVo.executeQuery();
        } catch (NumberFormatException nfe) {
            addFormattedFacesErrorMessage("System encountered an exception while loading data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
       nfe.printStackTrace();
        }

    }

    /**
     * Container's getter for GetContactIdByEmailView1.
     * @return GetContactIdByEmailView1
     */
    public ViewObjectImpl getGetContactIdByEmailView() {
        return (ViewObjectImpl) findViewObject("GetContactIdByEmailView");
    }

    /**
     * Container's getter for GetOrderingAgentEmailIdView1.
     * @return GetOrderingAgentEmailIdView1
     */
    public ViewObjectImpl getGetOrderingAgentEmailIdView() {
        return (ViewObjectImpl) findViewObject("GetOrderingAgentEmailIdView");
    }
    /**
     * Method to get the list of email ids listed based on the ordering agent selected
     * @return comma seperated list of email id
     */
    public String getemaillist() {
        try {
            String ret = null;
            Integer custAcc = null;
            ViewObject batch = getBatchIfaceView();
            if (batch.getCurrentRow() != null) {
                Row row = batch.getCurrentRow();
                Integer batch_id = Integer.parseInt(row.getAttribute("EsiBatchId").toString());
                if (row.getAttribute("DeliverToCustAccountId") != null) {
                    custAcc = Integer.parseInt(row.getAttribute("DeliverToCustAccountId").toString());
                }
//                System.out.println(batch_id + "-----batchid");
                ViewObject ordering = getGetOrderingAgentEmailIdView();
                ordering.setNamedWhereClauseParam("pBatchId", batch_id);
                ordering.executeQuery();

                if (ordering.getRowCount() > 0) {
                    Row frow = ordering.first();
                    String email = frow.getAttribute("OrderingAgentEmailId").toString();
//                    System.out.println(email + "-----email in am");
                    String[] arr = email.split(",");
                    for (int i = 0; i < arr.length; i++) {
//                        System.out.println(arr[i]);
                        ViewObject contact = getGetContactIdByEmailView();
                        contact.setNamedWhereClauseParam("pEmail", arr[i]);
                        contact.setNamedWhereClauseParam("pCustomerId", custAcc);
                        contact.executeQuery();
                        if (contact.getRowCount() > 0) {
                            Row crow = contact.first();
                            Integer contactId = Integer.parseInt(crow.getAttribute("CustContactPointId").toString());
//                            System.out.println("contactId :: "+contactId);
                            if (ret == null) {
                                ret = contactId.toString();
                            } else {
                                ret = ret.concat(",").concat(contactId.toString());
                            }

                        }
                    }
                }


            }
            //        System.out.println(ret);
            return ret;
        } catch (NumberFormatException nfe) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching mail list." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
       nfe.printStackTrace();
        }
        return "true";
    }

    /**
     * Container's getter for SeafarersDetailsView1.
     * @return SeafarersDetailsView1
     */
    public ViewObjectImpl getSeafarersDetailsFindView() {
        return (ViewObjectImpl) findViewObject("SeafarersDetailsFindView");
    }

    /**
     * Container's getter for FindSeafarerSeafarerDetailsLogicalLink1.
     * @return FindSeafarerSeafarerDetailsLogicalLink1
     */
    public ViewLinkImpl getFindSeafarerSeafarerDetailsLogicalLink1() {
        return (ViewLinkImpl) findViewLink("FindSeafarerSeafarerDetailsLogicalLink1");
    }

    /**
     * Container's getter for BatchesPendingMtcView1.
     * @return BatchesPendingMtcView1
     */
    public ViewObjectImpl getBatchesPendingMtcView() {
        return (ViewObjectImpl) findViewObject("BatchesPendingMtcView");
    }

    /**
     * Method to filter BatchesProcessingCraView on the page load
     * @param p_batch_id batch id will be passed by the calling task flow.
     */
    public void onLoadCraProcessing(Integer p_batch_id) {
        try {
            ViewObject cra = getBatchesProcessingCraView();
            cra.setNamedWhereClauseParam("pBatchId", null);
            cra.executeQuery();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while loading data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }
    }

    /**
     * Container's getter for GetIfEvalRejectedView1.
     * @return GetIfEvalRejectedView1
     */
    public ViewObjectImpl getGetIfEvalRejectedView() {
        return (ViewObjectImpl) findViewObject("GetIfEvalRejectedView");
    }

    /**
     * Container's getter for BatchesEvalRejectedView1.
     * @return BatchesEvalRejectedView1
     */
    public ViewObjectImpl getBatchesEvalRejectedView() {
        return (ViewObjectImpl) findViewObject("BatchesEvalRejectedView");
    }

    /**
     * Container's getter for BatchesMtcRejectedView1.
     * @return BatchesMtcRejectedView1
     */
    public ViewObjectImpl getBatchesMtcRejectedView() {
        return (ViewObjectImpl) findViewObject("BatchesMtcRejectedView");
    }
    /**
     * Method to send the email of the invoice based on the current invoice selected
     * calls RMI_SICD_PUB.email_invoice db function
     */
    public void email_invoice(Integer user_id) 
    {
            CallableStatement st = null;
        try {
            ViewObject accStatus = getAccountStatusView();
            Row currRow = accStatus.getCurrentRow();
            String trxNumber = currRow.getAttribute("TrxNumber").toString();
//            System.out.println(trxNumber + "----trx number");
//            System.out.println(user_id + "--------user_d");

            String sql = "BEGIN RMI_SICD_PUB.email_invoice(?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            st.setObject(1, trxNumber); //MAIL SERVER
            st.setObject(2, user_id);
            st.executeUpdate();
//            System.out.println("procedure called");
            this.getAccountStatusView().executeQuery();
        } catch (Exception sqle) {
            addFormattedFacesErrorMessage("System encountered an exception while sending invoice." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);        
         sqle.printStackTrace();
         } finally {
            try 
            {
                if (st != null) {
                    st.close();
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }
    }

    /**
     * Method to filter AccountStatusView based on logged in user on page load
     */
    public void onLoadAccountStatus(Integer user_id) {
        try 
        {
            String user_type  = ADFContext.getCurrent().getSessionScope().get("user_type").toString();
            if(user_type.equalsIgnoreCase("Internal"))
            {
                System.out.println("----method step2---"+new Timestamp(System.currentTimeMillis()));

                ViewObject accstatusRO = getAccountStatusView();
                accstatusRO.setNamedWhereClauseParam("pUserType", "Internal");
                accstatusRO.setNamedWhereClauseParam("pInvoiceNumber", "-1");
                accstatusRO.setNamedWhereClauseParam("pInvoiceDate", null);
                accstatusRO.setNamedWhereClauseParam("pInvoiceDateTo", null);
                accstatusRO.setNamedWhereClauseParam("pWorkOrderNumber", "-1");
                accstatusRO.executeQuery();
                System.out.println("----method step3---"+new Timestamp(System.currentTimeMillis()));

            }
            else
            {
                ViewObject accstatusRO = getAccountStatusView();
                accstatusRO.setNamedWhereClauseParam("pUserType", "External");
                accstatusRO.setNamedWhereClauseParam("pUserId", user_id);
                accstatusRO.executeQuery();
            }
        } catch (Exception e) {
            e.printStackTrace();
            addFormattedFacesErrorMessage("System encountered an exception while loading data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }


    }

    /**
     * Container's getter for BatchesPendingMtcLegalView1.
     * @return BatchesPendingMtcLegalView1
     */
    public ViewObjectImpl getBatchesPendingMtcLegalView() {
        return (ViewObjectImpl) findViewObject("BatchesPendingMtcLegalView");
    }

    /**
     * Container's getter for MyTasksLegalView1.
     * @return MyTasksLegalView1
     */
    public ViewObjectImpl getMyTasksLegalView() {
        return (ViewObjectImpl) findViewObject("MyTasksLegalView");
    }

    /**
     * Container's getter for QueryOrderHeaderView1.
     * @return QueryOrderHeaderView1
     */
    public ViewObjectImpl getQueryOrderHeaderView() {
        return (ViewObjectImpl) findViewObject("QueryOrderHeaderView");
    }
    /**
     * Method to filter QueryOrderHeaderView
     */
    public void searchQueryOrder(Integer orderNumber)
    {
        try {
            ViewObject order = getQueryOrderHeaderView();
            order.setNamedWhereClauseParam("pOrderNumber", orderNumber);
            order.executeQuery();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while searching data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }
        
        }
    public String queryOrderFound()
    {
            ViewObject order = getQueryOrderHeaderView();
            if(order.getRowCount()>0)
            {
              return "found";  
                
                }
            else
            {
              return "notfound";  
                }
        
        }

    /**
     * Container's getter for QuerOrderLineStationsView1.
     * @return QuerOrderLineStationsView1
     */
    public ViewObjectImpl getQuerOrderLineStationsView() {
        return (ViewObjectImpl) findViewObject("QuerOrderLineStationsView");
    }

    /**
     * Container's getter for QueryOrderHeaderLineStationsLogicalLink1.
     * @return QueryOrderHeaderLineStationsLogicalLink1
     */
    public ViewLinkImpl getQueryOrderHeaderLineStationsLogicalLink1() {
        return (ViewLinkImpl) findViewLink("QueryOrderHeaderLineStationsLogicalLink1");
    }

    /**
     * Container's getter for QueryOrderHoldsView1.
     * @return QueryOrderHoldsView1
     */
    public ViewObjectImpl getQueryOrderHoldsView() {
        return (ViewObjectImpl) findViewObject("QueryOrderHoldsView");
    }

    /**
     * Container's getter for QueryOrderHeaderOrderHoldLogicalLink1.
     * @return QueryOrderHeaderOrderHoldLogicalLink1
     */
    public ViewLinkImpl getQueryOrderHeaderOrderHoldLogicalLink1() {
        return (ViewLinkImpl) findViewLink("QueryOrderHeaderOrderHoldLogicalLink1");
    }

    /**
     * Container's getter for QueryOrderLineCancellationsView1.
     * @return QueryOrderLineCancellationsView1
     */
    public ViewObjectImpl getQueryOrderLineCancellationsView() {
        return (ViewObjectImpl) findViewObject("QueryOrderLineCancellationsView");
    }

    /**
     * Container's getter for QueryOrderHeaderLineCancellationsLogicalLink1.
     * @return QueryOrderHeaderLineCancellationsLogicalLink1
     */
    public ViewLinkImpl getQueryOrderHeaderLineCancellationsLogicalLink1() {
        return (ViewLinkImpl) findViewLink("QueryOrderHeaderLineCancellationsLogicalLink1");
    }

    /**
     * Container's getter for QueryOrderLineHoldsView1.
     * @return QueryOrderLineHoldsView1
     */
    public ViewObjectImpl getQueryOrderLineHoldsView() {
        return (ViewObjectImpl) findViewObject("QueryOrderLineHoldsView");
    }

    /**
     * Container's getter for QueryOrderHeaderLineHoldsLogicalLink1.
     * @return QueryOrderHeaderLineHoldsLogicalLink1
     */
    public ViewLinkImpl getQueryOrderHeaderLineHoldsLogicalLink1() {
        return (ViewLinkImpl) findViewLink("QueryOrderHeaderLineHoldsLogicalLink1");
    }

    /**
     * Container's getter for QueryOrderLineShipmentsView1.
     * @return QueryOrderLineShipmentsView1
     */
    public ViewObjectImpl getQueryOrderLineShipmentsView() {
        return (ViewObjectImpl) findViewObject("QueryOrderLineShipmentsView");
    }

    /**
     * Container's getter for QueryOrderHeaderLineShipmentLogicalLink1.
     * @return QueryOrderHeaderLineShipmentLogicalLink1
     */
    public ViewLinkImpl getQueryOrderHeaderLineShipmentLogicalLink1() {
        return (ViewLinkImpl) findViewLink("QueryOrderHeaderLineShipmentLogicalLink1");
    }

    /**
     * Container's getter for DocumentHistoryDataDocsIfaceView1.
     * @return DocumentHistoryDataDocsIfaceView1
     */
    public ViewObjectImpl getDocumentHistoryDataDocsIfaceView() {
        return (ViewObjectImpl) findViewObject("DocumentHistoryDataDocsIfaceView");
    }

    /**
     * Container's getter for DocumentHistoryDetailsDocsIfaceView1.
     * @return DocumentHistoryDetailsDocsIfaceView1
     */
    public ViewObjectImpl getDocumentHistoryDetailsDocsIfaceView() {
        return (ViewObjectImpl) findViewObject("DocumentHistoryDetailsDocsIfaceView");
    }

    /**
     * Container's getter for SeafarerDocsOcView1.
     * @return SeafarerDocsOcView1
     */
    public SeafarerDocsOcViewImpl getSeafarerDocsOcViewForUpdate() {
        return (SeafarerDocsOcViewImpl) findViewObject("SeafarerDocsOcViewForUpdate");
    }

    /**
     * Container's getter for SeafarerDocsSqcView1.
     * @return SeafarerDocsSqcView1
     */
    public SeafarerDocsSqcViewImpl getSeafarerDocsSqcViewForUpdate() {
        return (SeafarerDocsSqcViewImpl) findViewObject("SeafarerDocsSqcViewForUpdate");
    }

    /**
     * Container's getter for BatchesQaResubmittedView1.
     * @return BatchesQaResubmittedView1
     */
    public ViewObjectImpl getBatchesQaResubmittedView() {
        return (ViewObjectImpl) findViewObject("BatchesQaResubmittedView");
    }
    /**
     * Method to assign batch to logged in user.
     * @param user_id User Id of the logged in user.
     */
    public String assignTaskToUserQARejected(Integer user_id) {
        try {
            String batch_status = "Pending_QA";
            ViewObject qaVO = getBatchesQaResubmittedView();
            Row currentRow = qaVO.getCurrentRow();
            Integer batchId = Integer.parseInt(currentRow.getAttribute("EsiBatchId").toString());
            //            Object stat = callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.ASSIGN_TASK_TO_USER(?,?)", new Object[] {
            //                                             batchId, user_id });

            String res = validateBatchWorkFlowStatus(batchId, batch_status);
                        if(res.equalsIgnoreCase("new"))
                        {
                        assignTaskToCurrentUser(batchId, user_id, batch_status);
                        qaVO.executeQuery();
                        
                        }
                        else
                        {
                                qaVO.executeQuery();   
                            
                            }
                        return res;
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while assigning batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        }
        return "new";
    }


    /**
     * Container's getter for RequestDetailsView1.
     * @return RequestDetailsView1
     */
    public ViewObjectImpl getRequestDetailsView() {
        return (ViewObjectImpl) findViewObject("RequestDetailsView");
    }

    /**
     * Method filter the RequestDetailsView based on the paremters selected on the page
     */
  
    /**
     * Method to reset the filter on RequestDetailsView
     */
   
    /**
     * Method to call RMI_SICD_PUB.print_sicd_report to submit the request
     */
  

    /**
     * Container's getter for BatchesClosedView1.
     * @return BatchesClosedView1
     */
    public ViewObjectImpl getBatchesClosedView() {
        return (ViewObjectImpl) findViewObject("BatchesClosedView");
    }
    
    /**
     * Method to filter SubmittedBatchesView View
     */
    public void filterSubmittedbatchesForPopup()
    {
        try {
            ViewObject acc = getAccountStatusView();
            Row row = acc.getCurrentRow();
                System.out.println("batchId :: "+row.getAttribute("BatchId"));
            if(row != null && row.getAttribute("BatchId") != null)
            {
                Integer esi_batch_id = Integer.parseInt(row.getAttribute("BatchId").toString());
                ViewObject submitted = getSubmittedBatchesView();
                submitted.setWhereClause("esi_batch_id =" + esi_batch_id);
                submitted.executeQuery();
            }
        } catch (NumberFormatException nfe) {
            nfe.printStackTrace();
            addFormattedFacesErrorMessage("System encountered an exception while filtering data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
        
        }
    /**
     * Method to reset the filter on SubmittedBatchesView View
     */
    public void resetSubmittedBatches()
    {
        try {
            Integer user_id =
                Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());

            ViewObject submittedBatchVO = getSubmittedBatchesView();
            submittedBatchVO.setWhereClause(null);
            submittedBatchVO.executeQuery();
        } catch (NumberFormatException nfe) {
            addFormattedFacesErrorMessage("System encountered an exception while loading data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
       nfe.printStackTrace();
        }
//            submittedBatchVO.setNamedWhereClauseParam("pUserId", user_id);
//            submittedBatchVO.executeQuery();
        
        }
    /**
     * Method to filter RequestDetailsView based on the request Id
     * @param p_request_id
     */
    public void onLoadRequestSubmission(Integer p_request_id)
    {
        try {
            if (p_request_id != null) {
                ViewObject requestDetailView = getRequestDetailsView();
                requestDetailView.setNamedWhereClauseParam("pRequestid", p_request_id);
                requestDetailView.setNamedWhereClauseParam("pRequestDate", null);
                requestDetailView.setNamedWhereClauseParam("pProgramId", null);
                requestDetailView.setNamedWhereClauseParam("pRequestedBy", null);
                requestDetailView.executeQuery();
            }
            Integer user_id =
                Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
            String fullname = null;
            ViewObject userdetails = getUserDetailsView();
            userdetails.setNamedWhereClauseParam("pUserId", user_id);
            userdetails.executeQuery();
            if(userdetails.getRowCount() > 0)
            {
                
               Row frow = userdetails.first();
               if(frow != null)
               {
               if(frow.getAttribute("FullName") != null)
               {
                 fullname = frow.getAttribute("FullName").toString();  
                   }
                   
                   }
                }
            ViewObject dual = getRequestSearchDualView();
            Row dualRw = dual.first();
            if(dualRw != null)
            {
               dualRw.setAttribute("UserName", fullname);
               dualRw.setAttribute("Requestor", user_id);
                }
            
        } catch (Exception e) {
            e.printStackTrace();
//            addFormattedFacesErrorMessage("System encountered an exception while loading page." +
//                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
        }

    /**
     * Container's getter for GetBatchCountByPurchaseNumberView1.
     * @return GetBatchCountByPurchaseNumberView1
     */
    public ViewObjectImpl getGetBatchCountByPurchaseNumberView() {
        return (ViewObjectImpl) findViewObject("GetBatchCountByPurchaseNumberView");
    }
    /**
     * Method to check if the puchase order number is already used in previous batches
     * @return new if pushase order number is not used , repeat if it is  used
     */
    public String purchaseNumberCheck(String purchaseOrderNumber)
    {
       try {
            ViewObject batchCount = getGetBatchCountByPurchaseNumberView();
            batchCount.setNamedWhereClauseParam("pPurchaseNumber", purchaseOrderNumber);
            batchCount.executeQuery();
            Row row = batchCount.first();
            Integer count = Integer.parseInt(row.getAttribute("BatchCount").toString());

            if (count > 0) {
                return "repeat";
            } else {
                return "new";
            }
        } catch (NumberFormatException nfe) {
            addFormattedFacesErrorMessage("System encountered an exception while validating batch." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
       nfe.printStackTrace();
        }
        return "new";
        }

    /**
     * Container's getter for SeafarerChekView1.
     * @return SeafarerChekView1
     */
    public ViewObjectImpl getSeafarerChekView() {
        return (ViewObjectImpl) findViewObject("SeafarerChekView");
    }

    /**
     * Container's getter for ValidationMessageView1.
     * @return ValidationMessageView1
     */
    public ViewObjectImpl getValidationMessageView() {
        return (ViewObjectImpl) findViewObject("ValidationMessageView");
    }
    /**
     * Method to split the error message and insert each message in ValidationMessageView to display on the page
     * @param message error message
     */
    public void addValidationMessage(String message)
    {
        try {
            ViewObject messageVo = getValidationMessageView();
            RowSetIterator rit = messageVo.createRowSetIterator(null);
            while (rit.hasNext()) {
                Row row = rit.next();
                row.remove();

            }
            messageVo.executeQuery();
            String[] split = message.split("zxvzxvxc zzzv");


            //            System.out.println(split.length+"-----array length");

            for (int i = 0; i < split.length; i++) {
//                System.out.println(split[i]);
                Row createRow = messageVo.createRow();
                createRow.setAttribute("ErrorMessage", split[i]);
                messageVo.insertRow(createRow);
                //            message.add(split[i]);
            }
//            System.out.println(messageVo.getRowCount() + "-----rowcount");
        } catch (Exception e) {
            e.printStackTrace();
            addFormattedFacesErrorMessage("System encountered an exception while loading validation message." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
       
    }
    
    public void resetBatchInfo()
    {
            Integer batchId = null;
             Object currentEsiBatchId = ADFContext.getCurrent().getPageFlowScope().get("CURRENT_ESI_BATCH_ID");
            if(currentEsiBatchId != null)
            {
            batchId = Integer.parseInt(currentEsiBatchId.toString());
            
             ViewObject batchesVO = getBatchIfaceView();
             batchesVO.setWhereClause("esi_batch_id =" + batchId);
             batchesVO.executeQuery();
            
            }
            
        
        }
    
//    public void addNewSeafaferOnUseSelectedOrCancel()
//    {
//            Integer batchId = null;
//             Object currentEsiBatchId = ADFContext.getCurrent().getPageFlowScope().get("CURRENT_ESI_BATCH_ID");
//            if(currentEsiBatchId != null)
//            {
//            batchId = Integer.parseInt(currentEsiBatchId.toString());
//            
//             ViewObject batchesVO = getBatchIfaceView();
//             batchesVO.setWhereClause("esi_batch_id =" + batchId);
//             batchesVO.executeQuery();
//            
//            }   
//            ViewObject seafarerView = getSeafarerIfaceView();
//            
//            RowSetIterator rit = seafarer
//        
//        
//        }
    /**
     * Method to check if all the rows in SeafarerIfaceView is new
     * @retun false if any of the row is new , true if all rows are old
     */
    public String getAllRowStateSeafarer()
    {
       try {
           
           Integer batchId = null;
            Object currentEsiBatchId = ADFContext.getCurrent().getPageFlowScope().get("CURRENT_ESI_BATCH_ID");
if(currentEsiBatchId != null)
{
    batchId = Integer.parseInt(currentEsiBatchId.toString());
           
            ViewObject batchesVO = getBatchIfaceView();
            batchesVO.setWhereClause("esi_batch_id =" + batchId);
            batchesVO.executeQuery();
           
}
            ViewObject seafarerVo = getSeafarerIfaceView();
            RowSetIterator rit = seafarerVo.createRowSetIterator(null);
            while (rit.hasNext()) {
                Row row = rit.next();
//                System.out.println(row.getAttribute("checkRowStatus"));
                if (row.getAttribute("checkRowStatus") != null) {
                    if (row.getAttribute("checkRowStatus").toString().equalsIgnoreCase("0")) {
                        return "false";
                    }

                }

            }

            return "true";
        } catch (Exception e) {
            e.printStackTrace();
            addFormattedFacesErrorMessage("System encountered an exception while validating data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
        return "true";
        }

    /**
     * Container's getter for SeafarerListView1.
     * @return SeafarerListView1
     */
    public ViewObjectImpl getSeafarerListView() {
        return (ViewObjectImpl) findViewObject("SeafarerListView");
    }
    /**
     * Method to filter SeafarerListView based on Batch id
     
     */
    public void onLoadSeafarerList(Integer pEsiBatchId)
    {
       try {
            ViewObject seaList = getSeafarerListView();
            seaList.setNamedWhereClauseParam("pEsiBatchId", pEsiBatchId);
            seaList.executeQuery();
        } catch (Exception e) {
            e.printStackTrace();
            addFormattedFacesErrorMessage("System encountered an exception while loading data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
        }
    
    /**
     * Method to filter WorkFlowSubmittedBatchesView based on region of the logged in user
     * @param pUserId User id of the logged in user
     */
    public void onLoadTaskAssignmentpage(Integer pUserId)
    {
        try {
            ViewObject wfBatchesVo = getWorkFlowSubmittedBatchesView();
            wfBatchesVo.setWhereClause(null);
            wfBatchesVo.executeQuery();

            ViewObject regionVo = getGetRegionNameByUserIdView();
            regionVo.setNamedWhereClauseParam("pUserId", pUserId);
            regionVo.executeQuery();

            if (regionVo.getRowCount() > 0) {
                Row row = regionVo.first();
                if (row.getAttribute("SalesrepId") != null) {
                    Integer regionid = Integer.parseInt(row.getAttribute("SalesrepId").toString());
                    wfBatchesVo.setWhereClause("region_id = " + regionid);
                    wfBatchesVo.executeQuery();
                }

            }
        } catch (NumberFormatException nfe) {
            nfe.printStackTrace();
            addFormattedFacesErrorMessage("System encountered an exception while loading data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
       
        
        }

    /**
     * Container's getter for MyTaskMasterView1.
     * @return MyTaskMasterView1
     */
    public ViewObjectImpl getMyTaskMasterView() {
        return (ViewObjectImpl) findViewObject("MyTaskMasterView");
    }

    /**
     * Container's getter for GetWorkflowRowCountByBatchStatusView1.
     * @return GetWorkflowRowCountByBatchStatusView1
     */
    public ViewObjectImpl getGetWorkflowRowCountByBatchStatusView() {
        return (ViewObjectImpl) findViewObject("GetWorkflowRowCountByBatchStatusView");
    }
    /**
     * Method to check if destination  email field is null while sending CRA mail
     * @return false if email is not null , destnnull if it is null
     */
    public String validateSendCra()
    {
     ViewObject vo = getCraMailDualView();
     Row row = vo.getCurrentRow();
     if(row.getAttribute("dest_mail") != null)
     {
         return "false";
         }
        return "destnull";
        }
    /**
     * Method to remove the current row of the BatchIfaceView if it is not saved in database
     */
    public void refreshBatchIfaceView()
    {
        try {
            ViewObject bt = getBatchIfaceView();
            Row row = bt.getCurrentRow();
//            System.out.println(row.getAttribute("checkBatchRow"));
            if (row != null && row.getAttribute("checkBatchRow").toString().equalsIgnoreCase("0")) {
                row.remove();
            }
            bt.executeQuery();
        } catch (Exception e) {
            e.printStackTrace();
            addFormattedFacesErrorMessage("System encountered an exception while loading data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
     
        
        }

    /**
     * Container's getter for VesselDetailView1.
     * @return VesselDetailView1
     */
    public ViewObjectImpl getVesselDetailView() {
        return (ViewObjectImpl) findViewObject("VesselDetailView");
    }
    /**
     * Method to filter VesselDetailView based on the vesselPk Selected 
     */
    public void filterVesselDetail()
    {
        try {
            Integer pk = null;
            ViewObject sea = getSeafarerIfaceView();
            Row row = sea.getCurrentRow();
            if (row.getAttribute("VesselPk") != null) {
                pk = Integer.parseInt(row.getAttribute("VesselPk").toString());
            }

            ViewObject vt = getVesselDetailView();
            vt.setNamedWhereClauseParam("pVesselPk", pk);
            vt.executeQuery();
        } catch (NumberFormatException nfe) {
            nfe.printStackTrace();
            addFormattedFacesErrorMessage("System encountered an exception while loading vessel detail." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
        
        }
    
    /**
     * Method to validate if duplicate oc or sqc selected
     * @return the error message to display on the page
     */
    
    public String validateOcSQCGrade()
    {
        try {
            String msgoc = "Duplicate OC for seafarer ";
            int countoc = 0;
            String msgSqc = "Duplicate SQC for seafarer ";
            int countsqc = 0;
            String finalmsg = "";
            ViewObject bt = getBatchIfaceView();
            Row row = bt.getCurrentRow();
            Integer batch_id = Integer.parseInt(row.getAttribute("EsiBatchId").toString());
            ViewObject oc = getValidateGradeView();
            oc.setNamedWhereClauseParam("pBatchid", batch_id);
            oc.executeQuery();
            RowSetIterator rit = oc.createRowSetIterator(null);
            while (rit.hasNext()) {
                Row ocrow = rit.next();
                if (countoc == 0) {
                    msgoc = msgoc.concat(ocrow.getAttribute("NameSea").toString());
                } else {
                    msgoc = msgoc.concat(" and ").concat(ocrow.getAttribute("NameSea").toString());
                }
                countoc++;
            }
//            if (countoc > 0) {
//                return msgoc;
//            }
            oc = getValidateSQCGradeView();
            oc.setNamedWhereClauseParam("pBatchid", batch_id);
            oc.executeQuery();
            rit = oc.createRowSetIterator(null);
            while (rit.hasNext()) {
                Row ocrow = rit.next();
                if (countsqc == 0) {
                    msgSqc = msgSqc.concat(ocrow.getAttribute("NameSea").toString());
                } else {
                    msgSqc = msgSqc.concat(" and ").concat(ocrow.getAttribute("NameSea").toString());
                }
                countsqc++;
            }
//            if (countsqc > 0) {
//                return msgSqc;
//            }
            if(countoc > 0)
            {
              finalmsg = finalmsg+msgoc;  
                }
            if(countsqc > 0)
            {
                    finalmsg = finalmsg+System.lineSeparator()+msgSqc;   
                }
            if(countoc > 0 || countsqc > 0)
            {
              return finalmsg;  
                }
            return "validated";
        } catch (NumberFormatException nfe) {
            nfe.printStackTrace();
            addFormattedFacesErrorMessage("System encountered an exception while validating seafarer." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
            return "validated";
        }


    /**
     * Container's getter for ValidateGradeView1.
     * @return ValidateGradeView1
     */
    public ViewObjectImpl getValidateGradeView() {
        return (ViewObjectImpl) findViewObject("ValidateGradeView");
    }

    /**
     * Container's getter for ValidateSQCGradeView1.
     * @return ValidateSQCGradeView1
     */
    public ViewObjectImpl getValidateSQCGradeView() {
        return (ViewObjectImpl) findViewObject("ValidateSQCGradeView");
    }
    
    public void filterOnMyTask(String p_filter)
    {
     ViewObject myTask = getMyTasksView();   
     
       myTask.setWhereClause(null);  
       myTask.executeQuery();  
            if(p_filter.equalsIgnoreCase("cra"))
            {
              myTask.setWhereClause("cra_sent_count > 0");  
                }
            if(p_filter.equalsIgnoreCase("resubmit"))
            {
              myTask.setWhereClause("batch_status = 'Resubmitted'");  
                }
            if(p_filter.equalsIgnoreCase("expedited"))
            {
              myTask.setWhereClause("expedited_processing_mytask = 'true'");  
                }
            myTask.executeQuery();
        
        }
    
    public void filterOnTaskAssignment(String p_filter ,Integer pUserId)
    {
//        
//            ViewObject regionVo = getGetRegionNameByUserIdView();
//            regionVo.setNamedWhereClauseParam("pUserId", pUserId);
//            regionVo.executeQuery();
//
//            if (regionVo.getRowCount() > 0) {
//                Row row = regionVo.first();
//                if (row.getAttribute("SalesrepId") != null) {
//                    Integer regionid = Integer.parseInt(row.getAttribute("SalesrepId").toString());
//                   ViewObject regionVo = getViewOrdersView();
                       ViewObject regionVo = getViewOrdersView();
            Row currRow = regionVo.getCurrentRow();
            if (currRow.getAttribute("ViewOrders") != null) {
                Integer regionid = Integer.parseInt(currRow.getAttribute("ViewOrders").toString());
               
     ViewObject taskAssignment = getWorkFlowSubmittedBatchesView();   
     
       taskAssignment.setWhereClause(null);  
       taskAssignment.executeQuery();  
            if(p_filter.equalsIgnoreCase("cra"))
            {
              taskAssignment.setWhereClause("cra_sent_count > 0 and region_id = " + regionid);  
                }
            if(p_filter.equalsIgnoreCase("resubmit"))
            {
              taskAssignment.setWhereClause("batch_status = 'Resubmitted' and region_id = " + regionid);  
                }
            if(p_filter.equalsIgnoreCase("expedited"))
            {
              taskAssignment.setWhereClause("expedited_processing_t = 'true' and region_id = " + regionid);  
                }
            if(p_filter.equalsIgnoreCase("all"))
            {
              taskAssignment.setWhereClause("region_id = " + regionid);  
                }
            taskAssignment.executeQuery();
        
        }
            }
    
    
    public String validateConsentExpDate()
    {
        String check = checkSeafarerNew();
        if(check.equalsIgnoreCase("old"))
        {
            ViewObject seafarerVO = getSeafarerIfaceView();
            Row currRow = seafarerVO.getCurrentRow();
            String firstname = "";
            String lastname = "";
            Date birthDate = null;
            String nationality = "";
            Integer seafarer_id = null;
            if (currRow.getAttribute("FirstName") != null) {
                firstname = currRow.getAttribute("FirstName").toString();
            }
            if (currRow.getAttribute("LastName") != null) {
                lastname = currRow.getAttribute("LastName").toString();
            }
            if (currRow.getAttribute("BirthDate") != null) {
                birthDate = (Date) currRow.getAttribute("BirthDate");
            }
            if (currRow.getAttribute("transNationality") != null) {
                nationality = currRow.getAttribute("transNationality").toString();
            }
            if (currRow.getAttribute("SeafarerId") != null) {
                                seafarer_id = Integer.parseInt(currRow.getAttribute("SeafarerId").toString());
                            }
            String finalName = firstname.concat(" ").concat(lastname);
            //            System.out.println("FinalName:- "+finalName);
            //        System.out.println(birthDate);
            //        System.out.println(nationality);
//            Object stat = callStoredFunction(Types.VARCHAR, "rmi_seaf_consent_id(?,?,?)", new Object[] {
//                                             finalName, nationality, birthDate
//            });
            Object stat = callStoredFunction(Types.NUMERIC, "RMI_SICD_PUB.get_consent_id(?,?,?,?,?)", new Object[] {
                                             "SICD_SEAFARERS", seafarer_id, null,null,null
            });  
            //            System.out.println(stat+"----");
            Integer res = Integer.parseInt(stat.toString());
            if (res != 0) {
                //                    System.out.println("111111----");
                ViewObject consentVo = getConsentDetailsView();
                consentVo.setNamedWhereClauseParam("pConsentId", res);
                consentVo.executeQuery();

                if (consentVo.getRowCount() > 0) {
                    Row row = consentVo.first();
                    Integer diff = Integer.parseInt(row.getAttribute("Diff").toString());
                    if(diff > 366)
                    {
                       return "high"; 
                        }
                    else if(91 < diff && diff < 365)
                    {
                        return "med";
                        }
                    else
                    {
                            return "low";   
                        }
                }
            return "validated";
        }
        }
            
            return "validated";
    }
    
    public String validateConsentDataBeforeSave()
    {
            ViewObject seaVO = getSeafarerIfaceView();
            Row row = seaVO.getCurrentRow();  
            if (row.getAttribute("tranUploadedConsentStartDate") == null) {
              return "mandatory";
               
            }
            return "validated";
        }

    /**
     * Container's getter for DefaultOfficeEmailAddressView1.
     * @return DefaultOfficeEmailAddressView1
     */
    public ViewObjectImpl getDefaultOfficeEmailAddressView() {
        return (ViewObjectImpl) findViewObject("DefaultOfficeEmailAddressView");
    }


   
    public void refreshDualCountries()
    {
      ViewObject cntryVo = getMaintainCountriesDualView();
      cntryVo.executeQuery();
        
        }
    public void resetQueryOrderDetails()
    {
     ViewObject queryVo = getQueryOrderHeaderView();
     queryVo.setNamedWhereClauseParam("pOrderNumber", null);
     queryVo.executeQuery();
        }

    /**
     * Container's getter for MaintainCountriesDualView1.
     * @return MaintainCountriesDualView1
     */
    public ViewObjectImpl getMaintainCountriesDualView() {
        return (ViewObjectImpl) findViewObject("MaintainCountriesDualView");
    }
    
   
    /**
     * Container's getter for SeafarerListTcView1.
     * @return SeafarerListTcView1
     */
    public ViewObjectImpl getSeafarerListTcView() {
        return (ViewObjectImpl) findViewObject("SeafarerListTcView");
    }
    
    /**
     * Method to filter SeafarerListView based on Batch id
     
     */
    public void onLoadSeafarerListTc(Integer pEsiBatchId)
    {
       try {
            ViewObject seaList = getSeafarerListTcView();
            seaList.setNamedWhereClauseParam("pEsiBatchId", pEsiBatchId);
            seaList.executeQuery();
        } catch (Exception e) {
            e.printStackTrace();
            addFormattedFacesErrorMessage("System encountered an exception while loading data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
       
       
       
        }
    
    public void deficiency_details()
    {
     try {
            ViewObject seafarerVo = getSeafarerIfaceView();
            Row srow = seafarerVo.getCurrentRow();
            Integer batch_id = Integer.parseInt(srow.getAttribute("EsiBatchId").toString());
            Integer esi_id = Integer.parseInt(srow.getAttribute("EsiId").toString());
            Object stat = callStoredFunction(Types.VARCHAR, "rmi_seafarer.rmi_deficiency_details(?,?)", new Object[] {
                                             batch_id, esi_id
            });
            if (stat != null) {
                String message = stat.toString();
                ViewObject messageVo = getValidationMessageView();
                RowSetIterator rit = messageVo.createRowSetIterator(null);
                while (rit.hasNext()) {
                    Row row = rit.next();
                    row.remove();

                }
                messageVo.executeQuery();
                String[] split = message.split("split");


                //            System.out.println(split.length+"-----array length");

                for (int i = 0; i < split.length; i++) {
                    //                System.out.println(split[i]);
                    Row createRow = messageVo.createRow();
                    createRow.setAttribute("ErrorMessage", split[i]);
                    messageVo.insertRow(createRow);
                    //            message.add(split[i]);
                }
            }
        } catch (NullPointerException nfe) {
            // TODO: Add catch code
            nfe.printStackTrace();
        }
            catch (Exception e) {
                        addFormattedFacesErrorMessage("System encountered an exception." +
                                                      " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
                    }
       
        }
    
    public void setConsentStartEndDate()
    {
            ViewObject seafarerVO = getSeafarerIfaceView();
            Row currRow = seafarerVO.getCurrentRow();    
            currRow.setAttribute("tranUploadedConsentStartDate", new oracle.jbo.domain.Date(oracle.jbo.domain.Date.getCurrentDate()));
            Date startDate = new oracle.jbo.domain.Date(oracle.jbo.domain.Date.getCurrentDate());
            String strDate = startDate.toString();
            //            System.out.println("Date before Addition: "+strDate);
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Calendar c = Calendar.getInstance();
            try {
                //Setting the date to the given date
                c.setTime(sdf.parse(strDate));
                c.add(Calendar.YEAR, 5);
                c.add(Calendar.DATE, -1);
                String newDate = sdf.format(c.getTime());
                //                        System.out.println("Date after Addition: "+newDate);
                java.util.Date utdate = new SimpleDateFormat("yyyy-MM-dd").parse(newDate);
                java.sql.Date sqlDate = new java.sql.Date(utdate.getTime());
              Date  date2 = new Date(sqlDate);
            currRow.setAttribute("tranUploadedConsentExpireDate", date2);

        }
            catch(Exception e)
            {
                
                    e.printStackTrace(); 
                
                }
}
    
    public void deleteCurrentSeafarer()
    {
      ViewObject seafarerView = getSeafarerIfaceView();
      Row currRow = seafarerView.getCurrentRow();

     ViewObject seafarerDocsView = getSeafarerDocsOcView();
     while(seafarerDocsView.hasNext())
     {
         Row row = seafarerDocsView.next();
         row.remove();
         
      }
     ViewObject seafarerDocsSqcView = getSeafarerDocsSqcView();
            while(seafarerDocsSqcView.hasNext())
            {
                Row row = seafarerDocsSqcView.next();
                row.remove();
                
             }
            currRow.remove();
            this.getDBTransaction().commit();
            seafarerView.executeQuery();
           
            if(seafarerView.getRowCount() < 1)
            {
               Row row = seafarerView.createRow();
               seafarerView.insertRow(row);
               
            }
        
        }

    /**
     * Container's getter for ConsentDetailsByConfirmView1.
     * @return ConsentDetailsByConfirmView1
     */
    public ViewObjectImpl getConsentDetailsByConfirmView() {
        return (ViewObjectImpl) findViewObject("ConsentDetailsByConfirmView");
    }
    public void ackNumberValueChangeListener(String ackNo)
    {
        ViewObject seafarerVO = getSeafarerIfaceView();
        Row currRow = seafarerVO.getCurrentRow();
        ViewObject ConsentDetailsView = getConsentDetailsByConfirmView();
        ConsentDetailsView.setNamedWhereClauseParam("pConsentNumber", ackNo);
        ConsentDetailsView.executeQuery();
        if(ConsentDetailsView.getRowCount()>0)
        {
                Row row = ConsentDetailsView.first();   
                Date date1 = (Date) row.getAttribute("ConsentDate");
                Date date2 = (Date) row.getAttribute("ConsentExpireDate");
                currRow.setAttribute("tranConsentStartDate", date1);
                currRow.setAttribute("tranConsentExpDate", date2);   
                currRow.setAttribute("consentType", "Online");
            
            
            }
    }
    
    public String ackNumberValidate(String ackNo)
    {
        
            ViewObject ConsentDetailsView = getConsentDetailsByConfirmView();
            ConsentDetailsView.setNamedWhereClauseParam("pConsentNumber", ackNo);
            ConsentDetailsView.executeQuery();
            if(ConsentDetailsView.getRowCount()>0)
            {
                return "validated";
            }
            return "error";
        }

    public String validateSearchInvoice()
    {
        try 
        {
            Row dualRow =
                (this.getCraMailDualView().getCurrentRow() != null) ? this.getCraMailDualView().getCurrentRow() :
                this.getCraMailDualView().first();

            if (dualRow != null) {
                if (dualRow.getAttribute("TransInvoiceNumber") != null)
                    return "Y";
                else if (dualRow.getAttribute("TransInvoiceDate") != null)
                    return "Y";
                else if (dualRow.getAttribute("TransWorkOrderNumber") != null)
                    return "Y";
            }
        } catch (Exception e) {
            e.printStackTrace();
            addFormattedFacesErrorMessage("System encountered an exception while validating Search Invoice." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
        
        return "N";    
    }
    
    public void searchInvoice()
    {
        try 
        {
            Row dualRow =
                (this.getCraMailDualView().getCurrentRow() != null) ? this.getCraMailDualView().getCurrentRow() :
                this.getCraMailDualView().first();

            if (dualRow != null) 
            {
                ViewObject accstatusRO = getAccountStatusView();
                accstatusRO.setNamedWhereClauseParam("pUserType", "Internal");
                accstatusRO.setNamedWhereClauseParam("pInvoiceNumber", dualRow.getAttribute("TransInvoiceNumber"));
                accstatusRO.setNamedWhereClauseParam("pInvoiceDate", dualRow.getAttribute("TransInvoiceDate"));
                accstatusRO.setNamedWhereClauseParam("pInvoiceDateTo", dualRow.getAttribute("TransInvoiceDateTo"));
                accstatusRO.setNamedWhereClauseParam("pWorkOrderNumber", dualRow.getAttribute("TransWorkOrderNumber"));
                accstatusRO.executeQuery();
            }
        } catch (Exception e) {
            e.printStackTrace();
            addFormattedFacesErrorMessage("System encountered an exception while Searching Invoice." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
    }

    public Integer getAccountStatusFilteredRows()
    {
        return this.getAccountStatusView().getRowCount();    
    }

    /**
     * Method to get the list of email ids listed based on the billing agent selected
     * @return comma seperated list of email id
     */
    public String getInvoiceAgentEmailList() {
        try {
            String ret = null;
            Integer custAcc = null;
            ViewObject batch = getBatchIfaceView();
            if (batch.getCurrentRow() != null) 
            {
                Row row = batch.getCurrentRow();
                if (row != null && row.getAttribute("BillToCustAccountId") != null 
                     && row.getAttribute("InvoiceAgentEmailId") != null) 
                {
                    custAcc = Integer.parseInt(row.getAttribute("BillToCustAccountId").toString());
                    String email = row.getAttribute("InvoiceAgentEmailId").toString();
                    String[] arr = email.split(",");
                    
                    for (int i = 0; i < arr.length; i++) 
                    {
//                        System.out.println(arr[i]);
                        ViewObject contact = getGetContactIdByInvoiceEmailView1();
                        contact.setNamedWhereClauseParam("pEmail", arr[i]);
                        contact.setNamedWhereClauseParam("pCustomerId", custAcc);
                        contact.executeQuery();
    
                        if (contact.getRowCount() > 0) {
                            Row crow = contact.first();
                            Integer contactId = Integer.parseInt(crow.getAttribute("CustContactPointId").toString());
                            if (ret == null) {
                                ret = contactId.toString();
                            } else {
                                ret = ret.concat(",").concat(contactId.toString());
                            }
                        }
                    }
                }
            }
            System.out.println(ret);
            return ret;
        } catch (NumberFormatException e) {
            e.printStackTrace();
            addFormattedFacesErrorMessage("System encountered an exception while fetching invoice agent mail list." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
        return "true";
    }

    public void updateInvoiceEmails(String email)
    {
        try 
        {
            if (email != null) {
                ViewObject batchesVO = getBatchIfaceView();
                Row batchRow = batchesVO.getCurrentRow();

                if (batchRow != null) {
                    batchRow.setAttribute("InvoiceAgentEmailId", email);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            addFormattedFacesErrorMessage("System encountered an exception while updating invoice agent mails." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
    }

    /**
     * Method to filter invoice agent email id LOV based on the paying customer selected
     * @param partyName of the paying customer agent selected
     */
    public void filterInvoiceAgentEmailId(String partyName) {
    //        System.out.println("---");
        try {
            ViewObject partyVo = getGetCustAccIdByNameView();
            partyVo.setNamedWhereClauseParam("pPartyName", partyName);
            partyVo.executeQuery();

            if (partyVo.getRowCount() > 0) {
                Row row = partyVo.first();
                Integer custAccId = Integer.parseInt(row.getAttribute("CustAccountId").toString());
                ViewObject invoiceEmailIdVo = getInvoiceAgentEmailIdView1();
                invoiceEmailIdVo.setNamedWhereClauseParam("pCustomerId", custAccId);
                invoiceEmailIdVo.executeQuery();
                System.out.println("invoiceEmailIdVo :: "+invoiceEmailIdVo.getRowCount());
            }
        } catch (NumberFormatException nfe) {
            nfe.printStackTrace();
            addFormattedFacesErrorMessage("System encountered an exception while filtering data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method to generates the invoice based on the current invoice selected
     * calls RMI_SICD_PUB.generate_invoice db function
     */
    public String viewInvoice() 
    {
            CallableStatement st = null;
        try {

            Integer user_id =
                Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
            ViewObject accStatus = getAccountStatusView();
            Row currRow = accStatus.getCurrentRow();
            String trxNumber = currRow.getAttribute("TrxNumber").toString();
//                System.out.println("TrxNumber :: "+trxNumber);
//                System.out.println("userId :: "+user_id);

            String sql = "BEGIN RMI_SICD_PUB.generate_invoice(?,?,?,?,?);END;";
            String url = null;
            st = getDBTransaction().createCallableStatement(sql, 0);
            st.registerOutParameter(1, Types.VARCHAR);
            st.registerOutParameter(2, Types.VARCHAR);
            st.registerOutParameter(3, Types.NUMERIC);
            st.setObject(4, trxNumber); //MAIL SERVER
            st.setObject(5, user_id);
            st.executeUpdate();
            
//            System.out.println("st.getObject(1) :: "+st.getObject(1));
            
            if(st.getObject(1) != null)
            {
                String file_name = st.getObject(1).toString();
//                ViewObjectImpl ebsUrlVo = this.getEbsApplicationUrlView1();
//                ebsUrlVo.executeQuery();
//                
//                Row[] ebsUrlRow = ebsUrlVo.getAllRowsInRange();
                
//                if(ebsUrlRow.length > 0 && ebsUrlRow[0].getAttribute("EbsUrl") != null)
//                    url = ebsUrlRow[0].getAttribute("EbsUrl").toString()+"/OA_TEMP/"+st.getObject(1).toString();
//                else
//                    url = "http://dev-ebs.register-iri.com/OA_TEMP/"+st.getObject(1).toString();
                           sql = "BEGIN RMI_SICD_PUB.rmi_sync_temp_files(?,?,?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            st.setObject(1, file_name); //MAIL SERVER
//            st.setObject(2, "DEV");
            st.setObject(2, "DR");
//            st.setObject(2, "PROD");
            st.setObject(3, user_id);
            st.setObject(4, "OA_TEMP");
            st.registerOutParameter(5, Types.VARCHAR); //OUT PARAM ERROR
            st.registerOutParameter(6, Types.VARCHAR);
            st.registerOutParameter(7, Types.VARCHAR);
            //            header_id = Integer.parseInt(st.getObject(4).toString());
            st.execute();
            //                System.out.println("-----1111-----");
            //                    ret[0] = st.getObject(1).toString();
            //                System.out.println(st.getObject(4)+"------2222");
            if (st.getObject(5) != null) {
                System.out.println(st.getObject(5).toString()+"------444");
                url = st.getObject(5).toString();
            }
            if (st.getObject(6) != null) {
                System.out.println(st.getObject(6).toString()+"-------555");
            }
            if (st.getObject(7) != null) {
                System.out.println(st.getObject(7).toString()+"-------666");
            }  
                
                
                
                return url;
            }
            
        } catch (Exception e) {
            e.printStackTrace();
            addFormattedFacesErrorMessage("System encountered an exception while viewing invoice." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);        
        } finally {
            try 
            {
                if (st != null) {
                    st.close();
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }
        return null;
    }

    
    public void executePendingTrackingNumberOnLoad()
    {
        Integer user_id =  Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
        ViewObject track = getBatchesPendingtrackingNumberView();
        track.setNamedWhereClauseParam("pUserId", user_id);
        track.executeQuery();
//        this.getBatchesPendingtrackingNumberView().executeQuery();
    }
    
    /**
     * Container's getter for BatchesPendingtrackingNumberView1.
     * @return BatchesPendingtrackingNumberView1
     */
    public ViewObjectImpl getBatchesPendingtrackingNumberView() {
        return (ViewObjectImpl) findViewObject("BatchesPendingtrackingNumberView");
    }

    /**
     * Container's getter for InvoiceAgentEmailIdView1.
     * @return InvoiceAgentEmailIdView1
     */
    public ViewObjectImpl getInvoiceAgentEmailIdView1() {
        return (ViewObjectImpl) findViewObject("InvoiceAgentEmailIdView1");
    }

    /**
     * Container's getter for UserReassignmentSeafarerDetailsView1.
     * @return UserReassignmentSeafarerDetailsView1
     */
    public ViewObjectImpl getUserReassignmentSeafarerDetailsView1() {
        return (ViewObjectImpl) findViewObject("UserReassignmentSeafarerDetailsView1");
    }

    /**
     * Container's getter for UserReassignmentSeafarerDetailsLogicalLink1.
     * @return UserReassignmentSeafarerDetailsLogicalLink1
     */
    public ViewLinkImpl getUserReassignmentSeafarerDetailsLogicalLink1() {
        return (ViewLinkImpl) findViewLink("UserReassignmentSeafarerDetailsLogicalLink1");
    }

    /**
     * Container's getter for EbsApplicationUrlView1.
     * @return EbsApplicationUrlView1
     */
    public ViewObjectImpl getEbsApplicationUrlView1() {
        return (ViewObjectImpl) findViewObject("EbsApplicationUrlView1");
    }

    /**
     * Container's getter for GetContactIdByInvoiceEmailView1.
     * @return GetContactIdByInvoiceEmailView1
     */
    public ViewObjectImpl getGetContactIdByInvoiceEmailView1() {
        return (ViewObjectImpl) findViewObject("GetContactIdByInvoiceEmailView1");
    }
        public String getApplicationUrl()
        {
            FacesContext facesCtx = FacesContext.getCurrentInstance();
            ExternalContext ectx = facesCtx.getExternalContext();
            HttpServletRequest req = (HttpServletRequest) ectx.getRequest();
            String url = req.getRequestURL().toString();
    //        return (url.substring(0, url.length() - req.getRequestURI().length()) + req.getContextPath()).replaceAll("http", "https");
            return (url.substring(0, url.length() - req.getRequestURI().length()) + req.getContextPath());
        }

    /**
     * Container's getter for RMISubmitRequestDualView1.
     * @return RMISubmitRequestDualView1
     */
    public ViewObjectImpl getRMISubmitRequestDualView() {
        return (ViewObjectImpl) findViewObject("RMISubmitRequestDualView");
    }
    
    public String copyLogFile()
    {
        
        ViewObject reqDetail = getRequestDetailsView();
        Row row = reqDetail.getCurrentRow();
        Integer req_id = Integer.parseInt(row.getAttribute("RequestId").toString());
            String user_id =
                ADFContext.getCurrent().getSessionScope().get("param_user_id").toString();
            CallableStatement st = null;
            String status = null;
            String p_log = "Success";
            try {
                //                System.out.println(validation_type+"----"+batch_id+"------");
                String sql = "BEGIN RMI_SICD_PUB.rmi_sync_request_log(?,?,?,?,?,?,?);END;";
                st = getDBTransaction().createCallableStatement(sql, 0);
                st.setObject(1, req_id); //MAIL SERVER
//                st.setObject(2, "DEV");
                st.setObject(2, "DR");
//                st.setObject(2, "PROD");
                st.setObject(3, user_id);
                st.registerOutParameter(4, Types.VARCHAR); //OUT PARAM ERROR
                st.registerOutParameter(5, Types.VARCHAR);
                st.registerOutParameter(6, Types.VARCHAR);
                st.setObject(7, "LOG");
                //            header_id = Integer.parseInt(st.getObject(4).toString());
                st.execute();
                //                System.out.println("-----1111-----");
                //                    ret[0] = st.getObject(1).toString();
                //                System.out.println(st.getObject(4)+"------2222");
                if (st.getObject(4) != null) {
                    System.out.println(st.getObject(4).toString()+"------444");
                    p_log = st.getObject(4).toString();
                }
                if (st.getObject(5) != null) {
                    System.out.println(st.getObject(5).toString()+"-------555");
                }
                if (st.getObject(6) != null) {
                    System.out.println(st.getObject(6).toString()+"-------666");
                }
                //                System.out.println(p_log +"-------error");
                //                    System.out.println(st.getObject(7)+"-----error");
                //                System.out.println(st.getObject(1));
                //        String str1 = st.getObject(6).toString();
                //         String str2 =  st.getObject(1).toString();
            } catch (Exception e) {
                addFormattedFacesErrorMessage("System encountered an exception while loading log data." +
                                              " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                            e.printStackTrace();
            } finally {
                if (st != null) {
                    try {

                        st.close();
                    } catch (SQLException e) {
                        e.printStackTrace();

                    }


                }
            }
            return p_log;   
        
        }
    
    public String copyOutFile()
    {
    
    ViewObject reqDetail = getRequestDetailsView();
    Row row = reqDetail.getCurrentRow();
        String p_log = "Error while copying file.";
        
        if(row != null && row.getAttribute("RequestId") != null)
        {
            System.out.println("Status :: "+row.getAttribute("Status"));
            
            if(row.getAttribute("Status") != null && row.getAttribute("Status").toString().equalsIgnoreCase("Error"))
                return "Error";
            
            Integer req_id = Integer.parseInt(row.getAttribute("RequestId").toString());
            String user_id =
                ADFContext.getCurrent().getSessionScope().get("param_user_id").toString();
            CallableStatement st = null;
            String status = null;
            try {
                //                System.out.println(validation_type+"----"+batch_id+"------");
                String sql = "BEGIN RMI_SICD_PUB.rmi_sync_request_log(?,?,?,?,?,?,?);END;";
                st = getDBTransaction().createCallableStatement(sql, 0);
                st.setObject(1, req_id); //MAIL SERVER
//                st.setObject(2, "DEV");
                st.setObject(2, "DR");
//                st.setObject(2, "PROD");
                st.setObject(3, user_id);
                st.registerOutParameter(4, Types.VARCHAR); //OUT PARAM ERROR
                st.registerOutParameter(5, Types.VARCHAR);
                st.registerOutParameter(6, Types.VARCHAR);
                st.setObject(7, "OUT");
                //            header_id = Integer.parseInt(st.getObject(4).toString());
                st.execute();
                //                System.out.println("-----1111-----");
                //                    ret[0] = st.getObject(1).toString();
                //                System.out.println(st.getObject(4)+"------2222");
                if (st.getObject(4) != null) {
                    System.out.println(st.getObject(4).toString()+"------444");
                    p_log = st.getObject(4).toString();
                }
                if (st.getObject(5) != null) {
                    System.out.println(st.getObject(5).toString()+"-------555");
                }
                if (st.getObject(6) != null) {
                    System.out.println(st.getObject(6).toString()+"-------666");
                }
                //                System.out.println(p_log +"-------error");
                //                    System.out.println(st.getObject(7)+"-----error");
                //                System.out.println(st.getObject(1));
                //        String str1 = st.getObject(6).toString();
                //         String str2 =  st.getObject(1).toString();
            } catch (Exception e) {
                addFormattedFacesErrorMessage("System encountered an exception while loading log data." +
                                              " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                            e.printStackTrace();
            } finally {
                if (st != null) {
                    try {
    
                        st.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
    
                    }
    
    
                }
            }
        }
        return p_log;   
    
    }
    public void resetRequestSearchform()
    {
        try {
            ViewObject searchRequestView = getRequestSearchDualView();
            searchRequestView.executeQuery();
            
            Integer user_id =
                            Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
                        String fullname = null;
                        ViewObject userdetails = getUserDetailsView();
                        userdetails.setNamedWhereClauseParam("pUserId", user_id);
                        userdetails.executeQuery();
                        if(userdetails.getRowCount() > 0)
                        {
                            
                           Row frow = userdetails.first();
                           if(frow != null)
                           {
                           if(frow.getAttribute("FullName") != null)
                           {
                             fullname = frow.getAttribute("FullName").toString();  
                               }
                               
                               }
                            }
            Row dualRw = searchRequestView.first();
                       if(dualRw != null)
                       {
                          dualRw.setAttribute("UserName", fullname);
                          dualRw.setAttribute("Requestor", user_id);
                           }
            
            
            ViewObject requestDetailView = getRequestDetailsView();
            requestDetailView.setNamedWhereClauseParam("pRequestid", null);
            requestDetailView.setNamedWhereClauseParam("pRequestDate", null);
            requestDetailView.setNamedWhereClauseParam("pProgramId", null);
            requestDetailView.setNamedWhereClauseParam("pRequestedBy", null);
            requestDetailView.executeQuery();
        } catch (Exception e) {
            e.printStackTrace();
            addFormattedFacesErrorMessage("System encountered an exception while loading data." +
                                          "Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
            
            
        }
    /**
     * Container's getter for RequestSearchDualView1.
     * @return RequestSearchDualView1
     */
    public ViewObjectImpl getRequestSearchDualView() {
        return (ViewObjectImpl) findViewObject("RequestSearchDualView");
    }
    
    
    public String cpyCraFile()
    {
    
    ViewObject craMail = getCraMailDualView();
    Row row = craMail.getCurrentRow();
        String url = null;
        if(row.getAttribute("output_file_name") != null)
        {
        String file_name = row.getAttribute("output_file_name").toString();
        url = file_name.substring(file_name.lastIndexOf("/")+1);
        }
        String user_id =
            ADFContext.getCurrent().getSessionScope().get("param_user_id").toString();
        CallableStatement st = null;
        String status = null;
        String p_log = "Success";
        try {
                            System.out.println(url+"-------");
            String sql = "BEGIN RMI_SICD_PUB.rmi_sync_temp_files(?,?,?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            st.setObject(1, url); //MAIL SERVER
//           st.setObject(2, "DEV");
            st.setObject(2, "DR");
//             st.setObject(2, "PROD");
            st.setObject(3, user_id);
            st.setObject(4, "OA_TEMP");
            st.registerOutParameter(5, Types.VARCHAR); //OUT PARAM ERROR
            st.registerOutParameter(6, Types.VARCHAR);
            st.registerOutParameter(7, Types.VARCHAR);
            //            header_id = Integer.parseInt(st.getObject(4).toString());
            st.execute();
            //                System.out.println("-----1111-----");
            //                    ret[0] = st.getObject(1).toString();
            //                System.out.println(st.getObject(4)+"------2222");
            if (st.getObject(5) != null) {
                System.out.println(st.getObject(5).toString()+"------444");
                p_log = st.getObject(5).toString();
            }
            if (st.getObject(6) != null) {
                System.out.println(st.getObject(6).toString()+"-------555");
            }
            if (st.getObject(7) != null) {
                System.out.println(st.getObject(7).toString()+"-------666");
            }
            //                System.out.println(p_log +"-------error");
            //                    System.out.println(st.getObject(7)+"-----error");
            //                System.out.println(st.getObject(1));
            //        String str1 = st.getObject(6).toString();
            //         String str2 =  st.getObject(1).toString();
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while loading log data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                        e.printStackTrace();
        } finally {
            if (st != null) {
                try {

                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();

                }


            }
        }
        return p_log;   
    
    }

    /**
     * Container's getter for SubmittedBatchesForAccountStatusView1.
     * @return SubmittedBatchesForAccountStatusView1
     */
    public ViewObjectImpl getSubmittedBatchesForAccountStatusView() {
        return (ViewObjectImpl) findViewObject("SubmittedBatchesForAccountStatusView");
    }

    /**
     * Container's getter for AccountStatusSubmittedBatchesLogicalLink1.
     * @return AccountStatusSubmittedBatchesLogicalLink1
     */
    public ViewLinkImpl getAccountStatusSubmittedBatchesLogicalLink1() {
        return (ViewLinkImpl) findViewLink("AccountStatusSubmittedBatchesLogicalLink1");
    }

    /**
     * Container's getter for SeafarersDetailsView1.
     * @return SeafarersDetailsView1
     */
    public ViewObjectImpl getSeafarersDetailsAccountStatusView() {
        return (ViewObjectImpl) findViewObject("SeafarersDetailsAccountStatusView");
    }

    /**
     * Container's getter for SubmittedBatchesAccountSeafarerDetailsLogicalLink1.
     * @return SubmittedBatchesAccountSeafarerDetailsLogicalLink1
     */
    public ViewLinkImpl getSubmittedBatchesAccountSeafarerDetailsLogicalLink1() {
        return (ViewLinkImpl) findViewLink("SubmittedBatchesAccountSeafarerDetailsLogicalLink1");
    }

    /**
     * Container's getter for SeafarerOcDetailsView1.
     * @return SeafarerOcDetailsView1
     */
    public ViewObjectImpl getSeafarerOcDetailsAccountView() {
        return (ViewObjectImpl) findViewObject("SeafarerOcDetailsAccountView");
    }

    /**
     * Container's getter for SeafarerDetailOcDetailLogicalLink1.
     * @return SeafarerDetailOcDetailLogicalLink1
     */
    public ViewLinkImpl getSeafarerDetailOcDetailLogicalLink1() {
        return (ViewLinkImpl) findViewLink("SeafarerDetailOcDetailLogicalLink1");
    }

    /**
     * Container's getter for SeafarerSqcDetailsView1.
     * @return SeafarerSqcDetailsView1
     */
    public ViewObjectImpl getSeafarerSqcDetailsAccountView() {
        return (ViewObjectImpl) findViewObject("SeafarerSqcDetailsAccountView");
    }

    /**
     * Container's getter for SeafarerDetailSqcDetailLogicalLink1.
     * @return SeafarerDetailSqcDetailLogicalLink1
     */
    public ViewLinkImpl getSeafarerDetailSqcDetailLogicalLink1() {
        return (ViewLinkImpl) findViewLink("SeafarerDetailSqcDetailLogicalLink1");
    }
    
    public String getlinkforBatchesAccountpage(String code) {
        ViewObject seafarer = getSeafarersDetailsAccountStatusView();
        Row currRow = seafarer.getCurrentRow();
        Integer edocId = null;
        String ret = null;
        //        System.out.println(currRow +"------currRow");
        try {
            if (code.equalsIgnoreCase("0002")) {
                if (currRow.getAttribute("PhotoEdocId") != null) {
                    edocId = Integer.parseInt(currRow.getAttribute("PhotoEdocId").toString());
                }
            }
            if (code.equalsIgnoreCase("0033")) {
                if (currRow.getAttribute("AdditionalDocEdocId") != null) {
                    edocId = Integer.parseInt(currRow.getAttribute("AdditionalDocEdocId").toString());
                }
            }
            if (code.equalsIgnoreCase("0003")) {
                if (currRow.getAttribute("IdentityDocEdocId") != null) {
                    edocId = Integer.parseInt(currRow.getAttribute("IdentityDocEdocId").toString());
                }
            }
            if (code.equalsIgnoreCase("0004")) {
                //                System.out.println("---------in medical");
                //                    System.out.println(currRow.getAttribute("PhysicalEdocId")+"------physical");
                //                    System.out.println(currRow.getAttribute("PhysicalEdocId").toString()+"----edoc");
                if (currRow.getAttribute("PhysicalEdocId") != null) {
                    edocId = Integer.parseInt(currRow.getAttribute("PhysicalEdocId").toString());

                    //                System.out.println(edocId+"-------edocid");
                }
            }
            if (code.equalsIgnoreCase("0008")) {
                if (currRow.getAttribute("SeaserviceTranscriptEdocId") != null) {
                    edocId = Integer.parseInt(currRow.getAttribute("SeaserviceTranscriptEdocId").toString());
                }
            }
            if (code.equalsIgnoreCase("0001")) {
                if (currRow.getAttribute("ApplicationEdocId") != null) {
                    edocId = Integer.parseInt(currRow.getAttribute("ApplicationEdocId").toString());
                }
            }
            if (code.equalsIgnoreCase("0009")) {
                if (currRow.getAttribute("AffidavitEdocId") != null) {
                    edocId = Integer.parseInt(currRow.getAttribute("AffidavitEdocId").toString());
                }
            }
            if (code.equalsIgnoreCase("0016")) {
                if (currRow.getAttribute("SatEdocId") != null) {
                    edocId = Integer.parseInt(currRow.getAttribute("SatEdocId").toString());
                }
            }
            if (code.equalsIgnoreCase("0031")) {
                if (currRow.getAttribute("InternalEdocId") != null) {
                    edocId = Integer.parseInt(currRow.getAttribute("InternalEdocId").toString());
                }
            }
            if (code.equalsIgnoreCase("0025")) {
                if (currRow.getAttribute("ConsentEdocId") == null) {
                    copyConsentValuesforBatches();

                }
                if (currRow.getAttribute("ConsentEdocId") != null) {
                    edocId = Integer.parseInt(currRow.getAttribute("ConsentEdocId").toString());
                }
            }
            //            System.out.println(edocId+"-------edocId");
            ViewObject linkVO = getGetDocumentLinkView();
            linkVO.setNamedWhereClauseParam("pEdocId", edocId);
            linkVO.executeQuery();
            //      System.out.println(linkVO.getRowCount()+"--------rowcount");
            if (linkVO.getRowCount() > 0) {
                Row row = linkVO.first();
                ret = row.getAttribute("DocPath").toString();
            }
        } catch (Exception e) {
            addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                e.printStackTrace();
            ret = null;
        }
        return ret;
    }

    /**
     * Container's getter for FindSeafarerDualView1.
     * @return FindSeafarerDualView1
     */
    public ViewObjectImpl getFindSeafarerDualView() {
        return (ViewObjectImpl) findViewObject("FindSeafarerDualView");
    }

    /**
     * Container's getter for SearchVesselDetailDualView1.
     * @return SearchVesselDetailDualView1
     */
    public ViewObjectImpl getSearchVesselDetailDualView() {
        return (ViewObjectImpl) findViewObject("SearchVesselDetailDualView");
    }

    /**
     * Container's getter for SearchVesselDetailView1.
     * @return SearchVesselDetailView1
     */
    public ViewObjectImpl getSearchVesselDetailView() {
        return (ViewObjectImpl) findViewObject("SearchVesselDetailView");
    }
    
    public void searchVesselSearch()
    {
        String imo = null;
        String off = null;
        String name = null;
      ViewObject vesel = getSearchVesselDetailDualView();
      Row row = vesel.getCurrentRow();
      if(row.getAttribute("TranImoNumber") != null)
      {
       imo = row.getAttribute("TranImoNumber").toString();   
          }
            if(row.getAttribute("TranOfficialNumber") != null)
            {
             off = row.getAttribute("TranOfficialNumber").toString();   
                }
            if(row.getAttribute("TranVesselName") != null)
            {
             name = row.getAttribute("TranVesselName").toString();   
                }
            
            ViewObject vdetail = getSearchVesselDetailView();
            vdetail.setNamedWhereClauseParam("pName", name);
            vdetail.setNamedWhereClauseParam("pOfficialNumber", off);
            vdetail.setNamedWhereClauseParam("pVesselImo", imo);
            vdetail.executeQuery();
        
        }
    
    public void clearVesselSearch()
    {
            ViewObject vdetail = getSearchVesselDetailView();
            vdetail.setNamedWhereClauseParam("pName", null);
            vdetail.setNamedWhereClauseParam("pOfficialNumber", null);
            vdetail.setNamedWhereClauseParam("pVesselImo", null);
            vdetail.executeQuery();    
        
            ViewObject vesel = getSearchVesselDetailDualView();
            vesel.executeQuery();
        }
    
    public String deselectCraProcessing()
    {
        String res = "approved";
        String tcStatus = null;
       ViewObject view =  getBatchesProcessingCraView();
        Row currentRow = view.getCurrentRow();
        System.out.println(currentRow.getAttribute("batchSelect").toString()+"------121212");
        if(currentRow.getAttribute("TcStatus") != null)
        {
          tcStatus = currentRow.getAttribute("TcStatus").toString();  
            }
        if(!(tcStatus.equalsIgnoreCase("Approved") || tcStatus.equalsIgnoreCase("Provisional")))
        {
        currentRow.setAttribute("batchSelect", "N");
        return "reject";
        }
            return res;
    }
    
    public void selectRequestValueChange(String newValue)
    {
            String short_name = null;
       ViewObject dual = getRMISubmitRequestDualView();
       Row row = dual.getCurrentRow();
       if(row.getAttribute("ProgramShortName") != null)
       {
          short_name = row.getAttribute("ProgramShortName").toString();  
        }
        System.out.println(short_name+"---------------short_name");
        if(short_name != null)
        {
     String header_id_visible = "N";  
            String line_id_visible = "N";
            String begin_date_visible = "N";
            String end_date_visible = "N";
            String sales_office_visible = "N";
            String batch_name_visible = "N";
            String group_name_visible = "N";
            String action_name_visible = "N";
            String orderby_name = "N";
            
    if(short_name.equalsIgnoreCase("WO_ACKNO") || short_name.equalsIgnoreCase("WO_CONFIRM") 
       || short_name.equalsIgnoreCase("WO_PICK") || short_name.equalsIgnoreCase("WO_ASSURE")
        || short_name.equalsIgnoreCase("SICD151B-TEST") || short_name.equalsIgnoreCase("WO_EVAL")
    || short_name.equalsIgnoreCase("MI_REJECT_LTR") || short_name.equalsIgnoreCase("MI_REJECT_LTR_PDF")
    || short_name.equalsIgnoreCase("SICD_SET_DOC") || short_name.equalsIgnoreCase("WO_ACK_2")
    || short_name.equalsIgnoreCase("SICD151C_PDF") || short_name.equalsIgnoreCase("SICD105D"))
    {
            header_id_visible = "Y";  
        }
            if(short_name.equalsIgnoreCase("EXP_CRA") || short_name.equalsIgnoreCase("SICD_STATS"))
            {
                    begin_date_visible = "Y";  
                    end_date_visible= "Y";
                    sales_office_visible="Y";
                }
            if(short_name.equalsIgnoreCase("EXP_CRA_PDF"))
            {
                    begin_date_visible = "Y";  
                    end_date_visible= "Y";
                    sales_office_visible="Y";
                }
            if(short_name.equalsIgnoreCase("RMI_BOOK_CRA"))
            {
                    batch_name_visible = "Y";
                        
                }
            if(short_name.equalsIgnoreCase("SICD_DOC_PRINT_STATS") || short_name.equalsIgnoreCase("SICD_DOC_PRINT_STATS_XML") || short_name.equalsIgnoreCase("SICD_PROD_STATS") || short_name.equalsIgnoreCase("SICD_PROD_STATS_XML"))
            {
                    begin_date_visible = "Y";  
                    end_date_visible= "Y";
                    group_name_visible="Y";
                }
            if(short_name.equalsIgnoreCase("SICD_STALE"))
            {
                    begin_date_visible = "Y";
                    sales_office_visible= "Y";
                        
                }
            if(short_name.equalsIgnoreCase("RMI_SEAF_STATS") || short_name.equalsIgnoreCase("SICDCERTOFF"))
            {
                    begin_date_visible = "Y";
                    end_date_visible= "Y";
                        
                }
            if(short_name.equalsIgnoreCase("SICD_CYCLE_TIMES"))
            {
                    sales_office_visible= "Y";
                        
                }
            if(short_name.equalsIgnoreCase("SICD_WEEKLY"))
            {
                    sales_office_visible= "Y";
                        
                }
            if(short_name.equalsIgnoreCase("SICD_DEF_LRT"))
            {
                    header_id_visible= "Y";
                    action_name_visible = "Y";
                        
                }
            if(short_name.equalsIgnoreCase("RMI_SICD_UTIL_ONLINE_PENDING") 
               || short_name.equalsIgnoreCase("IRI_SICD_TC_P")
            || short_name.equalsIgnoreCase("EXSICD_SEND_ACK_ONLINE")
            || short_name.equalsIgnoreCase("RMI_EX_BATCH_RTRN"))
            {
                     header_id_visible = "N";  
                            line_id_visible = "N";
                            begin_date_visible = "N";
                            end_date_visible = "N";
                            sales_office_visible = "N";
                            batch_name_visible = "N";
                            group_name_visible = "N";
                            action_name_visible = "N";
                    orderby_name = "N";
                        
                }
            if(short_name.equalsIgnoreCase("IRI_RAXCUS"))
            {
                    orderby_name = "Y";
                        
                }
            
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("header_id_visible", header_id_visible);  
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("line_id_visible", line_id_visible);
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("begin_date_visible",begin_date_visible);
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("end_date_visible", end_date_visible);
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("sales_office_visible", sales_office_visible);
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("batch_name_visible", batch_name_visible);
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("group_name_visible", group_name_visible);
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("action_name_visible", action_name_visible);
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("orderby_name_visible", orderby_name);

      System.out.println(newValue+"-------new value");  
        
        
            Integer user_id =
                           Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
                  System.out.println(newValue+"-------new value");  
                       CallableStatement st = null;
                    
                        try {
                            //                System.out.println(validation_type+"----"+batch_id+"------");
                            String sql = "BEGIN rmi_sicd_pub.set_printer_options(?,?,?,?,?,?);END;";
                            st = getDBTransaction().createCallableStatement(sql, 0);
                            st.setObject(1, user_id); //MAIL SERVER
                            st.setObject(2, short_name);
                            st.registerOutParameter(3, Types.VARCHAR);
                            st.registerOutParameter(4, Types.VARCHAR); //OUT PARAM ERROR
                            st.registerOutParameter(5, Types.VARCHAR);
                            st.registerOutParameter(6, Types.VARCHAR);
                            //            header_id = Integer.parseInt(st.getObject(4).toString());
                            st.execute();
                            //                System.out.println("-----1111-----");
                            //                    ret[0] = st.getObject(1).toString();
                            //                System.out.println(st.getObject(4)+"------2222");
                            if (st.getObject(3) != null) {
                                System.out.println(st.getObject(3).toString()+"------444");
                                row.setAttribute("PrinterName", st.getObject(3).toString());
                               
                            }
                            if (st.getObject(5) != null) {
                                System.out.println(st.getObject(5).toString()+"-------555");
                                row.setAttribute("NumberOfCopies", st.getObject(5).toString());
                            }
                           

                        } catch (Exception e) {
                            addFormattedFacesErrorMessage("System encountered an exception while loading log data." +
                                                          "Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                                        e.printStackTrace();
                        } finally {
                            if (st != null) {
                                try {

                                    st.close();
                                }  
                                catch(Exception e)
                                {
                                        e.printStackTrace();   
                                    }
                            }
                        }
        }
    }
    
    public String validateRequestSubmit()
    {
      String validate = "yes";
      ViewObject vo = getRMISubmitRequestDualView();
      Row row = vo.getCurrentRow();
      if(row.getAttribute("SelectRequest") == null)
      {
        validate = "no";  
          }
       return validate; 
        }
  

    /**
     * Container's getter for PreviousSqcDetailsView1.
     * @return PreviousSqcDetailsView1
     */
    public ViewObjectImpl getPreviousSqcDetailsView() {
        return (ViewObjectImpl) findViewObject("PreviousSqcDetailsView");
    }
    
    public void changeDocChargable()
    {
        String gradeId = null;
        
        ViewObject seafarerVo = getSeafarerIfaceView();    
        Row currentRow = seafarerVo.getCurrentRow();
        Integer seafarerId = Integer.parseInt(currentRow.getAttribute("SeafarerId").toString());  
        
      ViewObject sqc = getSeafarerDocsSqcView();
      Row row = sqc.getCurrentRow();
      if(row.getAttribute("GradeId") != null)
      {
          gradeId = row.getAttribute("GradeId").toString();
          }
      
            ViewObject endNumView = getGradesEndNumView();
            endNumView.setNamedWhereClauseParam("pGradeId", gradeId);
            endNumView.executeQuery();
            if(endNumView.getRowCount() > 0)
            {
            ViewObject preOc = getPreviousSqcDetailsView();
                        preOc.setNamedWhereClauseParam("pGradeId", gradeId);
                        preOc.setNamedWhereClauseParam("pSeafarerId", seafarerId);
                        preOc.executeQuery();
                if(preOc.getRowCount() > 0)
                {
                    
                        Row endNumRow = preOc.first();       
                    if(endNumRow.getAttribute("EndorsementNumber") != null)
                    {
                        
                   String ends = endNumRow.getAttribute("EndorsementNumber").toString();     
                    String newValue = row.getAttribute("CocIdentifier").toString();  
                    System.out.println(ends+"-----"+newValue);
                   if(ends.trim().equalsIgnoreCase(newValue.trim()))
                   {
                           row.setAttribute("DocChargeable", "N");   
                       }
                   else
                   {
                           row.setAttribute("DocChargeable", "Y");  
                       }
                        }
                        else
                        {
                        
                        row.setAttribute("DocChargeable", "Y");
                        }
                    }
                else
                {
                
      row.setAttribute("DocChargeable", "Y");
        }
            }
    }
    public void changeDocExpDateChargable()
    {
        String gradeId = null;
        
      ViewObject sqc = getSeafarerDocsSqcView();
      Row row = sqc.getCurrentRow();
      if(row.getAttribute("GradeId") != null)
      {
          gradeId = row.getAttribute("GradeId").toString();
          }
      System.out.println(row.getAttribute("CocExpirationDate")+"------exp date");
            ViewObject endNumView = getGradesExpDateView();
            endNumView.setNamedWhereClauseParam("pGardeId", gradeId);
            endNumView.executeQuery();
            if(endNumView.getRowCount() > 0)
            {
            ViewObject seafarerVo = getSeafarerIfaceView();    
            Row currentRow = seafarerVo.getCurrentRow();
            Integer seafarerId = Integer.parseInt(currentRow.getAttribute("SeafarerId").toString());  
            ViewObject preOc = getPreviousSqcDetailsView();
                        preOc.setNamedWhereClauseParam("pGradeId", gradeId);
                        preOc.setNamedWhereClauseParam("pSeafarerId", seafarerId);
                        preOc.executeQuery();
                        if(preOc.getRowCount() > 0)
                        {
                Row endNumRow = preOc.first();
                Date oldDate = null;
                if(endNumRow.getAttribute("EndorsementExpirationDate") != null)
                {
                        oldDate = (Date)endNumRow.getAttribute("EndorsementExpirationDate");   
                }
                Date newDate = null;
            if(row.getAttribute("CocExpirationDate") != null)
            {
                    newDate = (Date)row.getAttribute("CocExpirationDate");   
            }
            if(oldDate != null && newDate != null)
            {
               if(oldDate.compareTo(newDate) != 0)
               {
                       row.setAttribute("DocChargeable", "Y");  
                   }
               else
               {
                       row.setAttribute("DocChargeable", "N");  
                   }
                
                }
            else
            {
                    row.setAttribute("DocChargeable", "Y"); 
                }
                        }
      
        }
    }

    /**
     * Container's getter for PreviousOCDetailsView1.
     * @return PreviousOCDetailsView1
     */
    public ViewObjectImpl getPreviousOCDetailsView() {
        return (ViewObjectImpl) findViewObject("PreviousOCDetailsView");
    }

    /**
     * Container's getter for GradesEndNumView1.
     * @return GradesEndNumView1
     */
    public ViewObjectImpl getGradesEndNumView() {
        return (ViewObjectImpl) findViewObject("GradesEndNumView");
    }

    /**
     * Container's getter for GradesExpDateView1.
     * @return GradesExpDateView1
     */
    public ViewObjectImpl getGradesExpDateView() {
        return (ViewObjectImpl) findViewObject("GradesExpDateView");
    }

    public String validationOnBackButton() {
        ViewObject seafarer = getSeafarerIfaceView();
        RowSetIterator rit = seafarer.createRowSetIterator(null);
        while (rit.hasNext()) {
            Row currRow = rit.next();
            String country = null;
            if(currRow.getAttribute("SeafarerId") != null)
            {
            if (currRow.getAttribute("ResidenceCountryCode") != null) {
                country = currRow.getAttribute("ResidenceCountryCode").toString();
            }
            if (currRow.getAttribute("Gender") == null || currRow.getAttribute("BirthDate") == null ||
                currRow.getAttribute("LastName") == null ||
                currRow.getAttribute("PassportIssuingCountryCode") == null ||
                currRow.getAttribute("PermanentAddress") == null ||
                currRow.getAttribute("ResidenceCountryCode") == null || currRow.getAttribute("VesselPk") == null ||
                currRow.getAttribute("Nationality") == null) {
                return "error";
            }
            if (country != null) {
                if (country.equalsIgnoreCase("RUSS") || country.equalsIgnoreCase("UKRA")) {
                    if (!(currRow.getAttribute("WcCityListId") != null)) {
                        return "error";

                    }

                }

            }
            }

        }
        String grade = checkOcSQCGradeMandatory();
        if (!grade.equalsIgnoreCase("success")) {
            return "ocsqcgrade";

        }
        return "success";


    }
    public void requestSubmitFetchListener()
    {
      ViewObject request = getRMISubmitRequestDualView();
      request.executeQuery();
      
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("header_id_visible", "N");  
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("line_id_visible", "N");
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("begin_date_visible","N");
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("end_date_visible", "N");
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("sales_office_visible", "N");
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("batch_name_visible", "N");
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("group_name_visible", "N");
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("action_name_visible", "N");
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("orderby_name_visible", "N");
        
        }

    /**
     * Container's getter for OrderHoldView1.
     * @return OrderHoldView1
     */
    public ViewObjectImpl getOrderHoldView() {
        return (ViewObjectImpl) findViewObject("OrderHoldView");
    }
    
    public void filterOrderHold()
    {
       ViewObject submitted = getSubmittedBatchesView();
       Row row = submitted.getCurrentRow();
       Integer header = Integer.parseInt(row.getAttribute("HeaderId").toString());
        
       ViewObject ordHold = getOrderHoldView();
       ordHold.setNamedWhereClauseParam("pHeaderId", header);
       ordHold.executeQuery();
        
        }

    /**
     * Container's getter for SeafarerOldNewView1.
     * @return SeafarerOldNewView1
     */
    public ViewObjectImpl getSeafarerOldNewView() {
        return (ViewObjectImpl) findViewObject("SeafarerOldNewView");
    }
    
    public String checkSeafarerNew()
    {
        ViewObject seafarer = getSeafarerIfaceView();
        Row row = seafarer.getCurrentRow();
        Integer seafarerId = Integer.parseInt(row.getAttribute("SeafarerId").toString());
        
        ViewObject seafarernew = getSeafarerOldNewView();
        seafarernew.setNamedWhereClauseParam("pSeafarerId", seafarerId);
        seafarernew.executeQuery();
        
        if(seafarernew.getRowCount() > 0)
        {
            
            return "old";
            }
        if(row.getAttribute("ConsentEdocId") != null)
        {
            return "old";
            }
        return "new";
        
        }

    /**
     * Container's getter for SeafarerOrderHistoryDetailsView1.
     * @return SeafarerOrderHistoryDetailsView1
     */
    public ViewObjectImpl getSeafarerOrderHistoryDetailsView() {
        return (ViewObjectImpl) findViewObject("SeafarerOrderHistoryDetailsView");
    }
    
    /**
    * Method maintains flag if user has changed Issue type manually or not.
    * @return String returns Y-Success else error message.
    **/

    public String updateIssueTypeManually(String updateFor)
    {
    try
    {
    System.out.println("updateFor :: "+updateFor);

    if (updateFor != null) {
    Row row = null;



    if (updateFor.equalsIgnoreCase("Book") || updateFor.equalsIgnoreCase("IDCard")) {
    row =
    (this.getSeafarerIfaceView().getCurrentRow() != null) ?
    this.getSeafarerIfaceView().getCurrentRow() : this.getSeafarerIfaceView().first();
    if (updateFor.equalsIgnoreCase("Book") && row != null) {
    System.out.println("updateFor Book :: " + updateFor);
    row.setAttribute("BookIssueTypeUpd", "Y");
    row.setAttribute("BookIssueTypeUpdDt", new java.sql.Timestamp(System.currentTimeMillis()));
    } else if (updateFor.equalsIgnoreCase("IDCard") && row != null) {
    System.out.println("updateFor IDCard :: " + updateFor);
    row.setAttribute("IdcardIssueTypeUpd", "Y");
    row.setAttribute("IdcardIssueTypeUpdDt", new java.sql.Timestamp(System.currentTimeMillis()));
    }



    } 
//    else if (updateFor.equalsIgnoreCase("OC")) {
//    row =
//    (this.getRmiSeafarerDocsOcView1().getCurrentRow() != null) ?
//    this.getRmiSeafarerDocsOcView1().getCurrentRow() : this.getRmiSeafarerDocsOcView1().first();



//    if (updateFor.equalsIgnoreCase("OC") && row != null) {
//    System.out.println("updateFor OC :: " + updateFor);
//    row.setAttribute("OcDocIssueTypeUpd", "Y");
//    row.setAttribute("OcDocIssueTypeUpdDt", new java.sql.Timestamp(System.currentTimeMillis()));
//    }
//    } else if (updateFor.equalsIgnoreCase("SQC")) {
//    row =
//    (this.getRmiSeafarerDocsSqcView1().getCurrentRow() != null) ?
//    this.getRmiSeafarerDocsSqcView1().getCurrentRow() : this.getRmiSeafarerDocsSqcView1().first();
//
//
//
////    if (updateFor.equalsIgnoreCase("SQC") && row != null) {
////    System.out.println("updateFor SQC :: " + updateFor);
////    row.setAttribute("SqcDocIssueTypeUpd", "Y");
////    row.setAttribute("SqcDocIssueTypeUpdDt", new java.sql.Timestamp(System.currentTimeMillis()));
////    }
//    }
    }
    } catch (Exception e) {
    e.printStackTrace();
    addFormattedFacesErrorMessage("System encountered an exception while updating "+" Issue type." +
    " Please contact your System Administrator." ,
    "", FacesMessage.SEVERITY_ERROR);
    }

    return "Y";
    }

    /**
     * Container's getter for OrderHeaderForShippingView1.
     * @return OrderHeaderForShippingView1
     */
    public ViewObjectImpl getOrderHeaderForShippingView() {
        return (ViewObjectImpl) findViewObject("OrderHeaderForShippingView");
    }
    
    public void updateInvoiceEmailFromTran(String emailid)
    {
        ViewObject batch = getBatchIfaceView();
        Row row = batch.getCurrentRow();
        row.setAttribute("InvoiceAgentEmailId", emailid);
        
        }

    /**
     * Container's getter for ContactIdByBatchIdView1.
     * @return ContactIdByBatchIdView1
     */
    public ViewObjectImpl getContactIdByBatchIdView() {
        return (ViewObjectImpl) findViewObject("ContactIdByBatchIdView");
    }

    /**
     * Container's getter for OnlineConsentBySeafarerIdView1.
     * @return OnlineConsentBySeafarerIdView1
     */
    public ViewObjectImpl getOnlineConsentBySeafarerIdView() {
        return (ViewObjectImpl) findViewObject("OnlineConsentBySeafarerIdView");
    }
    public  String getInvoiceAgentEmailID()
    {
        String email = null;
       ViewObject seafarer = getBatchIfaceView();
       Row row = seafarer.getCurrentRow();
       if(row.getAttribute("tranInvoiceAgentEmailId") != null)
       {
         email =  row.getAttribute("tranInvoiceAgentEmailId").toString(); 
           }
       return email;
        }
    
    public String checkForResubmit()
    {
        String res = "ok";
        int count =0;
      ViewObject seafarer = getSeafarerIfaceView();
      if(seafarer.getRowCount() > 0)
      {
       RowSetIterator rit = seafarer.createRowSetIterator(null);
       while(rit.hasNext())
       {
           Row row = rit.next();
          if(row.getAttribute("CorrectedFlag") != null && row.getAttribute("CorrectedFlag").toString().equalsIgnoreCase("Y")) 
          {
              count++;
              }
           
           }
          if(count == 0)
          {
           return "error";   
              }
          }
        return res;
        }    

    /**
     * Method inserts given logs into TMP_SEAFARER_LOGS table.
     * @param logDesc pass log description which you want to print.
     * @return String returns "Y"
     **/
    public void printTmpLogs(Object logDesc)
    {
        Connection con = null;
        CallableStatement st = null;
        PreparedStatement ps = null;
        DBTransaction dbTransaction = null;
            
        try 
        {            
            if(logDesc != null)
            {
                System.out.println("logDesc :: "+logDesc);
                try {
                    dbTransaction = (DBTransaction) this.getTransaction();
                    ps = dbTransaction.createPreparedStatement("select * from dual", 0);
                    ps.execute();
                    con = ps.getConnection();
                    st = con.prepareCall("call RMI_SICD_PUB.tmp_logs(?)");
                    st.setObject(1,logDesc.toString());
                    st.execute();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try 
            {
                if (st != null) {
                    st.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }
    }

    /** Method to print Batch currentRow EsiBatchId **/
    public void batchCurrentRow()
    {
        try 
        {
            ViewObject batchVo = getBatchIfaceView();
            Row row = (batchVo.getCurrentRow() != null) ? batchVo.getCurrentRow() : batchVo.first();

            if (row.getAttribute("EsiBatchId") != null)
                System.out.println("currentRow.EsiBatchId :: " + row.getAttribute("EsiBatchId"));
        } catch (Exception e) {
        }
    }

    /**
     * Container's getter for GetCategoryIdByCertificateTypeView1.
     * @return GetCategoryIdByCertificateTypeView1
     */
    public ViewObjectImpl getGetCategoryIdByCertificateTypeView() {
        return (ViewObjectImpl) findViewObject("GetCategoryIdByCertificateTypeView");
    }

    /**
     * Container's getter for GetOutfileNameByRequestView1.
     * @return GetOutfileNameByRequestView1
     */
    public ViewObjectImpl getGetOutfileNameByRequestView() {
        return (ViewObjectImpl) findViewObject("GetOutfileNameByRequestView");
    }
    public void onloadDeficientOrder(Integer user_id)
    {
        
      ViewObject rejected = getBatchesRejectedView();
      rejected.setNamedWhereClauseParam("pUserId", user_id);
      rejected.executeQuery();         
        }
    
    public String assignDeficientOrder(Integer user_id)
    {
        ViewObject rejected = getBatchesRejectedView();
        Row rejectedRow = rejected.getCurrentRow();
        if(rejectedRow != null)
        {
           if(rejectedRow.getAttribute("EsiBatchId") != null)
           {
     Integer p_batch_id = Integer.parseInt(rejectedRow.getAttribute("EsiBatchId").toString());          
                   ViewObject wfView = getWorkFlowView();
                   wfView.setNamedWhereClauseParam("pBatchId", p_batch_id);
                   wfView.executeQuery();

                   //            System.out.println(wfView.getRowCount());

                   RowSetIterator createRowSetIterator = wfView.createRowSetIterator(null);

                   while (createRowSetIterator.hasNext()) {
                       Row row = createRowSetIterator.next();
                       if (row.getAttribute("BatchStatus").toString().equalsIgnoreCase("Deficient")) {
                           row.setAttribute("LastUpdatedRow", "N");
                       }
                   }

                   Row createRow = wfView.createRow();
                   createRow.setAttribute("EsiBatchId", p_batch_id);
                   createRow.setAttribute("AssignedTo", user_id);
                   createRow.setAttribute("BatchStatus", "Deficient");
                   createRow.setAttribute("LastUpdatedRow", "Y");
                   wfView.insertRow(createRow);

                   this.getDBTransaction().commit();
               
               }
            
            
            
            
            }       
        rejected.executeQuery();
           return "null";
            }

    /**
     * Container's getter for MyTaskDeficientView1.
     * @return MyTaskDeficientView1
     */
    public ViewObjectImpl getMyTaskDeficientView() {
        return (ViewObjectImpl) findViewObject("MyTaskDeficientView");
    }
    
    public void onloadMyTaskDeficientOrder(Integer user_id)
    {
        
      ViewObject myTaskrejected = getMyTaskDeficientView();
      myTaskrejected.setNamedWhereClauseParam("pUserId", user_id);
      myTaskrejected.executeQuery();         
        }
    
    public void returnBatchMyTaskDeficient()
    {
            ViewObject rejected = getMyTaskDeficientView();
            Row rejectedRow = rejected.getCurrentRow();
            if(rejectedRow != null)
            {
               if(rejectedRow.getAttribute("EsiBatchId") != null)
               {
            Integer p_batch_id = Integer.parseInt(rejectedRow.getAttribute("EsiBatchId").toString());
                       ViewObject wfView = getWorkFlowView();
                       wfView.setNamedWhereClauseParam("pBatchId", p_batch_id);
                       wfView.executeQuery();

                       //            System.out.println(wfView.getRowCount());

                       RowSetIterator createRowSetIterator = wfView.createRowSetIterator(null);

                       while (createRowSetIterator.hasNext()) {
                           Row row = createRowSetIterator.next();
                           if (row.getAttribute("BatchStatus").toString().equalsIgnoreCase("Deficient")) {
                               row.setAttribute("LastUpdatedRow", "N");
                           }
                       }  
        
        
        }
            }
        this.getDBTransaction().commit();
        rejected.executeQuery();
    }
    
    public void callProcessOrderHeader()
        {
            try {
               
                Object rejected = ADFContext.getCurrent().getPageFlowScope().get("param_rejected_tab");
                if (rejected != null && rejected.toString().equalsIgnoreCase("yes")) {
                    try {
                        ViewObject batch = getBatchIfaceView();
                        Row batchRow = batch.getCurrentRow();
                        Integer batch_id = Integer.parseInt(batchRow.getAttribute("EsiBatchId").toString());
                        this.getDBTransaction().postChanges();
                        String expeditedSrc = (ADFContext.getCurrent().getPageFlowScope().get("P_EXPEDITED_SRC") != null)
                                             ? ADFContext.getCurrent().getPageFlowScope().get("P_EXPEDITED_SRC").toString()
                                             : null;
    //                    System.out.println("P_EXPEDITED_SRC :: "+ADFContext.getCurrent().getPageFlowScope().get("P_EXPEDITED_SRC"));
    //                    System.out.println("expeditedSrc :: "+expeditedSrc);
    //                    System.out.println("ExpeditedProcessing :: "+batchRow.getAttribute("ExpeditedProcessing"));
//                        callStoredFunction(sqlReturnType, stmt, bindVars)
                        
                        callStoredFunction(Types.VARCHAR, "RMI_SICD_PUB.update_order_header(?,?,?)", new Object[] {
                                                         batch_id, getUserId(), (expeditedSrc != null) ? batchRow.getAttribute("ExpeditedProcessing") : null
                        });
                        
                        ADFContext.getCurrent().getPageFlowScope().put("P_EXPEDITED_SRC", null);
                    } catch (Exception e) {
                        printTmpLogs("error in adding expedite line :: "+e.getMessage());
                        e.printStackTrace();
                        addFormattedFacesErrorMessage("There has been some error(s) while processing this order : ",
                                                               e.getMessage(), FacesMessage.SEVERITY_ERROR);
                    }
                } else {
    //                AdfUtils.addFormattedFacesErrorMessage("Work Order has not been generated for this batch. ", "",
    //                                                       FacesMessage.SEVERITY_ERROR);
                }
            } catch (Exception e) {
               addFormattedFacesErrorMessage("System encountered an exception while processing order." +
                                                       " Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            }
        }

    /**
     * Container's getter for GetCraEmailAddressForExternalView1.
     * @return GetCraEmailAddressForExternalView1
     */
    public ViewObjectImpl getGetCraEmailAddressForExternalView() {
        return (ViewObjectImpl) findViewObject("GetCraEmailAddressForExternalView");
    }
}


