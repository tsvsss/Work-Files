package com.rmi.tradecompapproval.adfbc.views.readonly;

import com.rmi.tradecompapproval.adfbc.services.RMITradeCompApprovalAppModuleImpl;

import com.rmi.tradecompapproval.adfbc.utils.AdfUtils;

import java.math.BigDecimal;

import java.sql.Timestamp;

import javax.faces.application.FacesMessage;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jan 08 12:33:47 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OrderLinesViewRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        SlNo,
        HeaderId,
        LineId,
        LineNumber,
        ShipmentNumber,
        InventoryItemId,
        OrderedQuantity,
        OrderQuantityUom,
        OrderedItem,
        ScheduleArrivalDate,
        TaxValue,
        UnitSellingPrice,
        SalesrepId,
        AuthorizedToShipFlag,
        Attribute1,
        Attribute2,
        Attribute3,
        Attribute4,
        Attribute5,
        Attribute6,
        Attribute19,
        Context,
        FlowStatusCode,
        DocPrintStatus,
        TransItemDescription,
        TransHoldFlag,
        TransExtendedPrice,
        TransLimitation,
        TransRestriction,
        TransOldDoc,
        TransSeafarer,
        TransShipCharges,
        TransItemUom,
        SeafarerId,
        TransLineHold,
        TransUnitQty,
        LovItemUomView1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return OrderLinesViewRowImpl.AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return OrderLinesViewRowImpl.AttributesEnum.firstIndex() +
                   OrderLinesViewRowImpl.AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = OrderLinesViewRowImpl.AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SLNO = AttributesEnum.SlNo.index();
    public static final int HEADERID = AttributesEnum.HeaderId.index();
    public static final int LINEID = AttributesEnum.LineId.index();
    public static final int LINENUMBER = AttributesEnum.LineNumber.index();
    public static final int SHIPMENTNUMBER = AttributesEnum.ShipmentNumber.index();
    public static final int INVENTORYITEMID = AttributesEnum.InventoryItemId.index();
    public static final int ORDEREDQUANTITY = AttributesEnum.OrderedQuantity.index();
    public static final int ORDERQUANTITYUOM = AttributesEnum.OrderQuantityUom.index();
    public static final int ORDEREDITEM = AttributesEnum.OrderedItem.index();
    public static final int SCHEDULEARRIVALDATE = AttributesEnum.ScheduleArrivalDate.index();
    public static final int TAXVALUE = AttributesEnum.TaxValue.index();
    public static final int UNITSELLINGPRICE = AttributesEnum.UnitSellingPrice.index();
    public static final int SALESREPID = AttributesEnum.SalesrepId.index();
    public static final int AUTHORIZEDTOSHIPFLAG = AttributesEnum.AuthorizedToShipFlag.index();
    public static final int ATTRIBUTE1 = AttributesEnum.Attribute1.index();
    public static final int ATTRIBUTE2 = AttributesEnum.Attribute2.index();
    public static final int ATTRIBUTE3 = AttributesEnum.Attribute3.index();
    public static final int ATTRIBUTE4 = AttributesEnum.Attribute4.index();
    public static final int ATTRIBUTE5 = AttributesEnum.Attribute5.index();
    public static final int ATTRIBUTE6 = AttributesEnum.Attribute6.index();
    public static final int ATTRIBUTE19 = AttributesEnum.Attribute19.index();
    public static final int CONTEXT = AttributesEnum.Context.index();
    public static final int FLOWSTATUSCODE = AttributesEnum.FlowStatusCode.index();
    public static final int DOCPRINTSTATUS = AttributesEnum.DocPrintStatus.index();
    public static final int TRANSITEMDESCRIPTION = AttributesEnum.TransItemDescription.index();
    public static final int TRANSHOLDFLAG = AttributesEnum.TransHoldFlag.index();
    public static final int TRANSEXTENDEDPRICE = AttributesEnum.TransExtendedPrice.index();
    public static final int TRANSLIMITATION = AttributesEnum.TransLimitation.index();
    public static final int TRANSRESTRICTION = AttributesEnum.TransRestriction.index();
    public static final int TRANSOLDDOC = AttributesEnum.TransOldDoc.index();
    public static final int TRANSSEAFARER = AttributesEnum.TransSeafarer.index();
    public static final int TRANSSHIPCHARGES = AttributesEnum.TransShipCharges.index();
    public static final int TRANSITEMUOM = AttributesEnum.TransItemUom.index();
    public static final int SEAFARERID = AttributesEnum.SeafarerId.index();
    public static final int TRANSLINEHOLD = AttributesEnum.TransLineHold.index();
    public static final int TRANSUNITQTY = AttributesEnum.TransUnitQty.index();
    public static final int LOVITEMUOMVIEW1 = AttributesEnum.LovItemUomView1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public OrderLinesViewRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute SlNo.
     * @return the SlNo
     */
    public Integer getSlNo() {
        return (Integer) getAttributeInternal(SLNO);
    }


    /**
     * Gets the attribute value for the calculated attribute HeaderId.
     * @return the HeaderId
     */
    public Integer getHeaderId() {
        return (Integer) getAttributeInternal(HEADERID);
    }

    /**
     * Gets the attribute value for the calculated attribute LineId.
     * @return the LineId
     */
    public Integer getLineId() {
        return (Integer) getAttributeInternal(LINEID);
    }

    /**
     * Gets the attribute value for the calculated attribute LineNumber.
     * @return the LineNumber
     */
    public Integer getLineNumber() {
        return (Integer) getAttributeInternal(LINENUMBER);
    }

    /**
     * Gets the attribute value for the calculated attribute ShipmentNumber.
     * @return the ShipmentNumber
     */
    public Integer getShipmentNumber() {
        return (Integer) getAttributeInternal(SHIPMENTNUMBER);
    }


    /**
     * Gets the attribute value for the calculated attribute InventoryItemId.
     * @return the InventoryItemId
     */
    public Integer getInventoryItemId() {
        return (Integer) getAttributeInternal(INVENTORYITEMID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrderedQuantity.
     * @return the OrderedQuantity
     */
    public Number getOrderedQuantity() {
        return (Number) getAttributeInternal(ORDEREDQUANTITY);
    }

    /**
     * Gets the attribute value for the calculated attribute OrderQuantityUom.
     * @return the OrderQuantityUom
     */
    public String getOrderQuantityUom() {
        return (String) getAttributeInternal(ORDERQUANTITYUOM);
    }

    /**
     * Gets the attribute value for the calculated attribute OrderedItem.
     * @return the OrderedItem
     */
    public String getOrderedItem() {
        return (String) getAttributeInternal(ORDEREDITEM);
    }

    /**
     * Gets the attribute value for the calculated attribute ScheduleArrivalDate.
     * @return the ScheduleArrivalDate
     */
    public Timestamp getScheduleArrivalDate() {
        return (Timestamp) getAttributeInternal(SCHEDULEARRIVALDATE);
    }

    /**
     * Gets the attribute value for the calculated attribute TaxValue.
     * @return the TaxValue
     */
    public Number getTaxValue() {
        return (Number) getAttributeInternal(TAXVALUE);
    }

    /**
     * Gets the attribute value for the calculated attribute UnitSellingPrice.
     * @return the UnitSellingPrice
     */
    public Number getUnitSellingPrice() {
        return (Number) getAttributeInternal(UNITSELLINGPRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute UnitSellingPrice.
     * @param value value to set the  UnitSellingPrice
     */
    public void setUnitSellingPrice(Number value) {
        setAttributeInternal(UNITSELLINGPRICE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SalesrepId.
     * @return the SalesrepId
     */
    public Integer getSalesrepId() {
        return (Integer) getAttributeInternal(SALESREPID);
    }

    /**
     * Gets the attribute value for the calculated attribute AuthorizedToShipFlag.
     * @return the AuthorizedToShipFlag
     */
    public String getAuthorizedToShipFlag() {
        return (String) getAttributeInternal(AUTHORIZEDTOSHIPFLAG);
    }

    /**
     * Gets the attribute value for the calculated attribute Attribute1.
     * @return the Attribute1
     */
    public String getAttribute1() {
        return (String) getAttributeInternal(ATTRIBUTE1);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Attribute1.
     * @param value value to set the  Attribute1
     */
    public void setAttribute1(String value) {
        setAttributeInternal(ATTRIBUTE1, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Attribute2.
     * @return the Attribute2
     */
    public String getAttribute2() {
        return (String) getAttributeInternal(ATTRIBUTE2);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Attribute2.
     * @param value value to set the  Attribute2
     */
    public void setAttribute2(String value) {
        setAttributeInternal(ATTRIBUTE2, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Attribute3.
     * @return the Attribute3
     */
    public String getAttribute3() {
        return (String) getAttributeInternal(ATTRIBUTE3);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Attribute3.
     * @param value value to set the  Attribute3
     */
    public void setAttribute3(String value) {
        setAttributeInternal(ATTRIBUTE3, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Attribute4.
     * @return the Attribute4
     */
    public String getAttribute4() {
        return (String) getAttributeInternal(ATTRIBUTE4);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Attribute4.
     * @param value value to set the  Attribute4
     */
    public void setAttribute4(String value) {
        setAttributeInternal(ATTRIBUTE4, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Attribute5.
     * @return the Attribute5
     */
    public String getAttribute5() {
        return (String) getAttributeInternal(ATTRIBUTE5);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Attribute5.
     * @param value value to set the  Attribute5
     */
    public void setAttribute5(String value) {
        setAttributeInternal(ATTRIBUTE5, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Attribute6.
     * @return the Attribute6
     */
    public String getAttribute6() {
        return (String) getAttributeInternal(ATTRIBUTE6);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Attribute6.
     * @param value value to set the  Attribute6
     */
    public void setAttribute6(String value) {
        setAttributeInternal(ATTRIBUTE6, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Attribute19.
     * @return the Attribute19
     */
    public String getAttribute19() {
        return (String) getAttributeInternal(ATTRIBUTE19);
    }

    /**
     * Gets the attribute value for the calculated attribute Context.
     * @return the Context
     */
    public String getContext() {
        return (String) getAttributeInternal(CONTEXT);
    }

    /**
     * Gets the attribute value for the calculated attribute FlowStatusCode.
     * @return the FlowStatusCode
     */
    public String getFlowStatusCode() {
        return (String) getAttributeInternal(FLOWSTATUSCODE);
    }

    /**
     * Gets the attribute value for the calculated attribute DocPrintStatus.
     * @return the DocPrintStatus
     */
    public String getDocPrintStatus() {
        return (String) getAttributeInternal(DOCPRINTSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DocPrintStatus.
     * @param value value to set the  DocPrintStatus
     */
    public void setDocPrintStatus(String value) {
        setAttributeInternal(DOCPRINTSTATUS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItemDescription.
     * @return the TransItemDescription
     */
    public String getTransItemDescription() 
    {
        try 
        {
            if (getAttributeInternal(TRANSITEMDESCRIPTION) == null && getInventoryItemId() != null) {
                ViewObjectImpl itemVo = getAm().getItemDescriptionView1();
                itemVo.setNamedWhereClauseParam("pItemId", getInventoryItemId());
                itemVo.executeQuery();

                Row[] itemRow = itemVo.getAllRowsInRange();

                if (itemRow.length > 0 && itemRow[0].getAttribute("Description") != null)
                    return itemRow[0].getAttribute("Description").toString();
            }
        } catch (Exception e) {
            // e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }   
        
        return (String) getAttributeInternal(TRANSITEMDESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItemDescription.
     * @param value value to set the  TransItemDescription
     */
    public void setTransItemDescription(String value) {
        setAttributeInternal(TRANSITEMDESCRIPTION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransHoldFlag.
     * @return the TransHoldFlag
     */
    public String getTransHoldFlag()
    {
        try 
        {
            ViewObjectImpl holdVo = getAm().getOrderHoldView1();
            holdVo.setNamedWhereClauseParam("pHeaderId", getHeaderId());
            holdVo.setNamedWhereClauseParam("pLineId", getLineId());
            holdVo.executeQuery();

            Row[] holdRow = holdVo.getAllRowsInRange();

            if (holdRow.length > 0 && holdRow[0].getAttribute("Hold") != null)
                return holdRow[0].getAttribute("Hold").toString();
            else
                return "Y";

        } catch (Exception e) {
            // e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return (String) getAttributeInternal(TRANSHOLDFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransHoldFlag.
     * @param value value to set the  TransHoldFlag
     */
    public void setTransHoldFlag(String value)
    {
        setAttributeInternal(TRANSHOLDFLAG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransExtendedPrice.
     * @return the TransExtendedPrice
     */
    public Number getTransExtendedPrice() 
    {
        try 
        {
            return (getOrderedQuantity().multiply(getUnitSellingPrice()));
            
        } catch (Exception e) {
            // e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return (Number) getAttributeInternal(TRANSEXTENDEDPRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransExtendedPrice.
     * @param value value to set the  TransExtendedPrice
     */
    public void setTransExtendedPrice(Number value) {
        setAttributeInternal(TRANSEXTENDEDPRICE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransLimitation.
     * @return the TransLimitation
     */
    public String getTransLimitation() {
        return (String) getAttributeInternal(TRANSLIMITATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransLimitation.
     * @param value value to set the  TransLimitation
     */
    public void setTransLimitation(String value) {
        setAttributeInternal(TRANSLIMITATION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransRestriction.
     * @return the TransRestriction
     */
    public String getTransRestriction() 
    {
        try 
        {
            if (getAttributeInternal(TRANSRESTRICTION) == null && getAttribute5() != null) {
                ViewObjectImpl rstrcnVo = getAm().getRestrictionsView1();
                rstrcnVo.executeQuery();

                Row[] fr = rstrcnVo.getFilteredRows("RestrictionId", Integer.parseInt(this.getAttribute5()));
                if (fr.length > 0 && fr[0].getAttribute("RestrictionName") != null)
                    return (String) fr[0].getAttribute("RestrictionName");
            }
        } catch (Exception e) {
            // e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANSRESTRICTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransRestriction.
     * @param value value to set the  TransRestriction
     */
    public void setTransRestriction(String value) {
        setAttributeInternal(TRANSRESTRICTION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOldDoc.
     * @return the TransOldDoc
     */
    public Integer getTransOldDoc()
    {
        try 
        {
            if (getAttributeInternal(TRANSOLDDOC) == null && this.getAttribute6() != null) {
                ViewObjectImpl oldDocVo = getAm().getAllPreviousDocsView1();
                oldDocVo.setNamedWhereClauseParam("pDocumentId", Integer.parseInt(this.getAttribute6()));
                oldDocVo.executeQuery();

                Row[] fr = oldDocVo.getAllRowsInRange();
                if (fr.length > 0 && fr[0].getAttribute("DocumentNumber") != null)
                    return (Integer) fr[0].getAttribute("DocumentNumber");
            }
        } catch (Exception e) {
            // e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (Integer) getAttributeInternal(TRANSOLDDOC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOldDoc.
     * @param value value to set the  TransOldDoc
     */
    public void setTransOldDoc(Integer value) {
        setAttributeInternal(TRANSOLDDOC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSeafarer.
     * @return the TransSeafarer
     */
    public String getTransSeafarer() 
    {        
        try 
        {
            if (getAttributeInternal(TRANSSEAFARER) == null && this.getAttribute1() != null) {
                ViewObjectImpl sfrrVo = getAm().getSicdSeafarersQueryView2();
                sfrrVo.setNamedWhereClauseParam("pSeafarerId", Integer.parseInt(this.getAttribute1()));
                sfrrVo.executeQuery();

                Row[] sfrrRow = sfrrVo.getAllRowsInRange();

                if (sfrrRow.length > 0 &&
                    ((sfrrRow[0].getAttribute("FirstName") != null) && (sfrrRow[0].getAttribute("LastName") != null))) {
                    return ((sfrrRow[0].getAttribute("FirstName").toString()) + " " +
                            (sfrrRow[0].getAttribute("LastName").toString()));
                }
            }
        } catch (Exception e) {
            // e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANSSEAFARER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSeafarer.
     * @param value value to set the  TransSeafarer
     */
    public void setTransSeafarer(String value) {
        setAttributeInternal(TRANSSEAFARER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransShipCharges.
     * @return the TransShipCharges
     */
    public Number getTransShipCharges()
    {
        try 
        {
            if (getAttributeInternal(TRANSSHIPCHARGES) != null)
                return (Number) getAttributeInternal(TRANSSHIPCHARGES);
            else {
                return (getUnitSellingPrice());
            }
        } catch (Exception e) {
            // e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return (Number) getAttributeInternal(TRANSSHIPCHARGES);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransShipCharges.
     * @param value value to set the  TransShipCharges
     */
    public void setTransShipCharges(Number value)
    {
        setAttributeInternal(TRANSSHIPCHARGES, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItemUom.
     * @return the TransItemUom
     */
    public String getTransItemUom()
    {
        if(getAttributeInternal(TRANSITEMUOM) == null && getOrderQuantityUom() != null)
            return getOrderQuantityUom();
//        
        return (String) getAttributeInternal(TRANSITEMUOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItemUom.
     * @param value value to set the  TransItemUom
     */
    public void setTransItemUom(String value) {
        setAttributeInternal(TRANSITEMUOM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SeafarerId.
     * @return the SeafarerId
     */
    public Integer getSeafarerId() 
    {
        if(this.getAttribute1() != null)
        {
            return Integer.parseInt(this.getAttribute1());
        }
        return new Integer(-1);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SeafarerId.
     * @param value value to set the  SeafarerId
     */
    public void setSeafarerId(Integer value) {
        setAttributeInternal(SEAFARERID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransPrintHold.
     * @return the TransPrintHold
     */
    public String getTransLineHold() 
    {
        try 
        {
            if (getAttributeInternal(TRANSLINEHOLD) == null && getHeaderId() != null && getLineId() != null) {
                ViewObjectImpl holdVo = getAm().getOrderLinesHoldFlagView1();
                holdVo.setNamedWhereClauseParam("pHeaderId", getHeaderId());
                holdVo.setNamedWhereClauseParam("pLineId", getLineId());
                holdVo.executeQuery();

                Row[] holdRow = holdVo.getAllRowsInRange();

                if (holdRow.length > 0 && holdRow[0].getAttribute("OrderHoldFlag") != null)
                    return holdRow[0].getAttribute("OrderHoldFlag").toString();
                else
                    return "N";
            }
        } catch (Exception e) {
            // e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching lines hold." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANSLINEHOLD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransPrintHold.
     * @param value value to set the  TransPrintHold
     */
    public void setTransLineHold(String value) {
        setAttributeInternal(TRANSLINEHOLD, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransUnitQty.
     * @return the TransUnitQty
     */
    public Integer getTransUnitQty() 
    {
        try 
        {
            if (getAttributeInternal(TRANSUNITQTY) != null)
                return (Integer) getAttributeInternal(TRANSUNITQTY);
            else {
                if(getOrderedQuantity() != null)
                    return (getOrderedQuantity().intValue());
            }
        } catch (Exception e) {
            // e.printStackTrace();
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return (Integer) getAttributeInternal(TRANSUNITQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransUnitQty.
     * @param value value to set the  TransUnitQty
     */
    public void setTransUnitQty(Integer value) {
        setAttributeInternal(TRANSUNITQTY, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovItemUomView1.
     */
    public RowSet getLovItemUomView1() {
        return (RowSet) getAttributeInternal(LOVITEMUOMVIEW1);
    }

    public RMITradeCompApprovalAppModuleImpl getAm()
    {
        return (RMITradeCompApprovalAppModuleImpl) this.getApplicationModule();
    }
}

