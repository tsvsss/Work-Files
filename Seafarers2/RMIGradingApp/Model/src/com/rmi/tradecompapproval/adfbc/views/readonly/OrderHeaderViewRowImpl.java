package com.rmi.tradecompapproval.adfbc.views.readonly;

import com.rmi.tradecompapproval.adfbc.services.RMITradeCompApprovalAppModuleImpl;

import com.rmi.tradecompapproval.adfbc.utils.AdfUtils;

import java.math.BigDecimal;

import java.sql.Timestamp;

import javax.faces.application.FacesMessage;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jan 08 11:50:39 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OrderHeaderViewRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        SlNo,
        HeaderId,
        SoldToOrgId,
        OrderTypeId,
        CustPoNumber,
        OrderNumber,
        ShipToOrgId,
        ShipToContactId,
        InvoiceToOrgId,
        InvoiceToContactId,
        DeliverToOrgId,
        DeliverToContactId,
        CreationDate,
        CreatedBy,
        Attribute12,
        TransShipToAddress,
        TransBillToAddress,
        TransSubtotal,
        TransTaxAmount,
        TransCharges,
        TransTotal,
        TransDeliverToAddress,
        TransShipToContactName,
        TransBillToContactName,
        TransDeliverToContactName,
        TransOrderHold,
        TransHoldReleaseReasonCode,
        TransReleaseReasonDesc,
        TransStatus,
        PrintReportRequestSet,
        EnterOrderLinesRO,
        ReleaseHoldReasonView1,
        PrintRequestSetsView1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return OrderHeaderViewRowImpl.AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return OrderHeaderViewRowImpl.AttributesEnum.firstIndex() +
                   OrderHeaderViewRowImpl.AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = OrderHeaderViewRowImpl.AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SLNO = AttributesEnum.SlNo.index();
    public static final int HEADERID = AttributesEnum.HeaderId.index();
    public static final int SOLDTOORGID = AttributesEnum.SoldToOrgId.index();
    public static final int ORDERTYPEID = AttributesEnum.OrderTypeId.index();
    public static final int CUSTPONUMBER = AttributesEnum.CustPoNumber.index();
    public static final int ORDERNUMBER = AttributesEnum.OrderNumber.index();
    public static final int SHIPTOORGID = AttributesEnum.ShipToOrgId.index();
    public static final int SHIPTOCONTACTID = AttributesEnum.ShipToContactId.index();
    public static final int INVOICETOORGID = AttributesEnum.InvoiceToOrgId.index();
    public static final int INVOICETOCONTACTID = AttributesEnum.InvoiceToContactId.index();
    public static final int DELIVERTOORGID = AttributesEnum.DeliverToOrgId.index();
    public static final int DELIVERTOCONTACTID = AttributesEnum.DeliverToContactId.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int ATTRIBUTE12 = AttributesEnum.Attribute12.index();
    public static final int TRANSSHIPTOADDRESS = AttributesEnum.TransShipToAddress.index();
    public static final int TRANSBILLTOADDRESS = AttributesEnum.TransBillToAddress.index();
    public static final int TRANSSUBTOTAL = AttributesEnum.TransSubtotal.index();
    public static final int TRANSTAXAMOUNT = AttributesEnum.TransTaxAmount.index();
    public static final int TRANSCHARGES = AttributesEnum.TransCharges.index();
    public static final int TRANSTOTAL = AttributesEnum.TransTotal.index();
    public static final int TRANSDELIVERTOADDRESS = AttributesEnum.TransDeliverToAddress.index();
    public static final int TRANSSHIPTOCONTACTNAME = AttributesEnum.TransShipToContactName.index();
    public static final int TRANSBILLTOCONTACTNAME = AttributesEnum.TransBillToContactName.index();
    public static final int TRANSDELIVERTOCONTACTNAME = AttributesEnum.TransDeliverToContactName.index();
    public static final int TRANSORDERHOLD = AttributesEnum.TransOrderHold.index();
    public static final int TRANSHOLDRELEASEREASONCODE = AttributesEnum.TransHoldReleaseReasonCode.index();
    public static final int TRANSRELEASEREASONDESC = AttributesEnum.TransReleaseReasonDesc.index();
    public static final int TRANSSTATUS = AttributesEnum.TransStatus.index();
    public static final int PRINTREPORTREQUESTSET = AttributesEnum.PrintReportRequestSet.index();
    public static final int ENTERORDERLINESRO = AttributesEnum.EnterOrderLinesRO.index();
    public static final int RELEASEHOLDREASONVIEW1 = AttributesEnum.ReleaseHoldReasonView1.index();
    public static final int PRINTREQUESTSETSVIEW1 = AttributesEnum.PrintRequestSetsView1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public OrderHeaderViewRowImpl() {
    }


    /**
     * Gets the attribute value for the calculated attribute SlNo.
     * @return the SlNo
     */
    public Integer getSlNo() {
        return (Integer) getAttributeInternal(SLNO);
    }

    /**
     * Gets the attribute value for the calculated attribute HeaderId.
     * @return the HeaderId
     */
    public Integer getHeaderId() {
        return (Integer) getAttributeInternal(HEADERID);
    }

    /**
     * Gets the attribute value for the calculated attribute SoldToOrgId.
     * @return the SoldToOrgId
     */
    public Integer getSoldToOrgId() {
        return (Integer) getAttributeInternal(SOLDTOORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrderTypeId.
     * @return the OrderTypeId
     */
    public Integer getOrderTypeId() {
        return (Integer) getAttributeInternal(ORDERTYPEID);
    }

    /**
     * Gets the attribute value for the calculated attribute CustPoNumber.
     * @return the CustPoNumber
     */
    public String getCustPoNumber() {
        return (String) getAttributeInternal(CUSTPONUMBER);
    }

    /**
     * Gets the attribute value for the calculated attribute OrderNumber.
     * @return the OrderNumber
     */
    public Integer getOrderNumber() {
        return (Integer) getAttributeInternal(ORDERNUMBER);
    }

    /**
     * Gets the attribute value for the calculated attribute ShipToOrgId.
     * @return the ShipToOrgId
     */
    public Integer getShipToOrgId() {
        return (Integer) getAttributeInternal(SHIPTOORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute ShipToContactId.
     * @return the ShipToContactId
     */
    public Integer getShipToContactId() {
        return (Integer) getAttributeInternal(SHIPTOCONTACTID);
    }

    /**
     * Gets the attribute value for the calculated attribute InvoiceToOrgId.
     * @return the InvoiceToOrgId
     */
    public Integer getInvoiceToOrgId() {
        return (Integer) getAttributeInternal(INVOICETOORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute InvoiceToContactId.
     * @return the InvoiceToContactId
     */
    public Integer getInvoiceToContactId() {
        return (Integer) getAttributeInternal(INVOICETOCONTACTID);
    }

    /**
     * Gets the attribute value for the calculated attribute DeliverToOrgId.
     * @return the DeliverToOrgId
     */
    public Integer getDeliverToOrgId() {
        return (Integer) getAttributeInternal(DELIVERTOORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute DeliverToContactId.
     * @return the DeliverToContactId
     */
    public Integer getDeliverToContactId() {
        return (Integer) getAttributeInternal(DELIVERTOCONTACTID);
    }

    /**
     * Gets the attribute value for the calculated attribute CreationDate.
     * @return the CreationDate
     */
    public Timestamp getCreationDate() {
        return (Timestamp) getAttributeInternal(CREATIONDATE);
    }

    /**
     * Gets the attribute value for the calculated attribute CreatedBy.
     * @return the CreatedBy
     */
    public BigDecimal getCreatedBy() {
        return (BigDecimal) getAttributeInternal(CREATEDBY);
    }

    /**
     * Gets the attribute value for the calculated attribute Attribute12.
     * @return the Attribute12
     */
    public String getAttribute12() {
        return (String) getAttributeInternal(ATTRIBUTE12);
    }

    /**
     * Gets the attribute value for the calculated attribute TransShipToAddress.
     * @return the TransShipToAddress
     */
    public String getTransShipToAddress() 
    {
        try 
        {
            if (getAttributeInternal(TRANSSHIPTOADDRESS) == null && getDeliverToOrgId() != null) {
                ViewObjectImpl addressVo = getAm().getAddressView1();
                addressVo.setNamedWhereClauseParam("pOrgId", getDeliverToOrgId());
                addressVo.executeQuery();

                Row[] addressRow = addressVo.getAllRowsInRange();

                if (addressRow.length > 0 && addressRow[0].getAttribute("Address") != null)
                    return addressRow[0].getAttribute("Address").toString();
            }
        } catch (Exception e) {
            // e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return (String) getAttributeInternal(TRANSSHIPTOADDRESS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransShipToAddress.
     * @param value value to set the  TransShipToAddress
     */
    public void setTransShipToAddress(String value) {
        setAttributeInternal(TRANSSHIPTOADDRESS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransBillToAddress.
     * @return the TransBillToAddress
     */
    public String getTransBillToAddress() 
    {
        try 
        {
            if (getAttributeInternal(TRANSBILLTOADDRESS) == null && getOrderNumber() != null) {
                ViewObjectImpl addressVo = getAm().getAddressView1();
                addressVo.setNamedWhereClauseParam("pOrgId", this.getInvoiceToOrgId());
                addressVo.executeQuery();

                Row[] addressRow = addressVo.getAllRowsInRange();

                if (addressRow.length > 0 && addressRow[0].getAttribute("Address") != null)
                    return addressRow[0].getAttribute("Address").toString();
            }
        } catch (Exception e) {
            // e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return (String) getAttributeInternal(TRANSBILLTOADDRESS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransBillToAddress.
     * @param value value to set the  TransBillToAddress
     */
    public void setTransBillToAddress(String value) {
        setAttributeInternal(TRANSBILLTOADDRESS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSubtotal.
     * @return the TransSubtotal
     */
    public Number getTransSubtotal() {
        return (Number) getAttributeInternal(TRANSSUBTOTAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSubtotal.
     * @param value value to set the  TransSubtotal
     */
    public void setTransSubtotal(Number value) {
        setAttributeInternal(TRANSSUBTOTAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTaxAmount.
     * @return the TransTaxAmount
     */
    public Number getTransTaxAmount() {
        return (Number) getAttributeInternal(TRANSTAXAMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTaxAmount.
     * @param value value to set the  TransTaxAmount
     */
    public void setTransTaxAmount(Number value) {
        setAttributeInternal(TRANSTAXAMOUNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCharges.
     * @return the TransCharges
     */
    public Number getTransCharges() {
        return (Number) getAttributeInternal(TRANSCHARGES);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCharges.
     * @param value value to set the  TransCharges
     */
    public void setTransCharges(Number value) {
        setAttributeInternal(TRANSCHARGES, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTotal.
     * @return the TransTotal
     */
    public Number getTransTotal() 
    {
        try 
        {
                Number orderTotal = new Number(0);
                ViewObjectImpl linesVo = getAm().getOrderLinesView1();
                RowSetIterator linesRsi = linesVo.createRowSetIterator(null);

                while (linesRsi.hasNext()) {
                    Row r = linesRsi.next();

                    if (r.getAttribute("TransExtendedPrice") != null) {
                        orderTotal = orderTotal.add((Number) r.getAttribute("TransExtendedPrice"));
                    }
                }
                return orderTotal;
        } catch (Exception e) {
            // e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }    
        return (Number) getAttributeInternal(TRANSTOTAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTotal.
     * @param value value to set the  TransTotal
     */
    public void setTransTotal(Number value) {
        setAttributeInternal(TRANSTOTAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransDeliverToAddress.
     * @return the TransDeliverToAddress
     */
    public String getTransDeliverToAddress() 
    {
        try 
        {
            if (getAttributeInternal(TRANSDELIVERTOADDRESS) == null && getShipToOrgId() != null) {
                ViewObjectImpl addressVo = getAm().getAddressView1();
                addressVo.setNamedWhereClauseParam("pOrgId", this.getShipToOrgId());
                addressVo.executeQuery();

                Row[] addressRow = addressVo.getAllRowsInRange();

                if (addressRow.length > 0 && addressRow[0].getAttribute("Address") != null)
                    return addressRow[0].getAttribute("Address").toString();
            }
        } catch (Exception e) {
            // e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return (String) getAttributeInternal(TRANSDELIVERTOADDRESS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransDeliverToAddress.
     * @param value value to set the  TransDeliverToAddress
     */
    public void setTransDeliverToAddress(String value) {
        setAttributeInternal(TRANSDELIVERTOADDRESS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransShipToContactName.
     * @return the TransShipToContactName
     */
    public String getTransShipToContactName() 
    {
        try
        {
           if (getAttributeInternal(TRANSSHIPTOCONTACTNAME) == null && getHeaderId() != null) {
                ViewObjectImpl batchVo = getAm().getBatchDetailsView1();
                batchVo.setNamedWhereClauseParam("pHeaderId", getHeaderId());
                batchVo.executeQuery();
                
                Row[] batchRows = batchVo.getAllRowsInRange();
                if(batchRows.length > 0 && batchRows[0] != null 
                   && batchRows[0].getAttribute("ShipToCustAccountId") != null)
                {
                    ViewObjectImpl customerVo = getAm().getAllCustomersView2();
                    customerVo.setNamedWhereClauseParam("pCustAccId", batchRows[0].getAttribute("ShipToCustAccountId"));
                    customerVo.executeQuery();

                    Row[] customerRow = customerVo.getAllRowsInRange();
                    if (customerRow.length > 0 && customerRow[0].getAttribute("PartyName") != null) {
                        return (customerRow[0].getAttribute("PartyName").toString());
                    }
                }
            }
        } catch (Exception e) {
            // e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANSSHIPTOCONTACTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransShipToContactName.
     * @param value value to set the  TransShipToContactName
     */
    public void setTransShipToContactName(String value) {
        setAttributeInternal(TRANSSHIPTOCONTACTNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransBillToContactName.
     * @return the TransBillToContactName
     */
    public String getTransBillToContactName() 
    {
        try
        {
           if (getAttributeInternal(TRANSBILLTOCONTACTNAME) == null && this.getHeaderId() != null) {
                ViewObjectImpl batchVo = getAm().getBatchDetailsView1();
                batchVo.setNamedWhereClauseParam("pHeaderId", getHeaderId());
                batchVo.executeQuery();
                
                Row[] batchRows = batchVo.getAllRowsInRange();
                if(batchRows.length > 0 && batchRows[0] != null 
                   && batchRows[0].getAttribute("BillToCustAccountId") != null)
                {
                    ViewObjectImpl customerVo = getAm().getAllCustomersView2();
                    customerVo.setNamedWhereClauseParam("pCustAccId", batchRows[0].getAttribute("BillToCustAccountId"));
                    customerVo.executeQuery();

                    Row[] customerRow = customerVo.getAllRowsInRange();
                    if (customerRow.length > 0 && customerRow[0].getAttribute("PartyName") != null) {
                        return (customerRow[0].getAttribute("PartyName").toString());
                    }
                }
            }
        } catch (Exception e) {
            // e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANSBILLTOCONTACTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransBillToContactName.
     * @param value value to set the  TransBillToContactName
     */
    public void setTransBillToContactName(String value) {
        setAttributeInternal(TRANSBILLTOCONTACTNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransDeliverToContactName.
     * @return the TransDeliverToContactName
     */
    public String getTransDeliverToContactName() 
    {
        try 
        {
            if (getAttributeInternal(TRANSDELIVERTOCONTACTNAME) == null && this.getHeaderId() != null) {
                ViewObjectImpl batchVo = getAm().getBatchDetailsView1();
                batchVo.setNamedWhereClauseParam("pHeaderId", getHeaderId());
                batchVo.executeQuery();
                
                Row[] batchRows = batchVo.getAllRowsInRange();
                if(batchRows.length > 0 && batchRows[0] != null 
                   && batchRows[0].getAttribute("DeliverToCustAccountId") != null)
                {
                    ViewObjectImpl customerVo = getAm().getCustAccountDeliverToView1();
                    customerVo.setNamedWhereClauseParam("pUserId", batchRows[0].getAttribute("CreatedBy"));
                    customerVo.setNamedWhereClauseParam("pCustAccId", batchRows[0].getAttribute("DeliverToCustAccountId"));
                    customerVo.executeQuery();

                    Row[] customerRow = customerVo.getAllRowsInRange();
                    if (customerRow.length > 0 && customerRow[0].getAttribute("PartyName") != null) {
                        return (customerRow[0].getAttribute("PartyName").toString());
                    }
                }
            }
        } catch (Exception e) {
            // e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANSDELIVERTOCONTACTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransDeliverToContactName.
     * @param value value to set the  TransDeliverToContactName
     */
    public void setTransDeliverToContactName(String value) {
        setAttributeInternal(TRANSDELIVERTOCONTACTNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOrderHold.
     * @return the TransOrderHold
     */
    public String getTransOrderHold() 
    {
        try 
        {
            if (getAttributeInternal(TRANSORDERHOLD) == null && getHeaderId() != null) {
                ViewObjectImpl holdVo = getAm().getOrderHoldFlagView1();
                holdVo.setNamedWhereClauseParam("pHeaderId", getHeaderId());
                holdVo.executeQuery();

                Row[] holdRow = holdVo.getAllRowsInRange();

                if (holdRow.length > 0 && holdRow[0].getAttribute("OrderHoldFlag") != null)
                    return holdRow[0].getAttribute("OrderHoldFlag").toString();
                else
                    return "N";
            }
        } catch (Exception e) {
            // e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANSORDERHOLD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOrderHold.
     * @param value value to set the  TransOrderHold
     */
    public void setTransOrderHold(String value) {
        setAttributeInternal(TRANSORDERHOLD, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransHoldReleaseReasonCode.
     * @return the TransHoldReleaseReasonCode
     */
    public String getTransHoldReleaseReasonCode() {
        return (String) getAttributeInternal(TRANSHOLDRELEASEREASONCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransHoldReleaseReasonCode.
     * @param value value to set the  TransHoldReleaseReasonCode
     */
    public void setTransHoldReleaseReasonCode(String value) {
        setAttributeInternal(TRANSHOLDRELEASEREASONCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransReleaseReasonDesc.
     * @return the TransReleaseReasonDesc
     */
    public String getTransReleaseReasonDesc() {
        return (String) getAttributeInternal(TRANSRELEASEREASONDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransReleaseReasonDesc.
     * @param value value to set the  TransReleaseReasonDesc
     */
    public void setTransReleaseReasonDesc(String value) {
        setAttributeInternal(TRANSRELEASEREASONDESC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransStatus.
     * @return the TransStatus
     */
    public String getTransStatus() 
    {
        try 
        {
            if (getAttributeInternal(TRANSSTATUS) == null && this.getHeaderId() != null) {
                ViewObjectImpl odrStsVo = getAm().getOrderStatusView1();
                odrStsVo.setNamedWhereClauseParam("pHeaderId", this.getHeaderId());
                odrStsVo.executeQuery();

                Row[] odrStsRow = odrStsVo.getAllRowsInRange();

                if (odrStsRow.length > 0 && odrStsRow[0].getAttribute("OrderStatus") != null) {
                    return odrStsRow[0].getAttribute("OrderStatus").toString();
                }
            }
        } catch (Exception e) {
            // e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANSSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransStatus.
     * @param value value to set the  TransStatus
     */
    public void setTransStatus(String value) {
        setAttributeInternal(TRANSSTATUS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PrintReportRequestSet.
     * @return the PrintReportRequestSet
     */
    public String getPrintReportRequestSet() {
        return (String) getAttributeInternal(PRINTREPORTREQUESTSET);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PrintReportRequestSet.
     * @param value value to set the  PrintReportRequestSet
     */
    public void setPrintReportRequestSet(String value) {
        setAttributeInternal(PRINTREPORTREQUESTSET, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link EnterOrderLinesRO.
     */
    public RowIterator getEnterOrderLinesRO() {
        return (RowIterator) getAttributeInternal(ENTERORDERLINESRO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> ReleaseHoldReasonView1.
     */
    public RowSet getReleaseHoldReasonView1() {
        return (RowSet) getAttributeInternal(RELEASEHOLDREASONVIEW1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> PrintRequestSetsView1.
     */
    public RowSet getPrintRequestSetsView1() {
        return (RowSet) getAttributeInternal(PRINTREQUESTSETSVIEW1);
    }

    public RMITradeCompApprovalAppModuleImpl getAm()
    {
        return (RMITradeCompApprovalAppModuleImpl) this.getApplicationModule();
    }
}

