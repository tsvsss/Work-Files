package com.rmi.shippartialorder.adfbc.services;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import oracle.adf.share.ADFContext;
import com.rmi.shippartialorder.adfbc.services.common.ShipPartialOrderAppModule;

import com.rmi.shippartialorder.adfbc.utils.AdfUtils;

import javax.faces.application.FacesMessage;

import oracle.adfdt.model.objects.Application;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 13 14:55:35 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ShipPartialOrderAppModuleImpl extends ApplicationModuleImpl implements ShipPartialOrderAppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public ShipPartialOrderAppModuleImpl() {
    }

    /**
     * Method to filter batch data 
     */
    public void filterShipOrderByNumber() {
        try {
            ADFContext adfContext = ADFContext.getCurrent();
            Integer batch_id = Integer.parseInt(adfContext.getPageFlowScope().get("p_batch_id").toString());
            
            ViewObject batchVo = getBatchIfaceView();
            batchVo.setNamedWhereClauseParam("pEsiBatchId", batch_id);
            batchVo.executeQuery();
            
            ViewObject batchAddView = getBatchAdditionalDetailsView();
            batchAddView.setNamedWhereClauseParam("pBatchId", batch_id);
            batchAddView.executeQuery();
            
            
            ViewObject ordersVo = getOrderHeaderView();
            ordersVo.setNamedWhereClauseParam("pBatchId", batch_id);
            ordersVo.executeQuery();
            Integer p_header_id = Integer.parseInt(adfContext.getPageFlowScope().get("p_header_id").toString());

            ViewObject prtVo = getOrderShippingPartialView();
            prtVo.setNamedWhereClauseParam("pHeaderId", p_header_id);
            prtVo.executeQuery();
            
            ViewObject countShip = getGetSeafarerCountShippingView();
            countShip.setNamedWhereClauseParam("pHeaderId", p_header_id);
            countShip.executeQuery();
            
            ViewObject countBatch = getGetSeafarerCountBatchView();
            countBatch.setNamedWhereClauseParam("pBatchId", batch_id);
            countBatch.executeQuery();
            
            ViewObject holdView = getOrderHoldView();
            holdView.setNamedWhereClauseParam("pHeaderId", p_header_id);
            holdView.executeQuery();
            
            
        } catch (Exception nfe) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
            "Please contact your System Administrator." , 
            "", FacesMessage.SEVERITY_ERROR);
            nfe.printStackTrace();
        }
           
//        BigDecimal odr_num = new BigDecimal(odr_nums);
//        System.out.println("Order Number = "+odr_num);
//        ViewObject odrVO = this.getSicdOrders2VwEOView1();
//        odrVO.setWhereClause("Order_Number=" + odr_num);
//        odrVO.executeQuery();
//        int lg = odrVO.getRowCount();
//        BigDecimal hdrID=null;
//        System.out.println("................"+lg);
//            System.out.println(odrVO.getRowCount()+"/./././././././");
//        Row row = odrVO.getCurrentRow();
//        String hid = row.getAttribute("HeaderId").toString();
//        System.out.println("___________"+hid);
//        hdrID = new BigDecimal(hid);
//        System.out.println("___________"+hdrID);
//        System.out.println("HDR ID = "+hdrID);
//        ViewObject odrPartVO = this.getSicdShipPartialVwEOView1();
//        odrPartVO.setWhereClause("HEADER_ID=" + hdrID);
//        odrPartVO.executeQuery();
//        System.out.println("length Partial......== "+odrPartVO.getAllRowsInRange().length);

    }
    
    /**
     * Method to update tracking number.
     * call callUpdateProcedure method.
     */
    public String updateTrackingNumber() {
        String res = "success";
        try {
            
            Row[] shipSelected = getOrderShippingPartialView().getFilteredRows("tranShipLine", "Y");

            if (shipSelected.length > 0) 
            {
                ViewObject ordVo = getOrderHeaderView();
                Row currRow = ordVo.getCurrentRow();
//                if (currRow.getAttribute("tranTrackingNumber") == null) {
//                    return "track";
//                } else 
                if (currRow.getAttribute("TransShippingMethod") == null) {
                    return "method";
                } else if (currRow.getAttribute("Description") == null) {
                    return "description";
                } else if (currRow.getAttribute("OrderHold") != null) {
                    return "credithold";
                } else {
                    ADFContext adfContext = ADFContext.getCurrent();
                    SequenceImpl s = new SequenceImpl("rmi_seafarer.rmi_sicd_ship_order_stg_s", getDBTransaction());
                    Integer batch_id = Integer.parseInt(s.getSequenceNumber().toString());
                    System.out.println("batchId :: " + batch_id);
                    adfContext.getPageFlowScope().put("track_no", batch_id);
                    ViewObject prtVo = getOrderShippingPartialView();
                    RowSetIterator createRowSetIterator = prtVo.createRowSetIterator(null);
                    while (createRowSetIterator.hasNext()) {
                        Row row = createRowSetIterator.next();
                        if (row.getAttribute("tranShipLine") != null) {
                            if (row.getAttribute("tranShipLine").toString().equalsIgnoreCase("Y")) {
                                Integer deliveryDetailId =
                                    Integer.parseInt(row.getAttribute("DeliveryDetailId").toString());

                                System.out.println("LineId :: "+row.getAttribute("LineId"));
                                Object stat = callStoredFunction(Types.VARCHAR, "rmi_sicd_pub.add_ship_order_stg(?,?,?)", new Object[] {
                                                                 batch_id, deliveryDetailId, row.getAttribute("LineId")
                                });
                            }
                        }
                    }
                    String tracking_number = ((currRow.getAttribute("tranTrackingNumber") != null) 
                                                ? currRow.getAttribute("tranTrackingNumber").toString()
                                                : "");
                    String shippingInstrc = ((currRow.getAttribute("Description") != null) 
                                                ? currRow.getAttribute("Description").toString()
                                                : "");
                    String shippingMethod = ((currRow.getAttribute("TransShippingMethod") != null) 
                                                ? currRow.getAttribute("TransShippingMethod").toString()
                                                : null);
                    this.getDBTransaction().commit();
                    System.out.println("tracking_number :: " + tracking_number);
                    System.out.println("HeaderId :: "+currRow.getAttribute("HeaderId"));
                    System.out.println("Shipping method :: "+shippingMethod);
                    System.out.println("description :: "+shippingInstrc);
                    res = callUpdateProcedure(batch_id, tracking_number, shippingMethod, shippingInstrc, 
                                                (Integer) currRow.getAttribute("HeaderId"));
                    System.out.println("res in AM :: "+res);
                    prtVo.executeQuery();
                }
            }
            else 
                return "selected";
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating track number." +
                                                   "Please contact your System Administrator.", "",
                                                   FacesMessage.SEVERITY_ERROR);
        }
        return res;
    }

    /**
     * Method to ship documents.
     * call callshipProcedure method.
     */
    public String shipButton() {
        String res = "success";

        try {
            Integer totalShipped = getOrderShippingPartialView().getRowCount();
            Row[] shipSelectedRows = getOrderShippingPartialView().getFilteredRows("tranShipLine", "Y");
            Integer shipSelected = shipSelectedRows.length;
            if (shipSelected > 0) {
                
//                RowSetIterator shipPartialRsi = this.getOrderShippingPartialView().createRowSetIterator(null);
//                
//                while(shipPartialRsi.hasNext())
//                {
//                    Row r = shipPartialRsi.next();
//                    
//                    if(r != null && r.getAttribute("DocPrintStatus") != null)
//                    {                        
//                        if((r.getAttribute("DocPrintStatus").toString().equalsIgnoreCase("N") 
//                            || r.getAttribute("DocPrintStatus").toString().equalsIgnoreCase("true"))
//                            && (r.getAttribute("SeafarerId") != null && r.getAttribute("DocumentNumber") != -99
//                                && !(r.getAttribute("DeliveryStatus").toString().equalsIgnoreCase("CANCELLED"))))
//                            return "Cannot Ship order as some documents are not printed yet.";
//                    }
//                }
                
                ViewObject ordVo = getOrderHeaderView();
                Row currRow = ordVo.getCurrentRow();
                if (currRow.getAttribute("OrderStatus") != null) {
                    if (!currRow.getAttribute("OrderStatus").toString().equalsIgnoreCase("BOOKED")) {
                        return "Order must be in Booked status.";
                    }
                } else {
                    return "Order must be in Booked status.";
                }
                if (currRow.getAttribute("OrderHold") != null) {
                    return "Order is on credit hold.";
                }

                if (currRow.getAttribute("tranTrackingNumber") != null) {

                    ADFContext adfContext = ADFContext.getCurrent();
                    SequenceImpl s = new SequenceImpl("rmi_seafarer.rmi_sicd_ship_order_stg_s", getDBTransaction());
                    Integer batch_id = Integer.parseInt(s.getSequenceNumber().toString());
                    adfContext.getPageFlowScope().put("track_no", batch_id);
                    ViewObject prtVo = getOrderShippingPartialView();
                    RowSetIterator createRowSetIterator = prtVo.createRowSetIterator(null);

                    while (createRowSetIterator.hasNext()) {
                        Row row = createRowSetIterator.next();
                        if (row.getAttribute("tranShipLine") != null) {
                            if (row.getAttribute("tranShipLine").toString().equalsIgnoreCase("Y")) {
                                Integer deliveryDetailId =
                                    Integer.parseInt(row.getAttribute("DeliveryDetailId").toString());

                                Object stat = callStoredFunction(Types.VARCHAR, "rmi_sicd_pub.add_ship_order_stg(?,?,?)", new Object[] {
                                                                 batch_id, deliveryDetailId, row.getAttribute("LineId")
                                                    });
                                System.out.println("stat : "+stat);
                            }
                        }
                    }

                    String tracking_number = currRow.getAttribute("tranTrackingNumber").toString();
                                    System.out.println(batch_id + "----" + tracking_number);
                    String shippingInstrc = ((currRow.getAttribute("Description") != null) 
                                                ? currRow.getAttribute("Description").toString()
                                                : "");
                    System.out.println("shippingInstrc : "+shippingInstrc);
                    res = callshipProcedure(batch_id, tracking_number, currRow.getAttribute("TransShippingMethod").toString(), 
                                               shippingInstrc, (Integer) currRow.getAttribute("HeaderId"));
                    prtVo.executeQuery();
                    System.out.println("res : "+res);

                   ViewObject countShip = getGetSeafarerCountShippingView();
                   ViewObject countBatch = getGetSeafarerCountBatchView();
                   if(countShip.getRowCount() == countBatch.getRowCount())
                   {

                    RowSetIterator rit = prtVo.createRowSetIterator(null);
                    int count = 0;
                    while (rit.hasNext()) {
                        Row row = rit.next();

                        if (row.getAttribute("DeliveryStatus") != null) {
                            if (!row.getAttribute("DeliveryStatus").toString().equalsIgnoreCase("SHIPPED") && !row.getAttribute("DeliveryStatus").toString().equalsIgnoreCase("CANCELLED")) {
                                count++;
                            }
                        }
                    }
                    if (count == 0) {
                        Integer batch_id_main =
                            Integer.parseInt(adfContext.getPageFlowScope().get("p_batch_id").toString());
                        processShipping(batch_id_main);
                    }
                   }
                } else {
                    return "tracking";
                }
            } else {
                return "selected";
            }
        } catch (Exception nfe) {
            nfe.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while processing." +
                                                   "Please contact your System Administrator.", "",
                                                   FacesMessage.SEVERITY_ERROR);
        }
        return res;
    }
    /**
     * Method to ship documents without tracking number.
     * call callshipProcedure method.
     */
      public String shipwithouttracking()
      {
          ADFContext adfContext = ADFContext.getCurrent();
              String res = "success";    
              try {
            SequenceImpl s = new SequenceImpl("rmi_seafarer.rmi_sicd_ship_order_stg_s", getDBTransaction());
            Integer batch_id = Integer.parseInt(s.getSequenceNumber().toString());
            adfContext.getPageFlowScope().put("track_no", batch_id);
            ViewObject prtVo = getOrderShippingPartialView();
            RowSetIterator createRowSetIterator = prtVo.createRowSetIterator(null);
            while (createRowSetIterator.hasNext()) {
                Row row = createRowSetIterator.next();
                if (row.getAttribute("tranShipLine") != null) {
                    if (row.getAttribute("tranShipLine").toString().equalsIgnoreCase("Y")) {
                        Integer deliveryDetailId = Integer.parseInt(row.getAttribute("DeliveryDetailId").toString());

                        Object stat = callStoredFunction(Types.VARCHAR, "rmi_sicd_pub.add_ship_order_stg(?,?,?)", new Object[] {
                                                         batch_id, deliveryDetailId, row.getAttribute("LineId")
                        });

                        System.out.println("batchId :: "+batch_id);
                        System.out.println("stat :: "+stat);
                    }
                }
            }
                  
            Row currRow = this.getOrderHeaderView().getCurrentRow();
            String shippingInstrc = ((currRow.getAttribute("Description") != null) 
                                        ? currRow.getAttribute("Description").toString()
                                        : "");
            String shippingMethod = ((currRow.getAttribute("TransShippingMethod") != null) 
                                        ? currRow.getAttribute("TransShippingMethod").toString()
                                        : null);
                  
            res = callshipProcedure(batch_id, null, shippingMethod, 
                                               shippingInstrc, (Integer) currRow.getAttribute("HeaderId"));
            prtVo.executeQuery();                  

            System.out.println("shippingInstrc :: "+shippingInstrc);
            System.out.println("shippingMethod :: "+shippingMethod);
            System.out.println("res :: "+res);
                  
            ViewObject countShip = getGetSeafarerCountShippingView();
            ViewObject countBatch = getGetSeafarerCountBatchView();
            if(countShip.getRowCount() == countBatch.getRowCount())
            {
            RowSetIterator rit = prtVo.createRowSetIterator(null);
            int count = 0;
            while(rit.hasNext())
            {
                Row row = rit.next();
             
                if(row.getAttribute("DeliveryStatus") != null)
                {
                  if(!row.getAttribute("DeliveryStatus").toString().equalsIgnoreCase("SHIPPED") && !row.getAttribute("DeliveryStatus").toString().equalsIgnoreCase("CANCELLED"))
                  {
                     count++; 
                      }
                    
                    }
                
                
                }
            if(count == 0)
            {
            Integer batch_id_main = Integer.parseInt(adfContext.getPageFlowScope().get("p_batch_id").toString());
                processShipping(batch_id_main);
            System.out.println("batch_id_main :: "+batch_id_main);
            }
            }
        } catch (Exception nfe) {
            nfe.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while shipping." +
            "Please contact your System Administrator." , 
            "", FacesMessage.SEVERITY_ERROR);
            nfe.printStackTrace();
        }
              return res;
          
          }
    /**
     * Method to filter error data.
     */
          public void filterErrorTable()
          {
        try {
            ADFContext adfContext = ADFContext.getCurrent();
            Integer track_no = Integer.parseInt(adfContext.getPageFlowScope().get("track_no").toString());

            ViewObject errorVo = getShippingErrorView();
            errorVo.setNamedWhereClauseParam("pHeaderId", track_no);
            errorVo.executeQuery();
        } catch (Exception nfe) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while filtering data." +
            "Please contact your System Administrator." , 
            "", FacesMessage.SEVERITY_ERROR);
            nfe.printStackTrace();
        }
              
              }
    /**
     * Method to call rmi_sicd_adf_pub.ship_order db procedure.
     */
    public String callshipProcedure(Integer batch_id,String tracking_number, String shipping_method, String shipping_instrc, Integer header_id)
    {
            CallableStatement st = null;
             String status = null;
             String p_log = "Success";
            Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());

            
            try
            {
//                    System.out.println(validation_type+"----"+batch_id+"------");
                    String sql = "BEGIN rmi_sicd_pub.ship_order(?,?,?,?,?,?,?);END;";
                    st = getDBTransaction().createCallableStatement(sql, 0);
                    st.setObject(1, batch_id);//MAIL SERVER
                    st.setObject(2, tracking_number);
                    st.registerOutParameter(3, Types.NUMERIC);//OUT PARAM ERROR
                    st.setObject(4, user_id);
                    st.setObject(5, shipping_method);
                    st.setObject(6, shipping_instrc);
                    st.setObject(7, header_id);
                    
                    st.execute();
   
                System.out.println(st.getObject(3)+"----");
                if(st.getObject(3) != null)
                {
                  p_log = st.getObject(3).toString();  
                    }
 
                }
            catch(Exception e)
            {
                e.printStackTrace();
    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while shipping." +
    "Please contact your System Administrator." , 
    "", FacesMessage.SEVERITY_ERROR);
                }
            finally{
                if(st != null){
                    try{
                        
                    st.close();    
                        }   
                    catch(SQLException e)
                    {
                       e.printStackTrace(); 
                        }
                    
                    
                    
                    }
            }
            return p_log;
        }
    /**
     * Method to call rmi_sicd_adf_pub.tracking_number db procedure.
     */
    public String callUpdateProcedure(Integer batch_id, String tracking_number, String shipping_method, String shipping_instrc, Integer header_id) {
        CallableStatement st = null;
        String status = null;
        String p_log = "Success";
        try {
            //                System.out.println(validation_type+"----"+batch_id+"------");
            String sql = "BEGIN rmi_sicd_pub.tracking_number(?,?,?,?,?,?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            st.setObject(1, batch_id); //MAIL SERVER
            st.setObject(2, tracking_number);
            st.setObject(3, shipping_method);
            st.setObject(4, shipping_instrc);
            st.setObject(5, header_id);
            st.setObject(6, getUserId());
            st.registerOutParameter(7, Types.NUMERIC); //OUT PARAM ERROR
//            st.registerOutParameter(7, Types.VARCHAR); //OUT PARAM ERROR MESSAGE

            st.execute();

            //                System.out.println(st.getObject(6)+"----");
            if (st.getObject(6) != null) {
                p_log = st.getObject(6).toString();
            }
            
//            if (st.getObject(7) != null) {
//                System.out.println("x_essage : "+st.getObject(7).toString());
//            }

        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating track number." +
                                                   "Please contact your System Administrator.", "",
                                                   FacesMessage.SEVERITY_ERROR);
        } finally {
            if (st != null) {
                try {

                    st.close();
                } catch (SQLException e) {
e.printStackTrace();
                }
            }
        }
        return p_log;
    }
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
            CallableStatement cst = null;
            try {
                //Creating sql statement
                cst = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                //Register dataType for return value
                cst.registerOutParameter(1, sqlReturnType);
                //Pass input parameters value
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        cst.setObject(z + 2, bindVars[z]);
                    }
                }
                cst.executeUpdate();
                //Finally get returned value
                return cst.getObject(1);
            } catch (SQLException e) {
                throw new JboException(e.getMessage());
            } finally {
                if (cst != null) {
                    try {
                        cst.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                        AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while processing." +
                        "Please contact your System Administrator." , 
                        "", FacesMessage.SEVERITY_ERROR);
//                        e.printStackTrace();
                    }
                }
            }
        }
    /**
     * Container's getter for searchOrderNumberCVO1.
     * @return searchOrderNumberCVO1
     */
    public ViewObjectImpl getsearchOrderNumberView() {
        return (ViewObjectImpl) findViewObject("searchOrderNumberView");
    }

    /**
     * Container's getter for OrderHeaderRO1.
     * @return OrderHeaderRO1
     */
    public ViewObjectImpl getOrderHeaderView() {
        return (ViewObjectImpl) findViewObject("OrderHeaderView");
    }

    /**
     * Container's getter for OrderShippingPartialRO1.
     * @return OrderShippingPartialRO1
     */
    public ViewObjectImpl getOrderShippingPartialView() {
        return (ViewObjectImpl) findViewObject("OrderShippingPartialView");
    }


    /**
     * Container's getter for ShippingErrorRO1.
     * @return ShippingErrorRO1
     */
    public ViewObjectImpl getShippingErrorView() {
        return (ViewObjectImpl) findViewObject("ShippingErrorView");
    }
    
    public void processShipping(Integer p_batch_id)
    {
        try {
            ViewObject wfView = getWorkflowView();
            wfView.setNamedWhereClauseParam("pBatchId", p_batch_id);
            wfView.executeQuery();

    //            System.out.println(wfView.getRowCount());

            RowSetIterator createRowSetIterator = wfView.createRowSetIterator(null);

            while (createRowSetIterator.hasNext()) {
                Row row = createRowSetIterator.next();
                row.setAttribute("LastUpdatedRow", "N");

            }
            Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());

            Row createRow = wfView.createRow();
            createRow.setAttribute("EsiBatchId", p_batch_id);
            createRow.setAttribute("BatchStatus", "Closed");
            createRow.setAttribute("AssignedTo", null);
            createRow.setAttribute("LastUpdatedRow", "Y");
            wfView.insertRow(createRow);

            ViewObject seafarerView = getSeafarerIfaceView();
            seafarerView.setWhereClause("esi_batch_id = "+p_batch_id);
            seafarerView.executeQuery();
            RowSetIterator sqcit = seafarerView.createRowSetIterator(null);
            while(sqcit.hasNext())
            {
              Row row = sqcit.next();
                row.setAttribute("SeafarerWfStatus", "Closed");
                
                }

            this.getDBTransaction().commit();
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while Processing batch." +
            "Please contact your System Administrator." , 
            "", FacesMessage.SEVERITY_ERROR);
                e.printStackTrace();
        }  
        
        }

    /**
     * Container's getter for WorkflowView1.
     * @return WorkflowView1
     */
    public ViewObjectImpl getWorkflowView() {
        return (ViewObjectImpl) findViewObject("WorkflowView");
    }

    public void checkValueChange(String check) 
    {
        ViewObject prtVo = getOrderShippingPartialView();
        RowSetIterator createRowSetIterator = prtVo.createRowSetIterator(null);
        while (createRowSetIterator.hasNext()) 
        {
            //                System.out.println("while loop");
            Row row = createRowSetIterator.next();
            if (check.equalsIgnoreCase("true")) 
            {
                String delieveryStat = "enable";
                if(row.getAttribute("tranDeliveryStat") != null)
                {
                        delieveryStat = row.getAttribute("tranDeliveryStat").toString();  
                    }
                if(!delieveryStat.equalsIgnoreCase("disable"))
                {
                    row.setAttribute("tranShipLine", "Y");
                }
            } else {
                row.setAttribute("tranShipLine", "N");

            }
        }
    }

    /**
     * Container's getter for SeafarerIfaceView1.
     * @return SeafarerIfaceView1
     */
    public ViewObjectImpl getSeafarerIfaceView() {
        return (ViewObjectImpl) findViewObject("SeafarerIfaceView");
    }

    /**
     * Container's getter for BatchIfaceView1.
     * @return BatchIfaceView1
     */
    public ViewObjectImpl getBatchIfaceView() {
        return (ViewObjectImpl) findViewObject("BatchIfaceView");
    }
    public void callProcessOrderHeader()
        {
            try {
                ADFContext adfContext = ADFContext.getCurrent();

                Integer user_id = Integer.parseInt(ADFContext.getCurrent().getSessionScope().get("param_user_id").toString());
                Integer batch_id = Integer.parseInt(adfContext.getPageFlowScope().get("p_batch_id").toString());

                    try {
                        this.getDBTransaction().commit();
                        Object stat = callStoredFunction(Types.VARCHAR, "rmi_sicd_pub.update_order_header(?,?)", new Object[] {
                                                         batch_id, user_id
                        });
                    } catch (Exception e) {
                        e.printStackTrace();
                        AdfUtils.addFormattedFacesErrorMessage("There has been some error(s) while processing this order : ",
                                                               e.getMessage(), FacesMessage.SEVERITY_ERROR);
                    }
                
            } catch (Exception e) {
                e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while processing order." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            }
        }
    
    /**
     * Method fetches user Id of the login user from session.
     * @return Integer returns user of the login user.
     **/
    public Integer getUserId() 
    {
        try 
        {
            Object usrId = ADFContext.getCurrent().getSessionScope().get("UserId");
            return (Integer.parseInt(usrId != null ? usrId.toString() : "-1"));
            
        } catch (Exception nfe) {
            nfe.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching user Id." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return -1;
    }
    
    /**
     * Container's getter for GetSeafarerCountBatchView1.
     * @return GetSeafarerCountBatchView1
     */
    public ViewObjectImpl getGetSeafarerCountBatchView() {
        return (ViewObjectImpl) findViewObject("GetSeafarerCountBatchView");
    }

    /**
     * Container's getter for GetSeafarerCountShippingView1.
     * @return GetSeafarerCountShippingView1
     */
    public ViewObjectImpl getGetSeafarerCountShippingView() {
        return (ViewObjectImpl) findViewObject("GetSeafarerCountShippingView");
    }

    /**
     * Container's getter for OrderHoldView1.
     * @return OrderHoldView1
     */
    public ViewObjectImpl getOrderHoldView() {
        return (ViewObjectImpl) findViewObject("OrderHoldView");
    }

    /**
     * Container's getter for BatchAdditionalDetailsView1.
     * @return BatchAdditionalDetailsView1
     */
    public ViewObjectImpl getBatchAdditionalDetailsView() {
        return (ViewObjectImpl) findViewObject("BatchAdditionalDetailsView");
    }
}

