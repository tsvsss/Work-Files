package oracle.apps.xwrl.model.entity;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.domain.ClobDomain;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 27 15:11:35 EDT 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XwrlParametersImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id,
        Key1,
        ValueString,
        ValueDate,
        ValueClob,
        LastUpdateDate,
        LastUpdatedBy,
        CreationDate,
        CreatedBy,
        LastUpdateLogin,
        ValueXml,
        SortOrder,
        DisplayFlag;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int ID = AttributesEnum.Id.index();
    public static final int KEY1 = AttributesEnum.Key1.index();
    public static final int VALUESTRING = AttributesEnum.ValueString.index();
    public static final int VALUEDATE = AttributesEnum.ValueDate.index();
    public static final int VALUECLOB = AttributesEnum.ValueClob.index();
    public static final int LASTUPDATEDATE = AttributesEnum.LastUpdateDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int LASTUPDATELOGIN = AttributesEnum.LastUpdateLogin.index();
    public static final int VALUEXML = AttributesEnum.ValueXml.index();
    public static final int SORTORDER = AttributesEnum.SortOrder.index();
    public static final int DISPLAYFLAG = AttributesEnum.DisplayFlag.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XwrlParametersImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("oracle.apps.xwrl.model.entity.XwrlParameters");
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public String getId() {
        return (String) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(String value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for Key1, using the alias name Key1.
     * @return the value of Key1
     */
    public String getKey1() {
        return (String) getAttributeInternal(KEY1);
    }

    /**
     * Sets <code>value</code> as the attribute value for Key1.
     * @param value value to set the Key1
     */
    public void setKey1(String value) {
        setAttributeInternal(KEY1, value);
    }

    /**
     * Gets the attribute value for ValueString, using the alias name ValueString.
     * @return the value of ValueString
     */
    public String getValueString() {
        return (String) getAttributeInternal(VALUESTRING);
    }

    /**
     * Sets <code>value</code> as the attribute value for ValueString.
     * @param value value to set the ValueString
     */
    public void setValueString(String value) {
        setAttributeInternal(VALUESTRING, value);
    }

    /**
     * Gets the attribute value for ValueDate, using the alias name ValueDate.
     * @return the value of ValueDate
     */
    public Timestamp getValueDate() {
        return (Timestamp) getAttributeInternal(VALUEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ValueDate.
     * @param value value to set the ValueDate
     */
    public void setValueDate(Timestamp value) {
        setAttributeInternal(VALUEDATE, value);
    }

    /**
     * Gets the attribute value for ValueClob, using the alias name ValueClob.
     * @return the value of ValueClob
     */
    public ClobDomain getValueClob() {
        return (ClobDomain) getAttributeInternal(VALUECLOB);
    }

    /**
     * Sets <code>value</code> as the attribute value for ValueClob.
     * @param value value to set the ValueClob
     */
    public void setValueClob(ClobDomain value) {
        setAttributeInternal(VALUECLOB, value);
    }

    /**
     * Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate.
     * @return the value of LastUpdateDate
     */
    public Timestamp getLastUpdateDate() {
        return (Timestamp) getAttributeInternal(LASTUPDATEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdateDate.
     * @param value value to set the LastUpdateDate
     */
    public void setLastUpdateDate(Timestamp value) {
        setAttributeInternal(LASTUPDATEDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public Long getLastUpdatedBy() {
        return (Long) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(Long value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Timestamp getCreationDate() {
        return (Timestamp) getAttributeInternal(CREATIONDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreationDate.
     * @param value value to set the CreationDate
     */
    public void setCreationDate(Timestamp value) {
        setAttributeInternal(CREATIONDATE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Long getCreatedBy() {
        return (Long) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Long value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdateLogin, using the alias name LastUpdateLogin.
     * @return the value of LastUpdateLogin
     */
    public Long getLastUpdateLogin() {
        return (Long) getAttributeInternal(LASTUPDATELOGIN);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdateLogin.
     * @param value value to set the LastUpdateLogin
     */
    public void setLastUpdateLogin(Long value) {
        setAttributeInternal(LASTUPDATELOGIN, value);
    }

    /**
     * Gets the attribute value for ValueXml, using the alias name ValueXml.
     * @return the value of ValueXml
     */
    public ClobDomain getValueXml() {
        return (ClobDomain) getAttributeInternal(VALUEXML);
    }

    /**
     * Sets <code>value</code> as the attribute value for ValueXml.
     * @param value value to set the ValueXml
     */
    public void setValueXml(ClobDomain value) {
        setAttributeInternal(VALUEXML, value);
    }

    /**
     * Gets the attribute value for SortOrder, using the alias name SortOrder.
     * @return the value of SortOrder
     */
    public BigDecimal getSortOrder() {
        return (BigDecimal) getAttributeInternal(SORTORDER);
    }

    /**
     * Sets <code>value</code> as the attribute value for SortOrder.
     * @param value value to set the SortOrder
     */
    public void setSortOrder(BigDecimal value) {
        setAttributeInternal(SORTORDER, value);
    }

    /**
     * Gets the attribute value for DisplayFlag, using the alias name DisplayFlag.
     * @return the value of DisplayFlag
     */
    public String getDisplayFlag() {
        return (String) getAttributeInternal(DISPLAYFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for DisplayFlag.
     * @param value value to set the DisplayFlag
     */
    public void setDisplayFlag(String value) {
        setAttributeInternal(DISPLAYFLAG, value);
    }


    /**
     * @param id key constituent
     * @param key1 key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String id, String key1) {
        return new Key(new Object[] { id, key1 });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
       /* Integer userId = (Integer) ADFContext.getCurrent().getSessionScope().get("UserId");
        Integer sessionId = (Integer) ADFContext.getCurrent().getSessionScope().get("SessionId");
        Timestamp time = new Timestamp(System.currentTimeMillis());

        if (userId != null) {
            this.setCreatedBy(Long.valueOf(userId));
            this.setLastUpdatedBy(Long.valueOf(userId));
        }

        if (sessionId != null) {
            this.setLastUpdateLogin(Long.valueOf(sessionId));
        }

        this.setCreationDate(time);
        this.setLastUpdateDate(time);*/
    }

    public void lock() {
        try {
            super.lock();
        } catch (RowInconsistentException e) {
            refresh(REFRESH_WITH_DB_ONLY_IF_UNCHANGED | REFRESH_CONTAINEES);
            super.lock();
        }
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) 
    {
       /* if (operation == DML_UPDATE) {
            Integer userId = (Integer) ADFContext.getCurrent().getSessionScope().get("UserId");
            Integer sessionId = (Integer) ADFContext.getCurrent().getSessionScope().get("SessionId");
            Timestamp time = new Timestamp(System.currentTimeMillis());

            if (userId != null) {                
                this.setLastUpdatedBy(Long.valueOf(userId));
            }

            if (sessionId != null) {
                this.setLastUpdateLogin(Long.valueOf(sessionId));
            }

            this.setLastUpdateDate(time);            
        }*/
        super.doDML(operation, e) ;
    }
}

