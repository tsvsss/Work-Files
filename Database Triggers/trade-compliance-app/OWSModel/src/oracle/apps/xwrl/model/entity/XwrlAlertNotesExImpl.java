package oracle.apps.xwrl.model.entity;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jul 30 21:18:57 IST 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XwrlAlertNotesExImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id,
        RequestId,
        AlertId,
        LineNumber,
        Note,
        LastUpdateDate,
        LastUpdatedBy,
        CreationDate,
        CreatedBy,
        LastUpdateLogin;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ID = AttributesEnum.Id.index();
    public static final int REQUESTID = AttributesEnum.RequestId.index();
    public static final int ALERTID = AttributesEnum.AlertId.index();
    public static final int LINENUMBER = AttributesEnum.LineNumber.index();
    public static final int NOTE = AttributesEnum.Note.index();
    public static final int LASTUPDATEDATE = AttributesEnum.LastUpdateDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int LASTUPDATELOGIN = AttributesEnum.LastUpdateLogin.index();

    private static ADFLogger LOGGER = ADFLogger.createADFLogger(XwrlAlertNotesExImpl.class);
    
    /**
     * This is the default constructor (do not remove).
     */
    public XwrlAlertNotesExImpl() {
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public BigDecimal getId() {
        return (BigDecimal) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(BigDecimal value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for RequestId, using the alias name RequestId.
     * @return the value of RequestId
     */
    public BigDecimal getRequestId() {
        return (BigDecimal) getAttributeInternal(REQUESTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RequestId.
     * @param value value to set the RequestId
     */
    public void setRequestId(BigDecimal value) {
        setAttributeInternal(REQUESTID, value);
    }

    /**
     * Gets the attribute value for AlertId, using the alias name AlertId.
     * @return the value of AlertId
     */
    public String getAlertId() {
        return (String) getAttributeInternal(ALERTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AlertId.
     * @param value value to set the AlertId
     */
    public void setAlertId(String value) {
        setAttributeInternal(ALERTID, value);
    }

    /**
     * Gets the attribute value for LineNumber, using the alias name LineNumber.
     * @return the value of LineNumber
     */
    public BigDecimal getLineNumber() {
        return (BigDecimal) getAttributeInternal(LINENUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for LineNumber.
     * @param value value to set the LineNumber
     */
    public void setLineNumber(BigDecimal value) {
        setAttributeInternal(LINENUMBER, value);
    }

    /**
     * Gets the attribute value for Note, using the alias name Note.
     * @return the value of Note
     */
    public String getNote() {
        return (String) getAttributeInternal(NOTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Note.
     * @param value value to set the Note
     */
    public void setNote(String value) {
        setAttributeInternal(NOTE, value);
    }

    /**
     * Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate.
     * @return the value of LastUpdateDate
     */
    public Timestamp getLastUpdateDate() {
        return (Timestamp) getAttributeInternal(LASTUPDATEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdateDate.
     * @param value value to set the LastUpdateDate
     */
    public void setLastUpdateDate(Timestamp value) {
        setAttributeInternal(LASTUPDATEDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public Long getLastUpdatedBy() {
        return (Long) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(Long value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Timestamp getCreationDate() {
        return (Timestamp) getAttributeInternal(CREATIONDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreationDate.
     * @param value value to set the CreationDate
     */
    public void setCreationDate(Timestamp value) {
        setAttributeInternal(CREATIONDATE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Long getCreatedBy() {
        return (Long) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Long value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdateLogin, using the alias name LastUpdateLogin.
     * @return the value of LastUpdateLogin
     */
    public Long getLastUpdateLogin() {
        return (Long) getAttributeInternal(LASTUPDATELOGIN);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdateLogin.
     * @param value value to set the LastUpdateLogin
     */
    public void setLastUpdateLogin(Long value) {
        setAttributeInternal(LASTUPDATELOGIN, value);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal id) {
        return new Key(new Object[] { id });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("oracle.apps.xwrl.model.entity.XwrlAlertNotesEx");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        LOGGER.finest("create");
        String sql = null;
        BigDecimal id = null;
        String alertId = null;
        CallableStatement stmt = null;
        String result = null;
        BigDecimal lineNumber = null;
        ResultSet rs;

        id = nextVal("XWRL_ALERT_NOTES_SEQ").bigDecimalValue();
        LOGGER.finest("id: " + id.toString());
        this.setId(id);
        
        lineNumber = nextVal("XWRL_ALERT_NOTES_LINE_SEQ").bigDecimalValue();
        LOGGER.finest("lineNumber: " + lineNumber.toString());
        this.setLineNumber(lineNumber);

    
        
        LOGGER.finest("lineNumber: " + lineNumber);

        try {
            Integer userId = (Integer) ADFContext.getCurrent().getSessionScope().get("UserId");
            Integer sessionId = (Integer) ADFContext.getCurrent().getSessionScope().get("SessionId");
            Timestamp time = new Timestamp(System.currentTimeMillis());

            if (userId != null) {
                this.setCreatedBy(Long.valueOf(userId));
                this.setLastUpdatedBy(Long.valueOf(userId));
            }

            if (sessionId != null) {
                this.setLastUpdateLogin(Long.valueOf(sessionId));
            }

            this.setCreationDate(time);
            this.setLastUpdateDate(time);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
    }
    
    protected oracle.jbo.domain.Number nextVal(String sequenceName) {
        SequenceImpl s = new SequenceImpl(sequenceName, getDBTransaction());
        return s.getSequenceNumber();
    }
    
    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_UPDATE) 
        {
            try {
                Integer userId = (Integer) ADFContext.getCurrent().getSessionScope().get("UserId");
                Integer sessionId = (Integer) ADFContext.getCurrent().getSessionScope().get("SessionId");
                Timestamp time = new Timestamp(System.currentTimeMillis());

                if (userId != null) {
                    this.setLastUpdatedBy(Long.valueOf(userId));
                }

                if (sessionId != null) {
                    this.setLastUpdateLogin(Long.valueOf(sessionId));
                }

                this.setLastUpdateDate(time);
            } catch (Exception e1) {
                // TODO: Add catch code
                e1.printStackTrace();
            }           
        }
        super.doDML(operation, e);
    }
}

