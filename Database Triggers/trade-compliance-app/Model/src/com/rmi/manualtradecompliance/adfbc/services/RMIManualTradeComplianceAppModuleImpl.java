package com.rmi.manualtradecompliance.adfbc.services;


import com.lowagie.text.Document;
import com.lowagie.text.pdf.PdfContentByte;
import com.lowagie.text.pdf.PdfImportedPage;
import com.lowagie.text.pdf.PdfReader;
import com.lowagie.text.pdf.PdfWriter;

import com.rmi.manualtradecompliance.adfbc.services.common.RMIManualTradeComplianceAppModule;
import com.rmi.manualtradecompliance.adfbc.utils.AdfUtils;
import com.rmi.manualtradecompliance.adfbc.utils.LogUtils;

import com.rmi.manualtradecompliance.adfbc.views.CreateVettingMatchesViewImpl;
import com.rmi.manualtradecompliance.adfbc.views.FalseMatchesViewImpl;
import com.rmi.manualtradecompliance.adfbc.views.MatchesDisplayDataViewImpl;
import com.rmi.manualtradecompliance.adfbc.views.MatchesViewImpl;
import com.rmi.manualtradecompliance.adfbc.views.PositiveMatchesViewImpl;
import com.rmi.manualtradecompliance.adfbc.views.PossibleMatchesViewImpl;
import com.rmi.manualtradecompliance.adfbc.views.StatusHistoryViewImpl;
import com.rmi.manualtradecompliance.adfbc.views.StatusQueryViewImpl;
import com.rmi.manualtradecompliance.adfbc.views.VettingMatchesViewImpl;

import com.rmi.manualtradecompliance.adfbc.views.lovs.LovVettingsNameScreenedViewImpl;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import java.math.BigDecimal;

import java.net.URL;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.PosixFilePermission;
import java.nio.file.attribute.PosixFilePermissions;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Struct;
import java.sql.Timestamp;
import java.sql.Types;

import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.apps.fnd.ext.common.AppsRequestWrapper;
import oracle.apps.fnd.ext.common.CookieStatus;
import oracle.apps.fnd.ext.common.EBiz;
import oracle.apps.fnd.ext.common.Session;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import oracle.sql.ARRAY;
import oracle.sql.Datum;

import org.apache.myfaces.trinidad.context.RequestContext;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jul 08 13:20:08 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RMIManualTradeComplianceAppModuleImpl extends ApplicationModuleImpl implements RMIManualTradeComplianceAppModule{
    
    private static ADFLogger LOGGER = ADFLogger.createADFLogger(RMIManualTradeComplianceAppModuleImpl.class);
    
    /**
     * This is the default constructor (do not remove).
     */
    public RMIManualTradeComplianceAppModuleImpl() {
    }

    /**
     * Container's getter for DualVO1.
     * @return DualVO1
     */
    public ViewObjectImpl getDualView1() {
        return (ViewObjectImpl) findViewObject("DualView1");
    }

    /**
     *   Method displays details of each row selected on matches popup.
     *   @param content_id pass WcContentId of the selected vetting.
     *   @return Datum[] returns tabular data.
     **/
    @SuppressWarnings("deprecation")
    public Datum[] displayDetails(int content_id)
    {
        CallableStatement st = null;
        PreparedStatement ps = null;
        Datum[] arrMessage = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin RMI_GENERIC_TC.display_details(?,?); end;", 0);
            st.setInt(1, content_id);
            st.registerOutParameter(2, Types.ARRAY, "DISPLAY_DETAILS_TAB");
            st.execute();
            ARRAY p2arr = null;
            p2arr = (ARRAY) st.getArray(2);
            arrMessage = p2arr.getOracleArray();
            return arrMessage;
        }
        catch (Exception e) {
            e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching matches details." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching matches details.", 
                                               "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","displayDetails", LogUtils.returnStackTrace(e));
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching matches details." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
                logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching matches details.", 
                                                               "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","displayDetails", LogUtils.returnStackTrace(e));
            }
        }
        return arrMessage;
    }

    /**
     *   Method fetches details of each row selected on matches popup.
     **/
    public void fetchMatchesDisplayData()
    {        
        try 
        {
            ViewObjectImpl wcVo = this.getWcContentView1();
            Row wcCurrRow = wcVo.getCurrentRow();
            Row wcFirstRow = wcVo.first();
            Integer contentId;
            Object contentIdObject;

            if (wcCurrRow != null || wcFirstRow != null) {
                if (wcCurrRow != null && wcCurrRow.getAttribute("WcContentId") != null)
                    contentIdObject = wcCurrRow.getAttribute("WcContentId");
                else
                    contentIdObject = wcFirstRow.getAttribute("WcContentId");

                contentId = Integer.parseInt(contentIdObject.toString());
                //
                ViewObjectImpl displayRo = this.getMatchesDisplayDataView1();
                displayRo.executeQuery();
                Datum[] arr;
                arr = displayDetails(contentId);

                for (int i = 0; i < arr.length; i++) {
                    Struct os = (Struct) arr[i];
                    try {
                        Object[] a = os.getAttributes();
                        Row displayRow = displayRo.createRow();
                        displayRow.setAttribute("WcRequestId", a[0]);
                        displayRow.setAttribute("Heading", a[1]);
                        displayRow.setAttribute("DataType", a[2]);
                        displayRow.setAttribute("DisplayData", a[3]);
                        displayRo.insertRow(displayRow);

                    } catch (SQLException e) {
                        e.printStackTrace();
                        AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching matches details." +
                                                               "Please contact your System Administrator.", "",
                                                               FacesMessage.SEVERITY_ERROR);
                        logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching matches details.", 
                                                                       "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","fetchMatchesDisplayData", LogUtils.returnStackTrace(e));
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching matches details." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching matches details.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","fetchMatchesDisplayData", LogUtils.returnStackTrace(e));
        }
    }

    /**
     *   Method fetches vettings for selected seafarer with certain parameters.
     *   @param p_source_table pass the source table name
     *   @param p_source_column pass the source table column name.
     *   @param p_source_id pass seafarer Id of selected seafarer.
     *   @return Datum[] returns data in tabular format.
     **/
        @SuppressWarnings("deprecation")
    public Datum[] queryCrossReference(String p_source_table, String p_source_column, int p_source_id)
    {
        CallableStatement st = null;
        PreparedStatement ps = null;   

        Datum[] arrMessage = null;
        try {           
           st = this.getDBTransaction().createCallableStatement("begin RMI_GENERIC_TC.query_cross_reference(?,?,?,?); end;", 0);
            st.setString(1, p_source_table.toString());
            st.setString(2, p_source_column.toString());
            st.setInt(3, p_source_id);
            st.registerOutParameter(4, Types.ARRAY, "SCREENING_TAB_T");
            st.execute();
            ARRAY p2arr = null;
            p2arr = (ARRAY) st.getArray(4);
            arrMessage = p2arr.getOracleArray();
            return arrMessage;
        }
        catch (Exception e) {
            e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching vettings." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching vettings", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","queryCrossReference", LogUtils.returnStackTrace(e));
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching vettings." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
                logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching vettings", 
                                                               "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","queryCrossReference", LogUtils.returnStackTrace(e));
            }
        }
        return arrMessage;
    }

    /**
     * Container's getter for PositiveMatchesVO1.
     * @return PositiveMatchesVO1
     */
    public PositiveMatchesViewImpl getPositiveMatchesView1() {
        return (PositiveMatchesViewImpl) findViewObject("PositiveMatchesView1");
    }

    /**
     * Container's getter for PossibleMatchesVO1.
     * @return PossibleMatchesVO1
     */
    public PossibleMatchesViewImpl getPossibleMatchesView1() {
        return (PossibleMatchesViewImpl) findViewObject("PossibleMatchesView1");
    }

    /**
     * Container's getter for MatchesVO1.
     * @return MatchesVO1
     */
    public MatchesViewImpl getMatchesView1() {
        return (MatchesViewImpl) findViewObject("MatchesView1");
    }

    /**
     * Container's getter for FalseMatchesVO1.
     * @return FalseMatchesVO1
     */
    public FalseMatchesViewImpl getFalseMatchesVO1() {
        return (FalseMatchesViewImpl) findViewObject("FalseMatchesVO1");
    }

    /**
     * Container's getter for StatusHistoryVO1.
     * @return StatusHistoryVO1
     */
    public StatusHistoryViewImpl getStatusHistoryView1() {
        return (StatusHistoryViewImpl) findViewObject("StatusHistoryView1");
    }

    /**
     * Container's getter for StatusVO1.
     * @return StatusVO1
     */
    public StatusQueryViewImpl getStatusQueryView1() {
        return (StatusQueryViewImpl) findViewObject("StatusQueryView1");
    }
    
    /**
     *   Method to call input party master procedure for new department request created
     *   @param input pass source id, source table, source table column .
     *   @return String returns id.
     **/
    public void callXwrlPartyMaster() {
        CallableStatement st = null;
        if(RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_ID") == null)
            return;

        try 
        {
            st = this.getDBTransaction().createCallableStatement("begin rmi_ows_common_util.insert_party_master(?,?,?,?); end;", 0);
            st.setString(1, RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_TABLE").toString());
            st.setString(2, RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_TABLE_COLUMN").toString());
            st.setString(3, RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_ID").toString());
            st.registerOutParameter(4, Types.INTEGER);
            st.execute();
            LOGGER.finest("Id:"+st.getString(4));
            
        } catch (Exception e) {
            e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching file." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching file.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getIRIHTMLURL", LogUtils.returnStackTrace(e));
        }
        finally 
        {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching file." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
                logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching file.", 
                                                               "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getIRIHTMLURL", LogUtils.returnStackTrace(e));
            }
        }
    }
    
    public void updateCountryCity(String type, String country, String city) {
        CallableStatement st = null;

        try 
        {
            Row row = getTcReferencesView1().getCurrentRow();
            st = this.getDBTransaction().createCallableStatement("begin rmi_generic_tc.UPDATE_COUNTRY_CITY(?,?,?,?,?,?); end;", 0);
            st.setString(1, type);
            st.setString(2, country);
            st.setString(3, city);
            st.setObject(4, row.getAttribute("MasterId"));
            st.setObject(5, row.getAttribute("AliasId"));
            st.setObject(6, row.getAttribute("XrefId"));
            st.execute();
            
        } catch (Exception e) {
            e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching file." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching file.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getIRIHTMLURL", LogUtils.returnStackTrace(e));
        }
        finally 
        {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching file." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
                logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching file.", 
                                                               "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getIRIHTMLURL", LogUtils.returnStackTrace(e));
            }
        }
    }

    /**
     *   Method fetches full html url of the passed EdocId.
     *   @param input pass edocId.
     *   @return String returns html url.
     **/
    public String getIRIHTMLURL(String input) {
        String output = null;
        CallableStatement st = null;
        PreparedStatement ps = null;

        try 
        {
            st = this.getDBTransaction().createCallableStatement("begin {? = call iri_html.get_url(?)}; end;", 0);
            st.registerOutParameter(1, Types.VARCHAR);
            st.setString(2, input);
            st.execute();
            output = st.getString(1);
        } catch (Exception e) {
            e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching file." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching file.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getIRIHTMLURL", LogUtils.returnStackTrace(e));
        }
        finally 
        {
            try {
                if (st != null) {
                    st.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching file." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
                logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching file.", 
                                                               "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getIRIHTMLURL", LogUtils.returnStackTrace(e));
            }
        }
        return output;
    }

    /**
     *   Method fetches the url of the passed EdocId.
     *   @param ofac_list_edoc_id pass edocId.
     *   @return String returns url.
     **/
    public String getEdocURL(int ofac_list_edoc_id) {
        String output = null;
        CallableStatement st = null;
        PreparedStatement ps = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin {? = call iri_edocs_pkg.get_edoc_url(?)}; end;", 0);
            st.registerOutParameter(1, Types.VARCHAR);
            st.setInt(2, ofac_list_edoc_id);
            st.execute();
            output = st.getString(1);
            return output;
        } catch (Exception e) {
            e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching file." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching file.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getEdocURL", LogUtils.returnStackTrace(e));
        }
        finally 
        {
            try {
                if (st != null) {
                    st.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching file." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
                logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching file.", 
                                                               "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getEdocURL", LogUtils.returnStackTrace(e));
            }
        }
        return output;
    }

    /**
     *   Method fetches document url with passed edocId.
     *   @param ofac_list_edoc_id pass edocId.
     *   @param iriHTMLUrlType pass edoc category/type.
     *   @return String returns url.
     **/
    public String getOFACDocLink(int ofac_list_edoc_id, String iriHTMLUrlType)
    {
        try 
        {
            return getIRIHTMLURL(iriHTMLUrlType) + getEdocURL(ofac_list_edoc_id);
        } catch (Exception e) {
            e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching file." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching file.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getOFACDocLink", LogUtils.returnStackTrace(e));
        }
        return null;
    }

    /**
     *   Method fetches OFAC SDN matches for selected seafarer with certain parameters.
     *   @param search_name pass the primary name of seafarer.
     *   @param entity_type pass entity type INDIVIDUAL/ORGANISATION.
     *   @return Datum[] returns data in tabular format.
     **/
    @SuppressWarnings("deprecation")
    public Datum[] getOFACSDNMatches(String search_name, String entity_type)
    {
        CallableStatement st = null;
        PreparedStatement ps = null;
        Datum[] arrMessage = null;
        try{
            st = this.getDBTransaction().createCallableStatement("begin RMI_GENERIC_TC.get_ofac_sdn_matches(?,?,?); end;", 0);      
            st.setString(1, search_name.toString());            
            st.setString(2, entity_type.toString());           
            st.registerOutParameter(3, Types.ARRAY, "NAME_SEARCH_RESULTS_T");
            st.execute();
            ARRAY p2arr = null;
            p2arr = (ARRAY) st.getArray(3);
            arrMessage = p2arr.getOracleArray();
            return arrMessage;
        }
        catch (Exception e) {
            e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching OSDN matches." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching OSDN matches.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getOFACSDNMatches", LogUtils.returnStackTrace(e));
        } finally 
        {
            try {
                if (st != null) {
                    st.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching OSDN matches." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
                logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching OSDN matches.", 
                                                               "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getOFACSDNMatches", LogUtils.returnStackTrace(e));
            }
        }
        return arrMessage;
    }

    /**
     *   Method fetches tree table with passed screening request Id.
     *   @param wc_screening_request_id pass the wc_screening_request_id of the selected vetting.
     *   @return Datum[] returns data in tabular format.
     **/
    @SuppressWarnings("deprecation")
    public Datum[] getCrossReeferences(int wc_screening_request_id)
    {
        CallableStatement st = null;
        PreparedStatement ps = null;
        Datum[] arrMessage = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin RMI_GENERIC_TC.create_xref_tree_table(?,?); end;", 0);
            st.setInt(1, wc_screening_request_id);
            st.registerOutParameter(2, Types.ARRAY, "XREF_TREE_TAB_T");
            st.execute();
            ARRAY p2arr = null;
            p2arr = (ARRAY) st.getArray(2);
            arrMessage = p2arr.getOracleArray();
            return arrMessage;
        }
        catch (Exception e) {
            e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching data.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getCrossReeferences", LogUtils.returnStackTrace(e));
        } finally 
        {
            try {
                if (st != null) {
                    st.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
                logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching data.", 
                                                               "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getCrossReeferences", LogUtils.returnStackTrace(e));
            }
        }
        return arrMessage;
    }

    /**
     *   Method synchronizes all the aliases for the given screening request Id.
     *   @param wc_screening_request_id pass the wc_screening_request_id of the selected vetting.
     **/
    public void syncAlias(int wc_screening_request_id)
    {
        CallableStatement st = null;
        PreparedStatement ps = null;

        try {
            st = this.getDBTransaction().createCallableStatement("begin WORLD_CHECK_IFACE.SYNCHRONIZE_ALIAS_MATCHES(?,?,?); end;", 0);
            st.setInt(1, wc_screening_request_id);
            st.registerOutParameter(2, Types.VARCHAR);
            st.registerOutParameter(3, Types.VARCHAR);
            st.execute();
           // this.getDBTransaction().postChanges();
            this.getAliasView().executeQuery();
        }
        catch (Exception e) {
            e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while synchronizing aliases." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while synchronizing aliases.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","syncAlias", LogUtils.returnStackTrace(e));
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while synchronizing aliases." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
                logGenericTC(LogUtils.ERROR, "System encountered an exception while synchronizing aliases.", 
                                                               "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","syncAlias", LogUtils.returnStackTrace(e));
            }
        }
    }

    /**
     * Container's getter for WcScreeningRequestVO1.
     * @return WcScreeningRequestVO1
     */
    public ViewObjectImpl getWcScreeningRequestView1() {
        return (ViewObjectImpl) findViewObject("WcScreeningRequestView1");
    }

    /**
     *   Method fetches full url of the passed EdocId.
     *   @param edocId pass edocId.
     *   @return String returns url.
     **/
    public String getEdocFullURL(int edocId) {
        String url = null;
        CallableStatement st = null;
        PreparedStatement ps = null;

        try {
            st = this.getDBTransaction().createCallableStatement("begin {? = call iri_edocs_pkg.get_edoc_full_url(?)}; end;", 0);
            st.registerOutParameter(1, Types.VARCHAR);
            st.setInt(2, edocId);
            st.execute();
            url = st.getString(1);
            return url;
        }
        catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching file." +
                                                   "Please contact your System Administrator.", "",
                                                   FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching file.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getEdocFullURL", LogUtils.returnStackTrace(e));
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching file." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
                logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching file.", 
                                                               "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getEdocFullURL", LogUtils.returnStackTrace(e));
            }
        }
        return url;
    }

    /**
     *   Method fetches category ID of the passed EdocId.
     *   @param edocId pass edocId.
     **/
    public void getEdocCategoryId(int edocId) {
        CallableStatement st = null;
        PreparedStatement ps = null;

        try {
            st = this.getDBTransaction().createCallableStatement("begin {? = call iri_edocs_pkg.GET_CATEGORY_ID (?,?,?)}; end;", 0);
            st.registerOutParameter(1, Types.VARCHAR);
            st.setString(2, "WORLD_CHECK");
            st.setString(3, "SUPPORT");
            st.setString(4, "Vetting");
            st.execute();
        }
        catch (Exception e) {
            e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching data.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getEdocCategoryId", LogUtils.returnStackTrace(e));
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
                logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching data.", 
                                                               "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getEdocCategoryId", LogUtils.returnStackTrace(e));
            }
        }
    }

    /**
     *   Method fetches user Id of the login user.
     *   @return Integer returns userId.
     **/
    public Integer getUserId() 
    {
        try 
        {
            Object usrId = ADFContext.getCurrent().getSessionScope().get("UserId");
            return (Integer.parseInt(usrId != null ? usrId.toString() : "-1"));
        } catch (Exception e) {
            e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching data.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getUserId", LogUtils.returnStackTrace(e));
        }
        return -1;
    }

    /**
     *   Method synchronizes all the matches with selected vetting.
     *   @param wc_screening_request_id pass wc_screening_request_id of the selected vetting.
     **/
    public void synchronize(int wc_screening_request_id) {
        CallableStatement st = null;
        PreparedStatement ps = null;

        try {
            st = this.getDBTransaction().createCallableStatement("begin RMI_GENERIC_TC.refresh_wc_matches(?,?,?,?); end;", 0);
            st.setInt(1, wc_screening_request_id);
            st.registerOutParameter(2, Types.VARCHAR);
            st.registerOutParameter(3, Types.VARCHAR);
            st.setInt(4, getUserId());
            st.execute();
            //this.getDBTransaction().postChanges();
            this.getWcContentView1().executeQuery();
            this.getWcMatchesView1().executeQuery();
        }
        catch (Exception e) {
            e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while synchronizing matches." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while synchronizing matches.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","synchronize", LogUtils.returnStackTrace(e));
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while synchronizing matches." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
                logGenericTC(LogUtils.ERROR, "System encountered an exception while synchronizing matches.", 
                                                               "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","synchronize", LogUtils.returnStackTrace(e));
            }
        }
    }

    /**
     *   Method fetches details of all the matches of selected vetting.
     *   @param wc_screening_request_id pass wc_screening_request_id of the selected vetting.
     **/
    public void populateMatchDetails(int wc_screening_request_id) {
        CallableStatement st = null;
        PreparedStatement ps = null;

        try {
            st = this.getDBTransaction().createCallableStatement("begin RMI_GENERIC_TC.refresh_wc_matches(?,?,?,?); end;", 0);
            st.setInt(1, wc_screening_request_id);
            st.registerOutParameter(2, Types.VARCHAR);
            st.registerOutParameter(3, Types.VARCHAR);
            st.setInt(4, getUserId());
            st.execute();
        }
        catch (Exception e) {
            e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching matches details." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching matches details.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","populateMatchDetails", LogUtils.returnStackTrace(e));
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching matches details." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
                logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching matches details.", 
                                                               "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","populateMatchDetails", LogUtils.returnStackTrace(e));
            }
        }
    }

    public String uploadAffidavit(String fileName, String category, String action, String startDate, String endDate) {
        String data = "";
        CallableStatement st = null;
        try{
            st = this.getDBTransaction().createCallableStatement("begin RMI_GENERIC_TC.AFFIDAVIT_UPLOAD(?,?,?,?,?,?,?,?); end;", 0);
            st.setString(1, fileName);
            st.setString(2, category);
            st.setString(3, RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_ID").toString());
            st.setString(4, action);
            st.setString(5, startDate);
            st.setString(6, endDate);
            st.registerOutParameter(7, Types.VARCHAR);
            st.registerOutParameter(8, Types.VARCHAR);
            st.execute();
            
            if("NEW".equals(action))
                data = st.getString(8) + "---" + st.getString(7);
        }catch(Exception e) {
            e.printStackTrace();
            logGenericTC(LogUtils.ERROR, "System encountered an exception while upload affidavit.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","uploadAffidavit", LogUtils.returnStackTrace(e));
        }
        return data;
    }

    /**
     *   Method refreshes all view objects.
     **/
    public void executeAllViewObjects()
    {
        try 
        {
            this.getMatchesView1().executeQuery();
            this.getPositiveMatchesView1().executeQuery();
            this.getPossibleMatchesView1().executeQuery();
            this.getUnspecifiedMatchesView1().executeQuery();
            this.getFalseMatchesVO1().executeQuery();
            this.getWcScreeningRequestView1().executeQuery();
            this.getStatusHistoryView1().executeQuery();
            this.getWcContentView1().executeQuery();
            this.getScreeningRequestChangesView1().executeQuery();
        } catch (Exception e) {
            e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while refreshing data." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while refreshing data.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","executeAllViewObjects", LogUtils.returnStackTrace(e));
        }
    }

    /**
     *   Method validates user inputs before creating new vetting.
     *   @return String returns Y/N based on based on inputs made.
     **/
    public String validateCreateVetting()
    {
        String retFlg = "Y";
        try 
        {
            ViewObjectImpl dualCvVo = this.getDualCreateVettingView1();
            Row dualCvRow = dualCvVo.getCurrentRow();

            if (dualCvRow != null && (1 == 2)) {
                if (!(dualCvRow.getAttribute("TransNameScreened") != null)) {
                   AdfUtils.addFormattedFacesErrorMessage("Please enter Name Screened !", null, FacesMessage.SEVERITY_ERROR);
                    retFlg = "N";
                } else if (!(dualCvRow.getAttribute("TransEntityType") != null)) {
                   AdfUtils.addFormattedFacesErrorMessage("Please select Entity Type !", null, FacesMessage.SEVERITY_ERROR);
                    retFlg = "N";
                } else if (!(dualCvRow.getAttribute("TransGender") != null)) {
                   AdfUtils.addFormattedFacesErrorMessage("Please select Sex !", null, FacesMessage.SEVERITY_ERROR);
                    retFlg = "N";
                } else if (!(dualCvRow.getAttribute("TransDateOfBirth") != null)) {
                   AdfUtils.addFormattedFacesErrorMessage("Please select Date of Birth !", null, FacesMessage.SEVERITY_ERROR);
                    retFlg = "N";
                } else if (!(dualCvRow.getAttribute("TransIdType") != null)) {
                   AdfUtils.addFormattedFacesErrorMessage("Please select ID Type !", null, FacesMessage.SEVERITY_ERROR);
                    retFlg = "N";
                } else if (!(dualCvRow.getAttribute("TransIdNumber") != null)) {
                   AdfUtils.addFormattedFacesErrorMessage("Please enter ID Number !", null, FacesMessage.SEVERITY_ERROR);
                    retFlg = "N";
                } else if (!(dualCvRow.getAttribute("TransPassIssuCntryCode") != null)) {
                   AdfUtils.addFormattedFacesErrorMessage("Please select Passport Issuing Country !", null,
                                                  FacesMessage.SEVERITY_ERROR);
                    retFlg = "N";
                } else if (!(dualCvRow.getAttribute("TransCtznshpCntryCode") != null)) {
                   AdfUtils.addFormattedFacesErrorMessage("Please select Citizenship !", null, FacesMessage.SEVERITY_ERROR);
                    retFlg = "N";
                } else if (!(dualCvRow.getAttribute("TransResdnceCntryCode") != null)) {
                   AdfUtils.addFormattedFacesErrorMessage("Please select Country of Residence !", null,
                                                  FacesMessage.SEVERITY_ERROR);
                    retFlg = "N";
                } else {
                    retFlg = "Y";
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while validating data." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while validating data.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","validateCreateVetting", LogUtils.returnStackTrace(e));
        }
        
        return retFlg;
    }

    /**
     *   Method creates new vetting using user inputs.
     **/
    public void createVetting()
    {
        try 
        {
            ViewObjectImpl dualCvVo = this.getDualCreateVettingView1();
            Row dualCvRow = dualCvVo.getCurrentRow();
            Object stat = null;
            
            if(dualCvRow != null)
            {
    //            LOGGER.finest("TransNameScreened :: "+dualCvRow.getAttribute("TransNameScreened"));
    //            LOGGER.finest("TransEntityType :: "+dualCvRow.getAttribute("TransEntityType"));
    //            LOGGER.finest("TransGender :: "+dualCvRow.getAttribute("TransGender"));
    //            LOGGER.finest("TransDateOfBirth :: "+dualCvRow.getAttribute("TransDateOfBirth"));
    //            LOGGER.finest("TransIdType :: "+dualCvRow.getAttribute("TransIdType"));
    //            LOGGER.finest("TransIdNumber :: "+dualCvRow.getAttribute("TransIdNumber"));
    //            LOGGER.finest("TransPassIssuCntryName :: "+dualCvRow.getAttribute("TransPassIssuCntryName"));
    //            LOGGER.finest("TransCtznshpCntryName :: "+dualCvRow.getAttribute("TransCtznshpCntryName"));
    //            LOGGER.finest("TransResdnceCntryName :: "+dualCvRow.getAttribute("TransResdnceCntryName"));
                
                    stat = AdfUtils.callDbFunction(this, Types.NUMERIC, "RMI_GENERIC_TC.create_vetting(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                     dualCvRow.getAttribute("TransNameScreened"), 
                                                     dualCvRow.getAttribute("TransDateOfBirth"), 
                                                     dualCvRow.getAttribute("TransGender"), 
                                                     dualCvRow.getAttribute("TransIdType"), 
                                                     dualCvRow.getAttribute("TransIdNumber"), 
                                                     dualCvRow.getAttribute("TransEntityType"), 
                                                     dualCvRow.getAttribute("TransPassIssuCntryCode"), 
                                                     null, 
                                                     dualCvRow.getAttribute("TransCtznshpCntryCode"),
                                                     dualCvRow.getAttribute("TransResdnceCntryCode")
                    },"System encountered an exception while creating new vetting.");
                    
                    if(stat != null && stat.toString().equalsIgnoreCase("-1"))
                    {
                        callPopulateTreeProc();
                    }
            } 
        }
        catch (Exception e) {
            e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while creating new vetting." +
                                                       "Please contact your System Administrator.", "",
                                                       FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while creating new vetting.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","createVetting", LogUtils.returnStackTrace(e));
        }
    }
    
    /**
     *   Method fetches tree table of all vetting matches.
     *   @return Datum[] returns data in tabular format.
     **/
    @SuppressWarnings("deprecation")
    public Datum[] callPopulateTreeProc() 
    {
        CallableStatement st = null;
        Datum[] arrMessage = null;
        try 
        {
            String sql = "BEGIN RMI_GENERIC_TC.POPULATE_TREE_DATA(?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            st.setObject(1, "JOHN"); //MAIL SERVER
            st.registerOutParameter(2, Types.ARRAY, "XREF_TREE_TAB_T");
            st.execute();
            ARRAY p2arr = null;
            p2arr = (ARRAY) st.getArray(2);
            arrMessage = p2arr.getOracleArray();
            return arrMessage;
        } catch (Exception e) {
            e.printStackTrace();
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching vetting matches." +
                                                           "Please contact your System Administrator.", "",
                                                           FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching vetting matches.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","callPopulateTreeProc", LogUtils.returnStackTrace(e));
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (Exception e) {
                    e.printStackTrace();
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching vetting matches." +
                                                           "Please contact your System Administrator.", "",
                                                           FacesMessage.SEVERITY_ERROR);
                    logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching vetting matches.", 
                                                                   "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","callPopulateTreeProc", LogUtils.returnStackTrace(e));
                }
            }
        }
        
        return arrMessage;
    }

    /**
     *   Method fetches and displays all vetting matches.
     **/
    @SuppressWarnings("deprecation")
    public void fetchVettingMatches()
    {
        ViewObjectImpl dualCvVo = this.getDualCreateVettingView1();
        Row dualCvRow = dualCvVo.getCurrentRow();
        
        if(dualCvRow != null && dualCvRow.getAttribute("TransNameScreened") != null)
        {
            CallableStatement st = null;
            Datum[] arrMessage = null;
            try 
            {
                String sql = "BEGIN RMI_GENERIC_TC.POPULATE_TREE_DATA(?,?);END;";
                st = getDBTransaction().createCallableStatement(sql, 0);
                st.setObject(1, dualCvRow.getAttribute("TransNameScreened")); //MAIL SERVER
                st.registerOutParameter(2, Types.ARRAY, "XREF_TREE_TAB_T");
                st.execute();
                ARRAY p2arr = null;
                p2arr = (ARRAY) st.getArray(2);
                arrMessage = p2arr.getOracleArray();
                ViewObjectImpl vettingMatchVo = this.getCreateVettingMatchesView1();
                vettingMatchVo.executeQuery();
                for (int i = 0; i < arrMessage.length; i++) 
                {
                    Struct os = (Struct) arrMessage[i];
                    Object[] a = os.getAttributes();
                    
                    if(a.length > 4 && a[4] != null && a[4].toString().equalsIgnoreCase("1"))
                    {                    
                        Row vettingMatchRow = vettingMatchVo.createRow();
                        
                        for (int j = 0; j < a.length; j++) 
                        {                     
                            vettingMatchRow.setAttribute("WcScreenReqId", 
                                            ((a[0] != null) ? a[0] : new Integer(-99)));
                            vettingMatchRow.setAttribute("NameScreened", a[1]);
                            vettingMatchRow.setAttribute("MatchScore", a[2]);
                            vettingMatchRow.setAttribute("NodeId", a[3]);
                            vettingMatchRow.setAttribute("ParentNodeId", a[4]);
                            vettingMatchRow.setAttribute("ReferenceDescription", a[5]);
                            vettingMatchRow.setAttribute("SeafarerId", a[6]);
                            vettingMatchRow.setAttribute("WcExternalXrefId", a[7]);                        
                        }
                        vettingMatchVo.insertRow(vettingMatchRow);
                    }                    
                }                
            } catch (SQLException e) {
                e.printStackTrace();
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching vetting matches." +
                                                           "Please contact your System Administrator.", "",
                                                           FacesMessage.SEVERITY_ERROR);
                logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching vetting matche.", 
                                                               "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","fetchVettingMatches", LogUtils.returnStackTrace(e));
            } finally {
                if (st != null) {
                    try {
                        st.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                        AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching vetting matches." +
                                                               "Please contact your System Administrator.", "",
                                                               FacesMessage.SEVERITY_ERROR);
                        logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching vetting matche.", 
                                                                       "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","fetchVettingMatches", LogUtils.returnStackTrace(e));
                    }
                }
            }    
        }
    }

    /**
     *   Method fetches tree table of all vetting matches.
     *   @return String returns success Y/N.
     **/
    public String useExistingVetting()
    {
        Object retVal = "N";
        try 
        { 
            ViewObjectImpl cvmVo = this.getCreateVettingMatchesView1();
            Row cvmRow = cvmVo.getCurrentRow();
        
            if(cvmRow != null && cvmRow.getAttribute("WcScreenReqId") != null)
            {
                retVal = AdfUtils.callDbFunction(this, Types.VARCHAR, "RMI_GENERIC_TC.USE_EXISTING_VETTING(?,?,?,?)", new Object[] {
                                                 "WC_SCREENING_REQUEST",
                                                 "WC_SCREENING_REQUEST_ID",
                                                 cvmRow.getAttribute("WcScreenReqId"),
                                                 null },"System encountered an exception while selecting exisging vetting.");
                if(retVal == null)
                {
                    retVal = "N";
                }
            }
        } 
        catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while selecting exisging vetting." +
                                                   "Please contact your System Administrator.", "",
                                                   FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while selecting exisging vetting.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","useExistingVetting", LogUtils.returnStackTrace(e));
        }
        
        return retVal.toString();
    }

    /**
     *   Method creates new vetting.
     *   @return String returns success S/E.
     **/
    public String createNewVetting()
    {
        
        LOGGER.finest("createNewVetting - Start");
        
        String stat = "E";
        try 
        {
            ViewObjectImpl dualCvVo = this.getDualCreateVettingView1();
            Row dualCvRow = dualCvVo.getCurrentRow();
            Row tcRefRow = this.getTcReferencesView1().getCurrentRow();
            
            if(dualCvRow.getAttribute("TransNameScreenedUpdatable") == null || "".equals(dualCvRow.getAttribute("TransNameScreenedUpdatable")))
                stat = "Please enter Name Screened";
            else if(dualCvRow.getAttribute("TransEntityType") == null || "".equals(dualCvRow.getAttribute("TransEntityType")))
                stat = "Please enter Entity Type";
            else if("INDIVIDUAL".equals(dualCvRow.getAttribute("TransEntityType"))){    
                if(dualCvRow.getAttribute("TransIdType") != null && (dualCvRow.getAttribute("TransIdNumber") == null ||"".equals(dualCvRow.getAttribute("TransIdNumber"))))
                    stat = "Please enter Number";
            }
            if(dualCvRow != null && "E".equals(stat))
            {
                
                LOGGER.finest("createNewVetting - VARIABLES");
                
                LOGGER.finest("TransNameScreenedUpdatable :: "+dualCvRow.getAttribute("TransNameScreenedUpdatable"));
                LOGGER.finest("TransDateOfBirth :: "+dualCvRow.getAttribute("TransDateOfBirth"));
                LOGGER.finest("TransGender :: "+dualCvRow.getAttribute("TransGender"));
                LOGGER.finest("TransIdType :: "+dualCvRow.getAttribute("TransIdType"));
                LOGGER.finest("TransIdNumber :: "+dualCvRow.getAttribute("TransIdNumber"));
                LOGGER.finest("TransEntityType :: "+dualCvRow.getAttribute("TransEntityType"));
                LOGGER.finest("TransPassIssuCntryCode :: "+dualCvRow.getAttribute("TransPassIssuCntryCode"));
                LOGGER.finest("TransPassIssuCntryCode1 :: "+dualCvRow.getAttribute("TransPassIssuCntryCode1")); //T20220420.0027 - TC - Update Vetting (IRI)
                LOGGER.finest("TransResdnceCntryCode :: "+dualCvRow.getAttribute("TransResdnceCntryCode"));
                LOGGER.finest("TransCtznshpCntryCode :: "+dualCvRow.getAttribute("TransCtznshpCntryCode"));
                LOGGER.finest("TransCtznshpCntryCode1 :: "+dualCvRow.getAttribute("TransCtznshpCntryCode1")); //T20220420.0027 - TC - Update Vetting (IRI)
                LOGGER.finest("TransResdnceCntryCode :: "+dualCvRow.getAttribute("TransResdnceCntryCode"));
                LOGGER.finest("TransCityId :: "+dualCvRow.getAttribute("TransCityId"));
                LOGGER.finest("P_SOURCE_ID :: "+RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_ID"));
                if(tcRefRow != null) {
                    LOGGER.finest("MasterId :: "+tcRefRow.getAttribute("MasterId"));
                    LOGGER.finest("XrefId :: "+tcRefRow.getAttribute("XrefId"));
                }
                LOGGER.finest("Id :: "+dualCvRow.getAttribute("TransId"));
                LOGGER.finest("source table:"+dualCvRow.getAttribute("TransSourceTable"));
                LOGGER.finest("source table column:"+dualCvRow.getAttribute("TransSourceTableColumn"));
                LOGGER.finest("source id:"+dualCvRow.getAttribute("TransSourceId"));
                String sId="", sTable="", sTableColumn="";
                
                
                if("C".equals(dualCvRow.getAttribute("TransOperationType"))) {
                    
                    LOGGER.finest("createNewVetting - UPDATE_VETTING_SAVE 1");
                    
                    String sql = "BEGIN {? = call RMI_GENERIC_TC.CREATE_VETTING_SAVE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}; END;";
                    
                    CallableStatement st = getDBTransaction().createCallableStatement(sql, 0);
                    st.registerOutParameter(1, Types.VARCHAR);
                    st.setObject(2, dualCvRow.getAttribute("TransNameScreenedUpdatable").toString().toUpperCase()); 
                    st.setObject(3, dualCvRow.getAttribute("TransDateOfBirth"));
                    st.setObject(4, dualCvRow.getAttribute("TransGender"));
                    st.setObject(5, dualCvRow.getAttribute("TransIdType"));
                    st.setObject(6, (dualCvRow.getAttribute("TransIdNumber") == null || "".equals(dualCvRow.getAttribute("TransIdNumber")))? dualCvRow.getAttribute("TransIdNumber") : dualCvRow.getAttribute("TransIdNumber").toString().toUpperCase());
                    st.setObject(7, dualCvRow.getAttribute("TransEntityType"));
                    st.setObject(8, null);
                    st.setObject(9, dualCvRow.getAttribute("TransPassIssuCntryCode"));
                    st.setObject(10, dualCvRow.getAttribute("TransResdnceCntryCode"));
                    st.setObject(11, dualCvRow.getAttribute("TransCtznshpCntryCode"));
                    st.setObject(12, dualCvRow.getAttribute("TransResdnceCntryCode"));
                    st.setObject(13, dualCvRow.getAttribute("TransIMONumber"));
                    st.setObject(14, dualCvRow.getAttribute("TransCityId"));
                    //T20211119.0065 - RE: TSAKOS SHIPPING AND TRADING S A
    //                st.setObject(15, ((tcRefRow != null)? tcRefRow.getAttribute("SourceTable") : "")); 
    //                st.setObject(16, ((tcRefRow != null)? tcRefRow.getAttribute("SourceTableColumn") : ""));
    //                st.setObject(17, ((tcRefRow != null)? tcRefRow.getAttribute("SourceId") : ""));
                    //T20211208.0024 - Duplication for create vetting in DEV
                    st.setObject(15, dualCvRow.getAttribute("TransSourceTable")); 
                    st.setObject(16, dualCvRow.getAttribute("TransSourceTableColumn"));
                    st.setObject(17, dualCvRow.getAttribute("TransSourceId"));
                    st.setObject(18, ((tcRefRow != null && "U".equals(dualCvRow.getAttribute("TransOperationType")))? tcRefRow.getAttribute("XrefId") : ""));
                    st.setObject(19, ((tcRefRow != null && "U".equals(dualCvRow.getAttribute("TransOperationType")))? tcRefRow.getAttribute("MasterId") : ""));
                    st.setObject(20, getUserId());
                    st.setObject(21, dualCvRow.getAttribute("TransId"));
                    st.setObject(22, dualCvRow.getAttribute("TransLegacyVettingFlag"));
                    st.setObject(23, dualCvRow.getAttribute("TransEastAsianOriginName"));
                    st.registerOutParameter(24, Types.INTEGER);
                    st.registerOutParameter(25, Types.VARCHAR);
                    st.registerOutParameter(26, Types.VARCHAR);
                    st.execute();
                    
                    stat = st.getString(1);
                    sId=st.getString(24);
                    sTable=st.getString(25);
                    sTableColumn=st.getString(26);
                    
                    
                    if(stat == null)
                    {
                        stat = "E";
                    } 
                    else if(RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_ID") == null || "".equals(RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_ID"))){
                        RequestContext.getCurrentInstance().getPageFlowScope().put("P_SOURCE_ID", sId);
                        RequestContext.getCurrentInstance().getPageFlowScope().put("P_SOURCE_TABLE", sTable);
                        RequestContext.getCurrentInstance().getPageFlowScope().put("P_SOURCE_TABLE_COLUMN", sTableColumn);
                    }
                } 
                //T20220222.0024 - Duplicate Name Created When Updating Record Information
                else if("U".equals(dualCvRow.getAttribute("TransOperationType"))) {
                    
                    LOGGER.finest("createNewVetting - UPDATE_VETTING_SAVE 2");
                    
                    String sql = "BEGIN {? = call RMI_GENERIC_TC.UPDATE_VETTING_SAVE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}; END;";
                    CallableStatement st = getDBTransaction().createCallableStatement(sql, 0);
                    st.registerOutParameter(1, Types.VARCHAR);
                    st.setObject(2, dualCvRow.getAttribute("TransNameScreenedUpdatable").toString().toUpperCase()); 
                    st.setObject(3, dualCvRow.getAttribute("TransDateOfBirth"));
                    st.setObject(4, dualCvRow.getAttribute("TransGender"));
                    st.setObject(5, dualCvRow.getAttribute("TransIdType"));
                    st.setObject(6, (dualCvRow.getAttribute("TransIdNumber") == null || "".equals(dualCvRow.getAttribute("TransIdNumber")))? dualCvRow.getAttribute("TransIdNumber") : dualCvRow.getAttribute("TransIdNumber").toString().toUpperCase());
                    st.setObject(7, dualCvRow.getAttribute("TransEntityType"));
                    st.setObject(8, null);
                    st.setObject(9, dualCvRow.getAttribute("TransPassIssuCntryCode1")); //T20220420.0027 - TC - Update Vetting (IRI)
                    st.setObject(10, dualCvRow.getAttribute("TransResdnceCntryCode"));
                    st.setObject(11, dualCvRow.getAttribute("TransCtznshpCntryCode1")); //T20220420.0027 - TC - Update Vetting (IRI)
                    st.setObject(12, dualCvRow.getAttribute("TransResdnceCntryCode"));
                    st.setObject(13, dualCvRow.getAttribute("TransIMONumber"));
                    st.setObject(14, dualCvRow.getAttribute("TransCityId"));
                    st.setObject(15, getUserId());
                    st.setObject(16, dualCvRow.getAttribute("TransLegacyVettingFlag"));
                    st.setObject(17, dualCvRow.getAttribute("TransEastAsianOriginName"));
                    st.setObject(18, dualCvRow.getAttribute("TransId"));
                    st.setObject(19,null);
                    st.execute();
                    
                    stat = st.getString(1);
                    if(stat == null)
                    {
                        stat = "E";
                    } 
                }
            }
        } 
        catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while creating new vetting." +
                                                               "Please contact your System Administrator.", "",
                                                               FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while creating new vetting.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","createNewVetting", LogUtils.returnStackTrace(e));
        }
        
        LOGGER.finest("createNewVetting - End");
        
        return stat.toString();
    }

    /**
     *   Method fetches file name of generated merged pdf.
     *   @param seafarerId pass seafarerId of the selected seafarer.
     *   @return String returns file name.
     **/
    public String getMergedFileName(Integer seafarerId)
    {
        try 
        {
            Integer esiBatchId =
                Integer.parseInt(RequestContext.getCurrentInstance().getPageFlowScope().get("P_ESI_BATCH_ID_TC").toString());
            String nameScreened = null;
            if (seafarerId != null && esiBatchId != null) {
                ViewObjectImpl sfrrVo = this.getRmiSeafarerIfaceView1();
                sfrrVo.setNamedWhereClauseParam("pSeafarerId", seafarerId);
                sfrrVo.setNamedWhereClauseParam("pEsiBatchId", esiBatchId);
                sfrrVo.executeQuery();

                nameScreened =
                    this.getWcScreeningRequestView1().getCurrentRow().getAttribute("NameScreened").toString();
            }

            return ((nameScreened != null) ? (nameScreened.replaceAll("\\s+", "_") + "-" + seafarerId) : "merge");
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching file." +
                                                   "Please contact your System Administrator.", "",
                                                   FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching file.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getMergedFileName", LogUtils.returnStackTrace(e));
        }
        return null;
    }

    /**
     *   Method merges all supporting documents in single pdf.
     *   @param seafarerId pass seafarerId of the selected seafarer.
     *   @return String returns file path.
     **/
    public String genMergedSupportingDocs(Integer seafarerId)
    {
        try 
        {
            Integer esiBatchId =
                Integer.parseInt(RequestContext.getCurrentInstance().getPageFlowScope().get("P_ESI_BATCH_ID_TC").toString());

            if (seafarerId != null && esiBatchId != null) {
                ViewObjectImpl sfrrVo = this.getRmiSeafarerIfaceView1();
                sfrrVo.setNamedWhereClauseParam("pSeafarerId", seafarerId);
                sfrrVo.setNamedWhereClauseParam("pEsiBatchId", esiBatchId);
                sfrrVo.executeQuery();

                String nameScreened =
                    this.getWcScreeningRequestView1().getCurrentRow().getAttribute("NameScreened").toString();

                Row[] sfrrRow = sfrrVo.getAllRowsInRange();

                if (sfrrRow.length > 0) {
                    String identitydocPath = null;
                    String medicalphysicaledocPath = null;
                    String serviceTransPath = null;
                    String applicationedocPath = null;
                    String affidavitPath = null;
                    String securitysatedocPath = null;
                    String consentdocPath = null;
                    String internaledocPath = null;
                    List<InputStream> inputPdfList = null;
                    inputPdfList = new ArrayList<InputStream>();
                    ViewObjectImpl docLnkVo = getDocumentLinkView1();
                    Row[] docLnkRows;

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow[0].getAttribute("IdentityDocEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocLink") != null) {
                        identitydocPath = docLnkRows[0].getAttribute("DocLink").toString();
                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow[0].getAttribute("PhysicalEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocLink") != null) {
                        medicalphysicaledocPath = docLnkRows[0].getAttribute("DocLink").toString();
                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow[0].getAttribute("SeaserviceTranscriptEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocLink") != null) {
                        serviceTransPath = docLnkRows[0].getAttribute("DocLink").toString();
                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow[0].getAttribute("ApplicationEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocLink") != null) {
                        applicationedocPath = docLnkRows[0].getAttribute("DocLink").toString();
                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow[0].getAttribute("AffidavitEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocLink") != null) {
                        affidavitPath = docLnkRows[0].getAttribute("DocLink").toString();
                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow[0].getAttribute("SatEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocLink") != null) {
                        securitysatedocPath = docLnkRows[0].getAttribute("DocLink").toString();
                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow[0].getAttribute("ConsentEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocLink") != null) {
                        consentdocPath = docLnkRows[0].getAttribute("DocLink").toString();
                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow[0].getAttribute("InternalEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocLink") != null) {
                        internaledocPath = docLnkRows[0].getAttribute("DocLink").toString();
                    }

                    //                LOGGER.finest("IdentityDocEdocId =" + sfrrRow[0].getAttribute("IdentityDocEdocId"));
                    //                LOGGER.finest("PhysicalEdocId =" + sfrrRow[0].getAttribute("PhysicalEdocId"));
                    //                LOGGER.finest("SeaserviceTranscriptEdocId =" + sfrrRow[0].getAttribute("SeaserviceTranscriptEdocId"));
                    //                LOGGER.finest("ApplicationEdocId =" + sfrrRow[0].getAttribute("ApplicationEdocId"));
                    //                LOGGER.finest("AffidavitEdocId =" + sfrrRow[0].getAttribute("AffidavitEdocId"));
                    //                LOGGER.finest("SatEdocId =" + sfrrRow[0].getAttribute("SatEdocId"));
                    //                LOGGER.finest("ConsentEdocId =" + sfrrRow[0].getAttribute("ConsentEdocId"));
                    //                LOGGER.finest("InternalEdocId =" + sfrrRow[0].getAttribute("InternalEdocId"));
                    //
                    //                LOGGER.finest("identitydocPath =" + identitydocPath);
                    //                LOGGER.finest("medicalphysicaledocPath =" + medicalphysicaledocPath);
                    //                LOGGER.finest("serviceTransPath =" + serviceTransPath);
                    //                LOGGER.finest("applicationedocPath =" + applicationedocPath);
                    //                LOGGER.finest("affidavitPath =" + affidavitPath);
                    //                LOGGER.finest("securitysatedocPath =" + securitysatedocPath);
                    //                LOGGER.finest("consentdocPath =" + consentdocPath);
                    //                LOGGER.finest("internaledocPath =" + internaledocPath);

                    try {
                        if (sfrrRow[0].getAttribute("IdentityDocEdocId") != null) {
                            
                                inputPdfList.add(new URL(identitydocPath).openStream());
                        }

                        if (sfrrRow[0].getAttribute("PhysicalEdocId") != null) {
                                inputPdfList.add(new URL(medicalphysicaledocPath).openStream());
                        }

                        if (sfrrRow[0].getAttribute("SeaserviceTranscriptEdocId") != null) {
                                inputPdfList.add(new URL(serviceTransPath).openStream());
                        }

                        if (sfrrRow[0].getAttribute("ApplicationEdocId") != null) {
                                inputPdfList.add(new URL(applicationedocPath).openStream());
                        }

                        if (sfrrRow[0].getAttribute("AffidavitEdocId") != null) {
                                inputPdfList.add(new URL(affidavitPath).openStream());
                        }

                        if (sfrrRow[0].getAttribute("SatEdocId") != null) {
                                inputPdfList.add(new URL(securitysatedocPath).openStream());
                        }

                        if (sfrrRow[0].getAttribute("ConsentEdocId") != null) {
                                inputPdfList.add(new URL(consentdocPath).openStream());
                        }

                        if (sfrrRow[0].getAttribute("InternalEdocId") != null) {
                                inputPdfList.add(new URL(internaledocPath).openStream());
                        }

                        String folderPath = "/tmp/IRI_SEAFARER_REBUILD/";  
                        File folder = new File(folderPath);
                        boolean folderExists = folder.exists();
                        
                        LOGGER.finest("folderExists :: "+folderExists);
                        
                        if(!folderExists)
                            createDocumentPreviewFolderWithPerms(folderPath);

                        String fileName =
                            folderPath +
                            ((nameScreened != null) ? (nameScreened.replaceAll("\\s+", "_") + "-" + seafarerId) :
                             "merge") + ".pdf";
                        OutputStream outputStream = new FileOutputStream(fileName);
                        mergePdfFiles(inputPdfList, outputStream);

                        return (fileName);

                    } catch (Exception e) {
                        e.printStackTrace();
                        AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while generating supporting documents." +
                                                               "Please contact your System Administrator.", "",
                                                               FacesMessage.SEVERITY_ERROR);
                        logGenericTC(LogUtils.ERROR, "System encountered an exception while generating supporting documents.", 
                                                                       "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","genMergedSupportingDocs", LogUtils.returnStackTrace(e));
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while generating supporting documents." +
                                                   "Please contact your System Administrator.", "",
                                                   FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while generating supporting documents.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","genMergedSupportingDocs", LogUtils.returnStackTrace(e));
        }                
        return null;
    }

    /**
     *   Method merges all supporting documents in single pdf.
     *   @param inputPdfList pass list of all input pdf to be merged.
     *   @param outputStream pass the file in which the files will be merged.
     *   @throws Exception.
     *   @return String returns file path.
     **/
    public void mergePdfFiles(List<InputStream> inputPdfList,
            OutputStream outputStream) throws Exception{
        
        Document document = new Document();
        try 
        {
            List<PdfReader> readers = new ArrayList<PdfReader>();
            int totalPages = 0;
            Iterator<InputStream> pdfIterator = inputPdfList.iterator();
            while (pdfIterator.hasNext()) {
                InputStream pdf = pdfIterator.next();
                PdfReader pdfReader = new PdfReader(pdf);
                readers.add(pdfReader);
                totalPages = totalPages + pdfReader.getNumberOfPages();
            }

            PdfWriter writer = PdfWriter.getInstance(document, outputStream);
            document.open();
            PdfContentByte pageContentByte = writer.getDirectContent();

            PdfImportedPage pdfImportedPage;
            int currentPdfReaderPage = 1;
            Iterator<PdfReader> iteratorPDFReader = readers.iterator();

            while (iteratorPDFReader.hasNext()) {
                PdfReader pdfReader = iteratorPDFReader.next();
                while (currentPdfReaderPage <= pdfReader.getNumberOfPages()) {
                    pdfImportedPage = writer.getImportedPage(pdfReader, currentPdfReaderPage);
                    pageContentByte.addTemplate(pdfImportedPage, 0, 0);
                    currentPdfReaderPage++;
                }
                currentPdfReaderPage = 1;
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while generating supporting documents." +
                                                   "Please contact your System Administrator.", "",
                                                   FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while generating supporting documents.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","mergePdfFiles", LogUtils.returnStackTrace(e));
        } finally{
            outputStream.flush();
            document.close();
            outputStream.close();
        }
    }

    public void createDocumentPreviewFolderWithPerms(String folderPath) 
    {
        if(folderPath != null)
        {
            Set<PosixFilePermission> fullPermission = new HashSet<PosixFilePermission>();
            fullPermission.add(PosixFilePermission.OWNER_EXECUTE);
            fullPermission.add(PosixFilePermission.OWNER_READ);
            fullPermission.add(PosixFilePermission.OWNER_WRITE);

            fullPermission.add(PosixFilePermission.GROUP_EXECUTE);
            fullPermission.add(PosixFilePermission.GROUP_READ);
            fullPermission.add(PosixFilePermission.GROUP_WRITE);

            fullPermission.add(PosixFilePermission.OTHERS_EXECUTE);
            fullPermission.add(PosixFilePermission.OTHERS_READ);
            fullPermission.add(PosixFilePermission.OTHERS_WRITE);

            Path path = Paths.get(folderPath, "null");
            try {
                Files.createDirectories(path, PosixFilePermissions.asFileAttribute(fullPermission));
                Files.setPosixFilePermissions(path, fullPermission);
            } catch (Exception e) {
                e.printStackTrace();
                logGenericTC(LogUtils.ERROR, "System encountered an exception while granting folder permission", 
                                                               "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","createDocumentPreviewFolderWithPerms", LogUtils.returnStackTrace(e));
            }
        }
    }

    /**
     *   Method fetches all consent details.
     *   @return String returns consent file edocId if offline.
     **/
    public String filterConsentDetails()
    {
        String ret  = null;
        String consentEdocId=null, fileName=null;
        try 
        {
            ViewObject wcScrnRqVO = getWcScreeningRequestView1();
            Row wcScrnRqRow = wcScrnRqVO.getCurrentRow();
            LOGGER.finest("namescreened:"+wcScrnRqRow.getAttribute("NameScreened"));
            LOGGER.finest("TransResidenceCntry:"+wcScrnRqRow.getAttribute("TransResidenceCntry"));
            LOGGER.finest("ResidenceCountryCode:"+wcScrnRqRow.getAttribute("ResidenceCountryCode"));
            LOGGER.finest("DateOfBirth:"+wcScrnRqRow.getAttribute("DateOfBirth"));
            Timestamp dob = (Timestamp) wcScrnRqRow.getAttribute("DateOfBirth");
            SimpleDateFormat format = new SimpleDateFormat("dd-MMM-yyyy");
            LOGGER.finest("formated dob:"+format.format(dob.getTime()));
            Object stat = AdfUtils.callDbFunction(this, Types.VARCHAR, "rmi_generic_tc.rmi_source_consent_id(?,?,?)", new Object[] {
                                                  wcScrnRqRow.getAttribute("NameScreened"),
                                                  //wcScrnRqRow.getAttribute("TransResidenceCntry"),
                                                  wcScrnRqRow.getAttribute("ResidenceCountryCode"),
                                                  format.format(dob.getTime())
            },"System encountered an exception while fetching consent details.");
            LOGGER.finest("stat:"+stat);
            if (stat != null && stat.toString().length() > 1){ 
                if(!nullStrToSpc(stat).contains("---")) {
                    consentEdocId = stat.toString();
                } else {
                    String[] col = stat.toString().split("---");
                    consentEdocId = col[0];
                    fileName = col[1];
                }
            } 
            

            if (consentEdocId != null) {
                Integer res = Integer.parseInt(consentEdocId.toString());
                ViewObject consentVo = this.getConsentDetailsView();
                consentVo.setNamedWhereClauseParam("pSourceId", res);
                consentVo.executeQuery();

                if (consentVo.getRowCount() > 0) {
                    Row row = consentVo.first();
                    String source = row.getAttribute("ConsentSource").toString();
                    if (source.equalsIgnoreCase("Online")) {
                        wcScrnRqRow.setAttribute("TransOnlineConfirmationNumber",
                                                 row.getAttribute("ConfirmationNumber"));
                        wcScrnRqRow.setAttribute("TransOnlineConsentStartDate", row.getAttribute("ConsentDate"));
                        wcScrnRqRow.setAttribute("TransOnlineConsentEndDate", row.getAttribute("ConsentExpireDate"));
                        wcScrnRqRow.setAttribute("TransUploadedConsentStartDate", null);
                        wcScrnRqRow.setAttribute("TransUploadedConsentEndDate", null);
                        ret = "Online";
                    } else {
                        Integer edoc_id = null;
                        if (row.getAttribute("EdocId") != null) {
                            edoc_id = Integer.parseInt(row.getAttribute("EdocId").toString());
                        }
                        String edoc = row.getAttribute("EdocId").toString();
                        wcScrnRqRow.setAttribute("TransUploadedConsentEdocId", edoc_id);
                        wcScrnRqRow.setAttribute("TransUploadedConsentStartDate", row.getAttribute("ConsentDate"));
                        wcScrnRqRow.setAttribute("TransUploadedConsentEndDate", row.getAttribute("ConsentExpireDate"));
                        wcScrnRqRow.setAttribute("TransOnlineConfirmationNumber", null);
                        wcScrnRqRow.setAttribute("TransOnlineConsentStartDate", null);
                        wcScrnRqRow.setAttribute("TransOnlineConsentEndDate", null);
                        ret = edoc;
                    }
                }
            } else {
                wcScrnRqRow.setAttribute("TransOnlineConfirmationNumber", null);
                wcScrnRqRow.setAttribute("TransOnlineConsentStartDate", null);
                wcScrnRqRow.setAttribute("TransOnlineConsentEndDate", null);
                wcScrnRqRow.setAttribute("TransUploadedConsentStartDate", null);
                wcScrnRqRow.setAttribute("TransUploadedConsentEndDate", null);
                wcScrnRqRow.setAttribute("TransUploadedConsentEdocId", null);
            }

            if (ret != null)
                return ret+"---"+fileName;
            else
                return null;
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching consent details." +
                                                   "Please contact your System Administrator.", "",
                                                   FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching consent details.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","filterConsentDetails", LogUtils.returnStackTrace(e));
        }
        return ret;
    }

    /**
     *   Method stores consent document uploaded by to the server.
     *   @param param1 pass edoc upload type WORLD_CHECK/SICD/etc.
     *   @param param2 pass edoc categoryId 0025/0026/etc.
     *   @param param3 pass edoc type Consent/Vetting/etc.
     *   @param fileName pass name of file uploaded.
     *   @return String returns edocID of consent uploaded.
     **/
    public String uploadDocument(String entityName, String fileName)
    {        
        try 
        {
            Integer esiBatchId = null;
            Integer sourceId = null;
            String fnRetVal = "";

            sourceId = Integer.parseInt(RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_ID").toString());
            if(RequestContext.getCurrentInstance().getPageFlowScope().get("P_ESI_BATCH_ID") != null){
                esiBatchId = Integer.parseInt(RequestContext.getCurrentInstance().getPageFlowScope().get("P_ESI_BATCH_ID").toString());
            }

            if (sourceId != null) {
                try {
                   // this.getDBTransaction().postChanges();
                    
                   // T20221005.0018 - TC - FA - DPCF not in OWS but is in Oracle                   

                    fnRetVal =
                        (String) AdfUtils.callDbFunction(this, Types.VARCHAR,
                                                         "RMI_GENERIC_TC.rmi_upld_consent_frm_tc(?,?,?,?,?)", new Object[] {
                                                         entityName, fileName, sourceId, esiBatchId,
                                                         this.getUserId()
                    },"System encountered an exception while consent document.");
                } catch (Exception e) {
                    e.printStackTrace();
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while consent document." +
                                                           "Please contact your System Administrator.", "",
                                                           FacesMessage.SEVERITY_ERROR);
                    logGenericTC(LogUtils.ERROR, "System encountered an exception while consent document.", 
                                                                   "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","uploadDocument", LogUtils.returnStackTrace(e));
                }

                if (fnRetVal != null) {
                    this.getDBTransaction().commit();

                    return fnRetVal;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while uploading consent document." +
                                                   "Please contact your System Administrator.", "",
                                                   FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while uploading consent document.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","uploadDocument", LogUtils.returnStackTrace(e));
        }   
        return "";
    }

    /**
     *   Method creates new consent when consent is uploaded/updated.
     **/
    public void createConsent(String consentEdocId)
    {        
        LOGGER.finest("Impl:createConsent:consentEdocId:"+consentEdocId);
        try 
        {
            Integer esiBatchId = null;
            if(RequestContext.getCurrentInstance().getPageFlowScope().get("P_ESI_BATCH_ID_TC") != null)
                esiBatchId = Integer.parseInt(RequestContext.getCurrentInstance().getPageFlowScope().get("P_ESI_BATCH_ID_TC").toString());
            Integer sourceId = Integer.parseInt(RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_ID").toString());
            String fnRetVal = "";
            Row wcScrnRqRow = this.getWcScreeningRequestView1().getCurrentRow();
            
            if(wcScrnRqRow != null && sourceId != null && esiBatchId != null)
            {     
                ViewObjectImpl sfrrVo = this.getRmiSeafarerIfaceView1();
                sfrrVo.setNamedWhereClauseParam("pSeafarerId", (sourceId != null) ? sourceId : -1);
                sfrrVo.setNamedWhereClauseParam("pEsiBatchId", esiBatchId);
                sfrrVo.executeQuery();
                
                Row[] sfrrRow = sfrrVo.getAllRowsInRange();
                
                if(sfrrRow.length > 0)
                {
                    Row r = sfrrRow[0];                    
                    fnRetVal = (String) AdfUtils.callDbFunction(this, Types.VARCHAR, "RMI_GENERIC_TC.add_consent(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                              sourceId,
                                                              r.getAttribute("FirstName"),
                                                              r.getAttribute("LastName"),
                                                              wcScrnRqRow.getAttribute("TransResidenceCntry"),
                                                              r.getAttribute("BirthDate"),
                                                              r.getAttribute("ConsentEdocId"),
                                                              esiBatchId,
                                                              wcScrnRqRow.getAttribute("TransUploadedConsentStartDate"),
                                                              wcScrnRqRow.getAttribute("TransUploadedConsentEndDate"),
                                                              getUserId(),
                                                              r.getAttribute("EsiId"),
                                                              null
                    },"System encountered an exception while creating consent.");
                }
            }else {
                fnRetVal = (String) AdfUtils.callDbFunction(this, Types.VARCHAR, "RMI_GENERIC_TC.add_consent(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                          sourceId,
                                                          null,
                                                          null,
                                                          wcScrnRqRow.getAttribute("TransResidenceCntry"),
                                                          null,
                                                          consentEdocId,
                                                          null,
                                                          wcScrnRqRow.getAttribute("TransUploadedConsentStartDate"),
                                                          wcScrnRqRow.getAttribute("TransUploadedConsentEndDate"),
                                                          getUserId(),
                                                          null,
                                                          null
                },"System encountered an exception while creating consent.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while creating consent." +
                                                   "Please contact your System Administrator.", "",
                                                   FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while creating consent.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","createConsent", LogUtils.returnStackTrace(e));
        }
    } 
    
    /**
     *   Method checks if any selected vetting is Open before Run TC.
     *   @return String returns NameScreened-Yes/N-No.
     **/
    public String checkCallRunTc() 
    {
        RowSetIterator tcRefRsi = this.getTcReferencesView1();
        
        while(tcRefRsi.hasNext())
        {
            Row r = tcRefRsi.next();
            
            LOGGER.finest("TcExcluded :: "+r.getAttribute("TcExcluded"));
            
            if(r != null && (r.getAttribute("TcExcluded") != null 
                             && r.getAttribute("TcExcluded").toString().equalsIgnoreCase("Y")))
            {
            
                if(r.getAttribute("CaseStatus") != null && r.getAttribute("CaseStatus").toString().equalsIgnoreCase("Open"))
                    return r.getAttribute("NameScreened").toString();
            }
        }
        
        return "N";
    }
    
  public String callRunTc(String affidavitFlag, String documentType) 
     {
         String url = null;
             
         CallableStatement st = null;
         try 
         {
             /* Moved the below code lines to seperate method, //T20220323.0025 - Issue with vettings being automatically check mark... (IRI)
             ViewObjectImpl tcReferenceVo = this.getTcReferencesView1();
             RowSetIterator tcReferenceRsi = tcReferenceVo.createRowSetIterator(null);
             String tcExcluded = "N";
             while (tcReferenceRsi.hasNext()) {
                 Row r = tcReferenceRsi.next();

                 if (r != null && r.getAttribute("MasterId") != null) {
                     
                     tcExcluded = ("Y".equals(r.getAttribute("TcExcluded")))? "N" : "Y";

                     AdfUtils.callDbFunction(this, Types.VARCHAR,
                                                          "RMI_GENERIC_TC.update_master_individual(?,?,?,?)", new Object[] {
                                                          r.getAttribute("MasterId"), r.getAttribute("AliasId"),
                                                          r.getAttribute("XrefId"), tcExcluded
                     },"System encountered an exception while running TC.");

                     this.getDBTransaction().commit();
                 }
             }*/
             //T20220323.0025 - Issue with vettings being automatically check mark... (IRI)
             this.saveVettingCheckBoxSelections();
             
             String returnStatus = null;
             String returnMsg = null;
             Integer sourceId = Integer.parseInt(RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_ID").toString());
             String sql = "BEGIN RMI_GENERIC_TC.create_batch_vetting(?,?,?,?,?,?,?,?,?);END;";
             st = getDBTransaction().createCallableStatement(sql, 0);
             st.setObject(1, getUserId()); //SOURCE_TABLE
             st.setObject(2, sourceId); //SOURCE_TABLE_COLUMN_VALUE
             st.setObject(3, RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_TABLE"));
             st.setObject(4, RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_TABLE_COLUMN"));
             st.registerOutParameter(5, Types.NUMERIC, url);
             st.registerOutParameter(6, Types.VARCHAR, returnStatus);
             st.registerOutParameter(7, Types.VARCHAR, returnMsg);
             //st.setObject(8, documentType); //T20211019.0002 - Fwd: TC 2.0 - Provisional for Full Term Documents
             // T20230330.0026 - LONO - TC Department (IRI)
             Map pMap =  ADFContext.getCurrent().getPageFlowScope();
             String provDocType = (String) pMap.get("ProvisionalDocumentType");
             st.setObject(8, provDocType);
             st.setObject(9, affidavitFlag);
             st.execute();
                    
             returnStatus = st.getString(6);            
             returnMsg = st.getString(7);
             url = returnStatus+"-"+returnMsg;
         
             
         } catch (Exception e) {
             e.printStackTrace();
                     AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while running TC." +
                                                            "Please contact your System Administrator.", "",
                                                            FacesMessage.SEVERITY_ERROR);
             logGenericTC(LogUtils.ERROR, "System encountered an exception while running TC.", 
                                                            "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","callRunTc", LogUtils.returnStackTrace(e));
         } finally {
             if (st != null) {
                 try {
                     st.close();
                 } catch (Exception e) {
                     e.printStackTrace();
                     AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while running TC." +
                                                            "Please contact your System Administrator.", "",
                                                            FacesMessage.SEVERITY_ERROR);
                     logGenericTC(LogUtils.ERROR, "System encountered an exception while while running TCs.", 
                                                                    "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","callRunTc", LogUtils.returnStackTrace(e));
                 }
             }
         }
         
         return url;
     }
    
    
    
    public void initializeViewContextAGetData(String filter, String sortByColumnName) {
        String sourceId=null, sourceTable=null, sourceTableColumn=null;
        CallableStatement st = null;
        try {
            if(RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_ID") != null && !"".equals(RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_ID")))
                sourceId = RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_ID").toString();
            if(RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_TABLE") != null && !"".equals(RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_ID")))
                sourceTable = RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_TABLE").toString();
            if(RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_TABLE_COLUMN") != null && !"".equals(RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_ID")))
                sourceTableColumn = RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_TABLE_COLUMN").toString();
            
            if(sourceId != null && sourceTable != null && sourceTableColumn != null) {
                st = this.getDBTransaction().createCallableStatement("begin xwrl_view_pkg.enable_view_ctx(?,?,?); end;", 0);
                st.setString(1, sourceTable);
                st.setString(2, sourceTableColumn);
                st.setString(3, sourceId);
                st.execute();
                
                ViewObject vo = getXwrlTCDetailsView1();
                LOGGER.finest("sortByColumnName:"+sortByColumnName);
                LOGGER.finest("Filter:"+filter);
                if("".equals(filter) || filter == null) {
                    vo.setWhereClause(null);
                } else {
                    vo.setWhereClause(filter);
                }
                
                if(sortByColumnName != null && !"none".equals(sortByColumnName))
                    vo.setSortBy(sortByColumnName);
                else
                    vo.setSortBy(null);
                
                vo.executeQuery();
                
                ViewObjectImpl tcReferencesVo = this.getTcReferencesView1();
                tcReferencesVo.executeQuery();
                int cnt = 0;
                while(vo.hasNext()) {
                    Row row = vo.next();
                    Row tcReferencesRow = tcReferencesVo.createRow();
                    tcReferencesRow.setAttribute("Id",cnt++);
                    tcReferencesRow.setAttribute("EntityType",row.getAttribute("EntityType"));
                    tcReferencesRow.setAttribute("NameScreened",row.getAttribute("FullName").toString().trim());
                    tcReferencesRow.setAttribute("StartDate",row.getAttribute("StartDate"));
                    tcReferencesRow.setAttribute("EndDate",row.getAttribute("EndDate"));
                    tcReferencesRow.setAttribute("MasterId",row.getAttribute("MasterId"));
                    tcReferencesRow.setAttribute("PrimaryMasterId",row.getAttribute("PrimaryMasterId"));//T20220406.0030 - Trade Compliance : Slowness while opening TC Detai... (IRI)
                    tcReferencesRow.setAttribute("SourceId",row.getAttribute("SourceId"));
                    tcReferencesRow.setAttribute("SourceTable",row.getAttribute("SourceTable"));
                    tcReferencesRow.setAttribute("SourceTableColumn",row.getAttribute("SourceTableColumn"));
                    tcReferencesRow.setAttribute("EastAsianOriginName",("Y".equals(row.getAttribute("EastAsianOriginName"))? "Yes" : "No"));
                    if(!("Primary".equals(row.getAttribute("RelationshipType")) || "Alias".equals(row.getAttribute("RelationshipType")) || "Standalone".equals(row.getAttribute("RelationshipType")))) {
                        String cols[] = row.getAttribute("RelationshipType").toString().split(" ");
                        String rec = "";
                        for(String s: cols) {
                            if(s.length() > 3)
                                rec += s.substring(0,3) + " "; 
                            else
                                rec += s + " ";
                        }
                        tcReferencesRow.setAttribute("Alias",rec.trim());
                    }else {
                        tcReferencesRow.setAttribute("Alias",row.getAttribute("RelationshipType"));
                    }
                    tcReferencesRow.setAttribute("AliasId",row.getAttribute("AliasId"));
                    tcReferencesRow.setAttribute("XrefId",row.getAttribute("XrefId"));
                    tcReferencesRow.setAttribute("XwrlRequestId",row.getAttribute("RequestId"));
                    tcReferencesRow.setAttribute("TcExcluded",(row.getAttribute("TcExcluded") == null)? "Y" : ("y".equalsIgnoreCase(row.getAttribute("TcExcluded").toString()))? "N" : "Y" );
                    tcReferencesRow.setAttribute("SelectRow",(row.getAttribute("TcExcluded") == null)? true : ("y".equalsIgnoreCase(row.getAttribute("TcExcluded").toString()))? false : true ); ////T20220323.0025 - Issue with vettings being automatically check mark... (IRI)
                    tcReferencesRow.setAttribute("ResidenceCountry",row.getAttribute("ResidenceCountry"));
                    tcReferencesRow.setAttribute("ResidenceCountryCode",row.getAttribute("ResidenceCountryCode"));
                    tcReferencesRow.setAttribute("ResidenceCountryIsoAlpha2Code",row.getAttribute("ResidenceIsoAlpha2Code"));
                    tcReferencesRow.setAttribute("ResidenceCity",row.getAttribute("CountryOfResidenceCity"));
                    tcReferencesRow.setAttribute("ResidenceCityId",row.getAttribute("ResidenceCityId"));
                    tcReferencesRow.setAttribute("Office",row.getAttribute("Office"));
                    tcReferencesRow.setAttribute("BatchId",row.getAttribute("BatchId"));
                    tcReferencesRow.setAttribute("RequestId",row.getAttribute("RequestId"));
                    tcReferencesRow.setAttribute("ReqPhase",row.getAttribute("ConcPhaseCode"));
                    tcReferencesRow.setAttribute("ReqStatus",row.getAttribute("ConcStatusCode"));
                    tcReferencesRow.setAttribute("AffidavitFlag",row.getAttribute("AffidavitSingleName"));
                    tcReferencesRow.setAttribute("KnownPartyFlag",row.getAttribute("KnownParty"));
                    tcReferencesRow.setAttribute("ConcRequestId",row.getAttribute("ConcRequestId"));
                    tcReferencesRow.setAttribute("Status",row.getAttribute("CaseWorkflow"));
                    tcReferencesRow.setAttribute("CaseStatus",row.getAttribute("CaseStatus"));
                    tcReferencesRow.setAttribute("ExpDate",row.getAttribute("ExpirationDate"));
                    tcReferencesRow.setAttribute("StatusUpdatedBy", row.getAttribute("UpdateUser"));
                    tcReferencesRow.setAttribute("RequestStatus",row.getAttribute("ConcRequestStatus"));
                    tcReferencesRow.setAttribute("Identifier",row.getAttribute("Identifier"));
                    tcReferencesRow.setAttribute("DocumentType",row.getAttribute("DocumentType"));
                    //T20220123.0015 - Need assistance with vessel vetting for Star Ranger
                    tcReferencesRow.setAttribute("Cursor",row.getAttribute("Cursor"));
                    tcReferencesRow.setAttribute("Consent",(row.getAttribute("ConsentId") != null)? "Yes" : "No");
                    tcReferencesRow.setAttribute("IndentBy",((Integer)row.getAttribute("IndentBy")) * 5);
                    if(row.getAttribute("LastUpdateDate") != null){
                        Timestamp lastUpdateDate = (Timestamp) row.getAttribute("LastUpdateDate");
                        SimpleDateFormat format = new SimpleDateFormat("dd-MMM-yyyy");
                        
                        tcReferencesRow.setAttribute("StatusDate",format.format(lastUpdateDate.getTime()));
                    }

                    //T20230330.0026 - LONO - TC Department (IRI)
                    tcReferencesRow.setAttribute("ProvisionalRequest",("Y".equals(row.getAttribute("ProvisionalRequest"))? "Yes" : "No"));
                    
                    if(tcReferencesRow.getAttribute("ReqPhase") != null && tcReferencesRow.getAttribute("ConcRequestId") != null) {
                        if("P".equals(tcReferencesRow.getAttribute("ReqPhase").toString()))
                            tcReferencesRow.setAttribute("ColorCode","background:#95f995 !important;color:black;");
                        else if(!"CDX".contains(tcReferencesRow.getAttribute("ReqPhase").toString()))
                            tcReferencesRow.setAttribute("ColorCode","background:#95f995 !important;color:black;");
                        else if("E".equals(tcReferencesRow.getAttribute("ReqStatus").toString()))
                            tcReferencesRow.setAttribute("ColorCode","background:#f7a1a1 !important;color:black;");
                        else
                            tcReferencesRow.setAttribute("ColorCode","");
                    }else{
                        tcReferencesRow.setAttribute("ColorCode","");
                    }
                    
                    if(tcReferencesVo.getRowCount() == 0) {
                            tcReferencesVo.first();
                            tcReferencesVo.insertRow(tcReferencesRow);
                            tcReferencesVo.last();
                            tcReferencesVo.setCurrentRow(tcReferencesRow);
                        } else {
                            Row lRow = tcReferencesVo.last();
                            //Get index of the last row
                            int lrIndex = tcReferencesVo.getRangeIndexOf(lRow);
                            tcReferencesVo.insertRowAtRangeIndex(lrIndex +1,tcReferencesRow);
                            tcReferencesVo.setCurrentRow(tcReferencesRow);
                        }
                }
                
                tcReferencesVo.setCurrentRow(tcReferencesVo.first());
            }
            

        }catch(Exception e) {
            e.printStackTrace();
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching TC references from view.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","initializeViewContextAGetData", LogUtils.returnStackTrace(e));

        }
        finally {
                        try {
                            if (st != null) {
                                st.close();
                            }
                        } catch (SQLException sqle) {
                            sqle.printStackTrace();
                            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching TC references." +
                                                                   "Please contact your System Administrator.", "",
                                                                   FacesMessage.SEVERITY_ERROR);
                            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching TC references.", 
                                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","initializeViewContextAGetData", LogUtils.returnStackTrace(sqle));
                        }
                    }
    }

    /**
     *  Method filters and returns Country name by passing ISO Code as parameter.
     *  @param isoCode pass ISO Code of the country.
     *  @return Srting returns filtered Country name.
     **/
    public String getCountryNameByIsoCode(String isoCode)
    {
        try 
        {
            if (isoCode != null) {
                ViewObjectImpl cntryVo = this.getLovCountriesView1();
                cntryVo.setNamedWhereClauseParam("pIsoCode", isoCode);
                cntryVo.executeQuery();
                
                Row[] frRows = cntryVo.getAllRowsInRange();

                if (frRows.length > 0 && frRows[0].getAttribute("CountryName") != null) {
                    return (String) frRows[0].getAttribute("CountryName");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
             AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching Country Name." +
                                                    "Please contact your System Administrator.", "",
                                                    FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching Country Name.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getCountryNameByIsoCode", LogUtils.returnStackTrace(e));
        }
        
        return null;
    }

    /**
     *  Method filters and returns Country code by passing ISO Code as parameter.
     *  @param isoCode pass ISO Code of the country.
     *  @return Srting returns filtered Country code.
     **/
    public String getCountryCodeByIsoCode(String isoCode)
    {
        try 
        {
            if (isoCode != null) {
                ViewObjectImpl cntryVo = this.getLovCountriesView1();
                cntryVo.setNamedWhereClauseParam("pIsoCode", isoCode);
                cntryVo.executeQuery();
                
                Row[] frRows = cntryVo.getAllRowsInRange();

                if (frRows.length > 0 && frRows[0].getAttribute("CountryCode") != null) {
                    return (String) frRows[0].getAttribute("CountryCode");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
             AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching Country Code." +
                                                    "Please contact your System Administrator.", "",
                                                    FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching Country Code.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getCountryCodeByIsoCode", LogUtils.returnStackTrace(e));
        }
        
        return null;
    }
    
    /**
     *  Method filters and returns City name by passing City Id as parameter.
     *  @param cityId pass city Id of the city.
     *  @return Srting returns filtered City name.
     **/
    public String getCityNameById(Integer cityId)
    {
        try 
        {
            if (cityId != null) {
                ViewObjectImpl cityVo = this.getCityNameByIdView();
                cityVo.setNamedWhereClauseParam("pCityId", cityId);
                cityVo.executeQuery();

                Row[] cityRows = cityVo.getAllRowsInRange();

                if (cityRows.length > 0 && cityRows[0].getAttribute("CityName") != null)
                    return (String) cityRows[0].getAttribute("CityName");
            }
        } catch (Exception e) {
            e.printStackTrace();
             AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching City Name." +
                                                    "Please contact your System Administrator.", "",
                                                    FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching City Name.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getCityNameById", LogUtils.returnStackTrace(e));
        }
        return null;
    }
    
    /**
     *  Method filters and returns Case Status of passed Xwrl Request ID.
     *  @param xwrlRequestId pass xwrlRequestId of the selected vetting.
     *  @return Srting returns filtered Case Status.
     **/
    public String getCaseStatus(Integer xwrlRequestId)
    {
        if(xwrlRequestId != null)
        {
            ViewObjectImpl xwrlReqVo = this.getXwrlRequestDetailsView1();
            xwrlReqVo.setNamedWhereClauseParam("pXwrlRequestId", xwrlRequestId);
            xwrlReqVo.executeQuery();
            
            Row[] xwrlReqRows = xwrlReqVo.getAllRowsInRange();
            
            if(xwrlReqRows.length > 0 && xwrlReqRows[0].getAttribute("CaseStatus") != null)
                return xwrlReqRows[0].getAttribute("CaseStatus").toString();
        }
        
        return null;
    }

    /**
     *   Method creates new alias.
     *   @return String returns success Y/N.
     **/
    public String createAliasVetting()
    {
        Object stat = "E";
        try 
        {
            ViewObjectImpl dualCvVo = this.getDualCreateVettingView1();
            Row dualCvRow = dualCvVo.getCurrentRow();
            Row tcRefRow = this.getTcReferencesView1().getCurrentRow();
            
            if(dualCvRow.getAttribute("TransNameScreenedUpdatable") == null || "".equals(dualCvRow.getAttribute("TransNameScreenedUpdatable")))
                stat = "Pleae enter Name Screened";
            else if(dualCvRow.getAttribute("TransEntityType") == null || "".equals(dualCvRow.getAttribute("TransEntityType")))
                stat = "Please enter Entity Type";
            else if("INDIVIDUAL".equals(dualCvRow.getAttribute("TransEntityType")) && "C".equals(dualCvRow.getAttribute("TransOperationType"))){ 
                if(dualCvRow.getAttribute("TransIdType") != null && (dualCvRow.getAttribute("TransIdNumber") == null ||"".equals(dualCvRow.getAttribute("TransIdNumber"))))
                    stat = "Please enter Number";
            }
            LOGGER.finest("TransOperationType:"+dualCvRow.getAttribute("TransOperationType"));
            LOGGER.finest("NameScreened:"+dualCvRow.getAttribute("TransNameScreenedUpdatable").toString().toUpperCase());
            LOGGER.finest("DateofBirth:"+dualCvRow.getAttribute("TransDateOfBirth"));
            LOGGER.finest("Gender:"+dualCvRow.getAttribute("TransGender"));
            LOGGER.finest("IdType:"+dualCvRow.getAttribute("TransIdType"));
            LOGGER.finest("IdNumber:"+dualCvRow.getAttribute("TransIdNumber"));
            LOGGER.finest("EntityType:"+dualCvRow.getAttribute("TransEntityType"));
            LOGGER.finest("TransPassIssuCntryCode:"+dualCvRow.getAttribute("TransPassIssuCntryCode"));
            LOGGER.finest("TransResdnceCntryCode:"+dualCvRow.getAttribute("TransResdnceCntryCode"));
            LOGGER.finest("TransCtznshpCntryCode:"+dualCvRow.getAttribute("TransCtznshpCntryCode"));
            LOGGER.finest("TransIMONumber:"+dualCvRow.getAttribute("TransIMONumber"));
            LOGGER.finest("cityId:"+dualCvRow.getAttribute("TransCityId"));
//            LOGGER.finest("AliasId:"+tcRefRow.getAttribute("AliasId"));
//            LOGGER.finest("XrefId:"+tcRefRow.getAttribute("XrefId"));
//            LOGGER.finest("MasterId:"+tcRefRow.getAttribute("MasterId"));
//            LOGGER.finest("userId:"+getUserId());
//            LOGGER.finest("sourceTable:"+RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_TABLE"));
//            LOGGER.finest("sourceTableColumn:"+RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_TABLE_COLUMN"));
//            LOGGER.finest("sourceId:"+RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_ID"));
            if(dualCvRow != null && tcRefRow != null && "E".equals(stat))
            {        
                LOGGER.finest("alias type: "+dualCvRow.getAttribute("TransOperationType"));
                LOGGER.finest("alias namescreened:"+dualCvRow.getAttribute("TransNameScreenedUpdatable"));
                LOGGER.finest("alias id:"+dualCvRow.getAttribute("TransId"));
                if("C".equals(dualCvRow.getAttribute("TransOperationType"))) {
                stat = AdfUtils.callDbFunction(this, Types.VARCHAR, "RMI_GENERIC_TC.create_alias_save(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                 dualCvRow.getAttribute("TransNameScreenedUpdatable").toString().toUpperCase(), 
                 dualCvRow.getAttribute("TransDateOfBirth"), 
                 dualCvRow.getAttribute("TransGender"), 
                 dualCvRow.getAttribute("TransIdType"), 
                 (dualCvRow.getAttribute("TransIdNumber") == null || "".equals(dualCvRow.getAttribute("TransIdNumber")))? "" : dualCvRow.getAttribute("TransIdNumber").toString().toUpperCase(), 
                 dualCvRow.getAttribute("TransEntityType"), 
                 ("U".equals(dualCvRow.getAttribute("TransOperationType")))? "Alias": "",
                 dualCvRow.getAttribute("TransPassIssuCntryCode"),
                 dualCvRow.getAttribute("TransResdnceCntryCode"),
                 dualCvRow.getAttribute("TransCtznshpCntryCode"),
                 dualCvRow.getAttribute("TransResdnceCntryCode"),
                 dualCvRow.getAttribute("TransIMONumber"),
                 dualCvRow.getAttribute("TransCityId"),
                (dualCvRow.getAttribute("TransSourceId") != null)?dualCvRow.getAttribute("TransSourceTable"):RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_TABLE"),
                (dualCvRow.getAttribute("TransSourceId") != null)? dualCvRow.getAttribute("TransSourceTableColumn"): RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_TABLE_COLUMN"),
                 (dualCvRow.getAttribute("TransSourceId") != null)? dualCvRow.getAttribute("TransSourceId") : RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_ID"),
                 tcRefRow.getAttribute("AliasId"),
                 tcRefRow.getAttribute("XrefId"),
                 tcRefRow.getAttribute("MasterId"),
                 getUserId(),
                 dualCvRow.getAttribute("TransLegacyVettingFlag")
                },"System encountered an exception while creating new Alias vetting.");
                
                if(stat == null)
                {
                    stat = "N";
                }
            }
                //T20220222.0024 - Duplicate Name Created When Updating Record Information
                else if("U".equals(dualCvRow.getAttribute("TransOperationType"))) {
                    
                    String sql = "BEGIN {? = call RMI_GENERIC_TC.UPDATE_VETTING_SAVE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}; END;";
                    CallableStatement st = getDBTransaction().createCallableStatement(sql, 0);
                    st.registerOutParameter(1, Types.VARCHAR);
                    st.setObject(2, dualCvRow.getAttribute("TransNameScreenedUpdatable").toString().toUpperCase()); 
                    st.setObject(3, dualCvRow.getAttribute("TransDateOfBirth"));
                    st.setObject(4, dualCvRow.getAttribute("TransGender"));
                    st.setObject(5, dualCvRow.getAttribute("TransIdType"));
                    st.setObject(6, (dualCvRow.getAttribute("TransIdNumber") == null || "".equals(dualCvRow.getAttribute("TransIdNumber")))? dualCvRow.getAttribute("TransIdNumber") : dualCvRow.getAttribute("TransIdNumber").toString().toUpperCase());
                    st.setObject(7, dualCvRow.getAttribute("TransEntityType"));
                    st.setObject(8, "Alias");
                    st.setObject(9, dualCvRow.getAttribute("TransPassIssuCntryCode"));
                    st.setObject(10, dualCvRow.getAttribute("TransResdnceCntryCode"));
                    st.setObject(11, dualCvRow.getAttribute("TransCtznshpCntryCode"));
                    st.setObject(12, dualCvRow.getAttribute("TransResdnceCntryCode"));
                    st.setObject(13, dualCvRow.getAttribute("TransIMONumber"));
                    st.setObject(14, dualCvRow.getAttribute("TransCityId"));
                    st.setObject(15, getUserId());
                    st.setObject(16, dualCvRow.getAttribute("TransLegacyVettingFlag"));
                    st.setObject(17, dualCvRow.getAttribute("TransEastAsianOriginName"));
                    st.setObject(18, null);
                    st.setObject(19,dualCvRow.getAttribute("TransId"));
                    st.execute();
                    
                    stat = st.getString(1);
                    if(stat == null)
                    {
                        stat = "E";
                    }
                    LOGGER.finest("alias stat:"+stat);
                }
            }
        } 
        catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while creating new Alias vetting." +
                                                               "Please contact your System Administrator.", "",
                                                               FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while creating new Alias vetting.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","createAliasVetting", LogUtils.returnStackTrace(e));
        }
        
        return stat.toString();
    }

    /**
     *   Method fetches all consent details.
     *   @return String returns consent file edocId if offline.
     **/
    public String filterConsentDetailsVetting(Number masterId)
    {
        String ret  = "null";
        try 
        {
            if(masterId != null)
            {
                ViewObject dualVo= getDualCreateVettingView1();
                Row dualRow;
                if(dualVo.getCurrentRow() != null)
                    dualRow = dualVo.getCurrentRow();
                else
                    dualRow = dualVo.createRow();

                if (dualRow != null) {
                    Row currentRow = getTcReferencesView1().getCurrentRow();
                    ViewObject consentVo = this.getConsentDetailsView();
                    
                    
                    //T20230427.0021 - TC - FA - online DPCF codes (IRI)
                    System.out.println("SourceId :" + currentRow.getAttribute("SourceId"));
                    System.out.println("SourceTable :" + currentRow.getAttribute("SourceTable"));
                    System.out.println("MasterId : " + currentRow.getAttribute("MasterId"));
                    System.out.println("AliasId :" + currentRow.getAttribute("AliasId"));
                    System.out.println("XrefId :" + currentRow.getAttribute("XrefId"));
                    
                    System.out.println("P_SOURCE_TABLE :" + RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_TABLE"));
                    System.out.println("P_SOURCE_TYPE :" + RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_TYPE"));
                    
                    consentVo.setNamedWhereClauseParam("pSourceId", currentRow.getAttribute("SourceId"));
                    consentVo.setNamedWhereClauseParam("pSourceTable", currentRow.getAttribute("SourceTable"));
                    consentVo.setNamedWhereClauseParam("pMasterId", currentRow.getAttribute("MasterId"));
                    consentVo.setNamedWhereClauseParam("pAliasId", currentRow.getAttribute("AliasId"));
                    consentVo.setNamedWhereClauseParam("pXrefId", currentRow.getAttribute("XrefId"));
                    consentVo.executeQuery();
                    
                    Object entityType = null;
                    if (consentVo.getRowCount() > 0) {
                        Row row = consentVo.first();
                        
                        System.out.println("ConfirmationNumber :" + row.getAttribute("ConfirmationNumber"));
                        
                        String source = row.getAttribute("ConsentSource").toString();
                        if (source.equalsIgnoreCase("Online")) {
                            dualRow.setAttribute("TransOnlineConfirmationNumber", row.getAttribute("ConfirmationNumber"));
                            dualRow.setAttribute("TransOnlineConfirmationNumberVerify", row.getAttribute("ConfirmationNumber"));
                            dualRow.setAttribute("TransOnlineConsentStartDate", row.getAttribute("ConsentDate"));
                            dualRow.setAttribute("TransOnlineConsentEndDate", row.getAttribute("ConsentExpireDate"));
                            dualRow.setAttribute("TransMarketingCommFlag", row.getAttribute("MarketingCommunication"));
                            entityType = row.getAttribute("EntityType");
                            ret = "Online";
                            dualVo.insertRow(dualRow);
                        } else {
                            Integer edoc_id = null;
                            if (row.getAttribute("EdocId") != null) {
                                edoc_id = Integer.parseInt(row.getAttribute("EdocId").toString());
                            }
                            String edoc = (edoc_id != null) ? edoc_id.toString() : "0"; 
                            dualRow.setAttribute("TransUploadedConsentEdocId", edoc_id);
                            dualRow.setAttribute("TransUploadedConsentStartDate", row.getAttribute("ConsentDate"));
                            dualRow.setAttribute("TransUploadedConsentEndDate", row.getAttribute("ConsentExpireDate"));
                            dualRow.setAttribute("TransMarketingCommFlag", row.getAttribute("MarketingCommunication"));
                            dualRow.setAttribute("TransConsentEntityType", row.getAttribute("EntityType"));
                            ret = edoc;
                            dualVo.insertRow(dualRow);
                        }
                    } // end consentVO
                    
                    ViewObject onlineVO = getGetOnlineConsentByMasterIdView1();
                    onlineVO.setNamedWhereClauseParam("p_master_id", currentRow.getAttribute("MasterId"));
                    onlineVO.setNamedWhereClauseParam("p_alias_id", currentRow.getAttribute("AliasId"));
                    onlineVO.setNamedWhereClauseParam("p_xref_id", currentRow.getAttribute("XrefId"));
                    onlineVO.executeQuery();
                    if(onlineVO.hasNext()) {
                        dualVo= getDualCreateVettingView1();
                        Row row = onlineVO.next();
                        
                        System.out.println("ConfirmationNumber :" + row.getAttribute("ConfirmationNumber"));
                        
                        if(dualVo.getCurrentRow() != null)
                            dualRow = dualVo.getCurrentRow();
                        else
                            dualRow = dualVo.createRow();
                        
                        dualRow.setAttribute("TransOnlineConfirmationNumber", row.getAttribute("ConfirmationNumber"));
                        dualRow.setAttribute("TransOnlineConfirmationNumberVerify", row.getAttribute("ConfirmationNumber"));
                        dualRow.setAttribute("TransOnlineConsentStartDate", row.getAttribute("ConsentDate"));
                        dualRow.setAttribute("TransOnlineConsentEndDate", row.getAttribute("ConsentExpireDate"));
                        if(entityType == null)
                            entityType = row.getAttribute("EntityType");
                        if(row.getAttribute("EdocId") != null)
                            dualRow.setAttribute("TransOnlineUploadedConsentEdocId", row.getAttribute("EdocId"));
                        dualRow.setAttribute("TransOnlineConsentId", row.getAttribute("ConsentId"));
                        //ret = "Online";
                        dualVo.insertRow(dualRow);
                    } // end onlineVO
                    
                    //T20211118.0028 - TC 2.0 - Online Consent
                    if(dualRow.getAttribute("TransConsentEntityType") == null && entityType != null)
                        dualRow.setAttribute("TransConsentEntityType", entityType);
                    LOGGER.finest("Fetching Entity Type:"+entityType);
                } else {
                    dualRow.setAttribute("TransOnlineConfirmationNumber", null);
                    dualRow.setAttribute("TransOnlineConfirmationNumberVerify", null);
                    dualRow.setAttribute("TransOnlineConsentStartDate", null);
                    dualRow.setAttribute("TransOnlineConsentEndDate", null);
                    dualRow.setAttribute("TransUploadedConsentStartDate", null);
                    dualRow.setAttribute("TransUploadedConsentEndDate", null);
                    dualRow.setAttribute("TransUploadedConsentEdocId", null);
                    dualVo.insertRow(dualRow);
                } // end dualRow

                if (ret != null)
                    return ret;
                else
                    return "null";
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching consent details." +
                                                   "Please contact your System Administrator.", "",
                                                   FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching consent details.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","filterConsentDetailsVetting", LogUtils.returnStackTrace(e));
        }
        return ret;
    }

    /**
     *   Method creates new consent when consent is uploaded/updated.
     *   @param masterId pass master ID fetched from references table.
     **/
    public void createConsentVetting(Integer masterId, Integer aliasId, Integer xrefId, String consentEdocId)
    {        
        try 
        {
            Integer esiBatchId = null;
            if(RequestContext.getCurrentInstance().getPageFlowScope().get("P_ESI_BATCH_ID") != null)
                esiBatchId = Integer.parseInt(RequestContext.getCurrentInstance().getPageFlowScope().get("P_ESI_BATCH_ID").toString());
            
            Integer sourceId = Integer.parseInt(RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_ID").toString());
            Integer entityId = 0;
            String firstName = "";
            String lastName = "";
            String dateofBirth = "";
            String nationality = "";
            String fnRetVal = "";
            
            CallableStatement st = null;
            PreparedStatement ps = null;
            
            if(sourceId != null)
            {
                try {
                    st = this.getDBTransaction().createCallableStatement("begin RMI_GENERIC_TC.get_consent_details(?,?,?,?,?,?,?,?); end;", 0);
                    st.setInt(1, masterId);
                    st.setString(2, RequestContext.getCurrentInstance().getPageFlowScope().get("P_SOURCE_TABLE").toString());
                    st.setInt(3, sourceId);
                    st.registerOutParameter(4, Types.NUMERIC, entityId);
                    st.registerOutParameter(5, Types.VARCHAR, firstName);
                    st.registerOutParameter(6, Types.VARCHAR, lastName);
                    st.registerOutParameter(7, Types.VARCHAR, dateofBirth);
                    st.registerOutParameter(8, Types.VARCHAR, nationality);
                    st.execute();
                    
                    entityId = st.getInt(4);
                    firstName = st.getString(5);
                    lastName = st.getString(6);
                    dateofBirth = st.getString(7);
                    nationality = st.getString(8);
                    LOGGER.finest("entityId:"+entityId);
                    LOGGER.finest("firstName:"+firstName);
                    LOGGER.finest("lastName:"+lastName);
                    LOGGER.finest("dateofBirth:"+dateofBirth);
                    LOGGER.finest("nationality:"+nationality);
                    LOGGER.finest("masterId:"+masterId);
                    LOGGER.finest("consentEdocid:"+consentEdocId);
                }
                catch (Exception e) {
                    e.printStackTrace();
                        AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching Consent details." +
                                                               "Please contact your System Administrator.", "",
                                                               FacesMessage.SEVERITY_ERROR);
                    logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching Consent details.", 
                                                                   "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","createConsentVetting", LogUtils.returnStackTrace(e));
                } finally {
                    try {
                        if (st != null) {
                            st.close();
                        }
                        if (ps != null) {
                            ps.close();
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching Consent details." +
                                                               "Please contact your System Administrator.", "",
                                                               FacesMessage.SEVERITY_ERROR);
                        logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching Consent details.", 
                                                                       "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","createConsentVetting", LogUtils.returnStackTrace(e));
                    }
                }
            }
            
            Row dualRow;
            if(getDualCreateVettingView1().getCurrentRow() != null)
                dualRow = this.getDualCreateVettingView1().getCurrentRow();
            else
                dualRow = this.getDualCreateVettingView1().first();
            
            LOGGER.finest("TransMarketingCommFlag:+"+dualRow.getAttribute("TransMarketingCommFlag"));
            LOGGER.finest("impl TransOnlineConsentStartDate:"+dualRow.getAttribute("TransOnlineConsentStartDate"));
            
            if(dualRow != null && sourceId != null && esiBatchId != null)
            {     
                ViewObjectImpl sfrrVo = this.getRmiSeafarerIfaceView1();
                sfrrVo.setNamedWhereClauseParam("pSeafarerId", (sourceId != null) ? sourceId : -1);
                sfrrVo.setNamedWhereClauseParam("pEsiBatchId", esiBatchId);
                sfrrVo.executeQuery();
                
                Row[] sfrrRow = sfrrVo.getAllRowsInRange();
                
                if(sfrrRow.length > 0)
                {
                    Row r = sfrrRow[0];        
                       
                    fnRetVal = (String) AdfUtils.callDbFunction(this, Types.VARCHAR, "RMI_GENERIC_TC.rmi_add_consent(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                              sourceId,
                                                              firstName,
                                                              lastName,
                                                              nationality,
                                                              dateofBirth,
                                                              r.getAttribute("ConsentEdocId"),
                                                              esiBatchId,
                                                              dualRow.getAttribute("TransUploadedConsentStartDate"),
                                                              dualRow.getAttribute("TransUploadedConsentEndDate"),
                                                              getUserId(),
                                                              r.getAttribute("EsiId"),
                                                              masterId,
                                                              dualRow.getAttribute("TransMarketingCommFlag"),
                                                              dualRow.getAttribute("TransConsentEntityType"),
                                                              aliasId,
                                                              xrefId
                    },"System encountered an exception while creating consent.");
                }
            } else {
                fnRetVal = (String) AdfUtils.callDbFunction(this, Types.VARCHAR, "RMI_GENERIC_TC.rmi_add_consent(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                              sourceId,
                                                                              firstName,
                                                                              lastName,
                                                                              nationality,
                                                                              dateofBirth,
                                                                              consentEdocId,
                                                                              null,
                                                                              dualRow.getAttribute("TransUploadedConsentStartDate"),
                                                                              dualRow.getAttribute("TransUploadedConsentEndDate"),
                                                                              getUserId(),
                                                                              null,
                                                                              masterId,
                                                                              dualRow.getAttribute("TransMarketingCommFlag"),
                                                                              dualRow.getAttribute("TransConsentEntityType"),
                                                                                aliasId,
                                                                                xrefId
                                    },"System encountered an exception while creating consent.");
            }
            
            LOGGER.finest("res val:"+fnRetVal);
            if(dualRow.getAttribute("TransOnlineConfirmationNumberVerify") == null) {
                Object val = updateOnlineConsent(nullStrToSpc(dualRow.getAttribute("TransSourceId")),nullStrToSpc(dualRow.getAttribute("TransOnlineConfirmationNumber")), nullStrToSpc(masterId),nullStrToSpc(aliasId),nullStrToSpc(xrefId));
                LOGGER.finest("online val:"+val);
                dualRow.setAttribute("TransOnlineConfirmationNumberVerify",dualRow.getAttribute("TransOnlineConfirmationNumber"));
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while creating consent." +
                                                   "Please contact your System Administrator.", "",
                                                   FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while creating consent.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","createConsentVetting", LogUtils.returnStackTrace(e));
        }
    }
    
    /**
     *  Method updates TC Excluded in vetting master table for multiple selected vettings.
     *  @param tcExcluded pass selected checkbox value for selected vettings.
     */
    // T20220322.0004 - TC 2.0 - Select All Issue (IRI) - Below method is not in use
    public void selectMultipleVettings(String tcExcluded)
    {
        try 
        {
            if (tcExcluded != null) {
                String retVal = "N";
                ViewObjectImpl tcReferenceVo = this.getTcReferencesView1();
                RowSetIterator tcReferenceRsi = tcReferenceVo.createRowSetIterator(null);

                while (tcReferenceRsi.hasNext()) {
                    Row r = tcReferenceRsi.next();

                    if (r != null && r.getAttribute("MasterId") != null) {
                        
                        r.setAttribute("TcExcluded",tcExcluded);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating vetting master." +
                                                   "Please contact your System Administrator.", "",
                                                   FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while updating vetting master.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","selectMultipleVettings", LogUtils.returnStackTrace(e));
        }
    }
    
    /**
     *  Method returns attribute value for passed attributes.
     *  @param attrName pass attribute column name which value is required.
     *  @return Integer returns value of the passed attribute.
     */
    public Integer getAttributeValue(String attrName)
    {
        try 
        {
            if (attrName != null) {
                Row row = this.getTcReferencesView1().getCurrentRow();

                if (row != null && row.getAttribute(attrName) != null) {
                    return (Integer) row.getAttribute(attrName);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while attribute value." +
                                                   "Please contact your System Administrator.", "",
                                                   FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while attribute value.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","getAttributeValue", LogUtils.returnStackTrace(e));
        }
        return null;
    }
    
    /**
     *  Method resets the filtered data of dual Vetting view.
     **/
    public void resetDualVettingRow()
    {
        try 
        {
            ViewObjectImpl dualCvVo = this.getDualCreateVettingView1();
            Row dualCvRow = null;

            if (dualCvVo.getCurrentRow() != null)
                dualCvRow = dualCvVo.getCurrentRow();
            else
                dualCvRow = dualCvVo.first();

            if (dualCvRow != null) 
            {
                dualCvRow.setAttribute("TransNameScreened", null);
                dualCvRow.setAttribute("TransEntityType", null);
                dualCvRow.setAttribute("TransGender", null);
                dualCvRow.setAttribute("TransDateOfBirth", null);
                dualCvRow.setAttribute("TransIdType", null);
                dualCvRow.setAttribute("TransIdNumber", null);
                dualCvRow.setAttribute("TransPassIssuCntryCode", null);
                dualCvRow.setAttribute("TransCtznshpCntryCode", null);
                dualCvRow.setAttribute("TransResdnceCntryCode", null);
                dualCvRow.setAttribute("TransCityId", null);
            }
        } catch (Exception e) {
            e.printStackTrace();
             AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while resetting Vetting details." +
                                                    "Please contact your System Administrator.", "",
                                                    FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while resetting Vetting details.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","resetDualVettingRow", LogUtils.returnStackTrace(e));
        }
    }

    /**
     *  Method updates Country/City for selected vetting/alias.
     *  @param masterId pass master Id from Xwrl_requests.
     *  @param aliasId pass alias Id from Xwrl_requests.
     *  @param xrefId pass xref Id from Xwrl_requests.
     *  @return String returns success Y/N.
     **/
    public String updateCountryCity(Integer masterId, Integer aliasId, Integer xrefId)
    {
        Object stat = "E";
        try 
        {
            ViewObjectImpl tcRefVo = this.getTcReferencesView1();
            
            RowSetIterator tcRefRsi = tcRefVo.createRowSetIterator(null);
            
            while(tcRefRsi.hasNext())
            {
                Row r = tcRefRsi.next();
                
                if(r != null && r.getAttribute("MasterId") != null)
                {
//                    LOGGER.finest("ResidenceCountryIsoAlpha2Code :: "+r.getAttribute("ResidenceCountryIsoAlpha2Code"));
//                    LOGGER.finest("XrefId :: "+r.getAttribute("XrefId"));
//                    LOGGER.finest("AliasId :: "+r.getAttribute("AliasId"));
//                    LOGGER.finest("MasterId :: "+r.getAttribute("MasterId"));
//                    LOGGER.finest("ResidenceCityId :: "+r.getAttribute("ResidenceCityId"));
//                    LOGGER.finest("ResidenceCountryCode :: "+r.getAttribute("ResidenceCountryCode"));
                    
                    stat = AdfUtils.callDbFunction(this, Types.VARCHAR, "RMI_GENERIC_TC.update_city(?,?,?,?,?,?)", new Object[] {
                                                     r.getAttribute("ResidenceCountryIsoAlpha2Code"),
                                                     r.getAttribute("XrefId"),
                                                     r.getAttribute("AliasId"),
                                                     r.getAttribute("MasterId"),
                                                     r.getAttribute("ResidenceCityId"),
                                                     r.getAttribute("ResidenceCountryCode")
                    },"System encountered an exception while updating Country/City.");
                    
                    if(stat == null || (stat != null && stat.toString().equalsIgnoreCase("N")))
                    {
                        return "N";
                    }
                }
            }
        } 
        catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating Country/City." +
                                                               "Please contact your System Administrator.", "",
                                                               FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while updating Country/City.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","updateCountryCity", LogUtils.returnStackTrace(e));
        }
        
        return stat.toString();
    }
    
    public String updateEndDate(Date endDate, Integer masterId, Integer aliasId, Integer xrefId, String cursor)
    {
        Object stat = "E";
        try 
        {
            Timestamp ts=null;
            if(endDate != null)
                ts = new Timestamp(endDate.getTime());  
            stat = AdfUtils.callDbFunction(this, Types.VARCHAR, "RMI_GENERIC_TC.update_end_date(?,?,?,?,?,?)", new Object[] {
                                             getUserId(),
                                             ts,
                                             masterId,
                                             aliasId,
                                             xrefId,
                                             cursor
            },"System encountered an exception while updating End Date.");
        } 
        catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating End Date." +
                                                               "Please contact your System Administrator.", "",
                                                               FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while updating End Date.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","updateStartEndDates", LogUtils.returnStackTrace(e));
        }
        return (String)stat;
    }
    
    //T20211118.0028 - TC 2.0 - Online Consent
    public String updateOnlineConsent(String sourceId,String consentId, String masterId, String aliasId, String xrefId)
    {
        
        //T20230427.0021 - TC - FA - online DPCF codes (IRI)
        
        Object stat = "E";
        try 
        {
            stat = AdfUtils.callDbFunction(this, Types.VARCHAR, "RMI_GENERIC_TC.update_online_consent(?,?,?,?,?)", new Object[] {
                                            sourceId,
                                             consentId,
                                             masterId,
                                             aliasId,
                                             xrefId
            },"System encountered an exception while updating End Date.");
        } 
        catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating End Date." +
                                                               "Please contact your System Administrator.", "",
                                                               FacesMessage.SEVERITY_ERROR);
            logGenericTC(LogUtils.ERROR, "System encountered an exception while updating End Date.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","updateStartEndDates", LogUtils.returnStackTrace(e));
        }
        
        return stat+"";
    }
    
    /**
     * Container's getter for WcMatchesView1.
     * @return WcMatchesView1
     */
    public ViewObjectImpl getWcMatchesView1() {
        return (ViewObjectImpl) findViewObject("WcMatchesView1");
    }

    /**
     * Container's getter for StatusEOView1.
     * @return StatusEOView1
     */
    public ViewObjectImpl getStatusView1() {
        return (ViewObjectImpl) findViewObject("StatusView1");
    }

    /**
     * Container's getter for SeafarerDocEdocIdsVO1.
     * @return SeafarerDocEdocIdsVO1
     */
    public ViewObjectImpl getSeafarerDocEdocIdsView1() {
        return (ViewObjectImpl) findViewObject("SeafarerDocEdocIdsView1");
    }

    /**
     * Container's getter for EdocFullUrlVO1.
     * @return EdocFullUrlVO1
     */
    public ViewObjectImpl getEdocFullUrlView1() {
        return (ViewObjectImpl) findViewObject("EdocFullUrlView1");
    }

    /**
     * Container's getter for WcContentEOView1.
     * @return WcContentEOView1
     */
    public ViewObjectImpl getWcContentView1() {
        return (ViewObjectImpl) findViewObject("WcContentView1");
    }

    /**
     * Container's getter for IsOFACListEntyOnList1.
     * @return IsOFACListEntyOnList1
     */
    public ViewObjectImpl getIsOFACListEntyOnListView1() {
        return (ViewObjectImpl) findViewObject("IsOFACListEntyOnListView1");
    }

    /**
     * Container's getter for YesNoLov1.
     * @return YesNoLov1
     */
    public ViewObjectImpl getLovYesNoView1() {
        return (ViewObjectImpl) findViewObject("LovYesNoView1");
    }

    /**
     * Container's getter for StatusLOV1.
     * @return StatusLOV1
     */
    public ViewObjectImpl getLovStatusView1() {
        return (ViewObjectImpl) findViewObject("LovStatusView1");
    }

    /**
     * Container's getter for FndUsers1.
     * @return FndUsers1
     */
    public ViewObjectImpl getFndUsersView1() {
        return (ViewObjectImpl) findViewObject("FndUsersView1");
    }

    /**
     * Container's getter for ExistingVettingsVO1.
     * @return ExistingVettingsVO1
     */
    public ViewObjectImpl getExistingVettingsView1() {
        return (ViewObjectImpl) findViewObject("ExistingVettingsView1");
    }

    /**
     * Container's getter for ScreeningRequestChangesVO1.
     * @return ScreeningRequestChangesVO1
     */
    public ViewObjectImpl getScreeningRequestChangesView1() {
        return (ViewObjectImpl) findViewObject("ScreeningRequestChangesView1");
    }
    
    /**
     * Container's getter for PrimaryNameVO1.
     * @return PrimaryNameVO1
     */
    public ViewObjectImpl getPrimaryNameView1() {
        return (ViewObjectImpl) findViewObject("PrimaryNameView1");
    }

    /**
     * Container's getter for AliasVO1.
     * @return AliasVO1
     */
    public ViewObjectImpl getAliasView() {
        return (ViewObjectImpl) findViewObject("AliasView");
    }

    /**
     * Container's getter for UnspecifiedMatchesVO1.
     * @return UnspecifiedMatchesVO1
     */
    public ViewObjectImpl getUnspecifiedMatchesView1() {
        return (ViewObjectImpl) findViewObject("UnspecifiedMatchesView1");
    }

    /**
     * Container's getter for LovCountriesVO1.
     * @return LovCountriesVO1
     */
    public ViewObjectImpl getLovCountriesView1() {
        return (ViewObjectImpl) findViewObject("LovCountriesView1");
    }

    /**
     * Container's getter for ConsentReceivedVO1.
     * @return ConsentReceivedVO1
     */
    public ViewObjectImpl getConsentReceivedView() {
        return (ViewObjectImpl) findViewObject("ConsentReceivedView");
    }

    /**
     * Container's getter for DualCreateVettingVO1.
     * @return DualCreateVettingVO1
     */
    public ViewObjectImpl getDualCreateVettingView1() {
        return (ViewObjectImpl) findViewObject("DualCreateVettingView1");
    }

    /**
     * Container's getter for VettingMatchesRO1.
     * @return VettingMatchesRO1
     */
    public VettingMatchesViewImpl getVettingMatchesView1() {
        return (VettingMatchesViewImpl) findViewObject("VettingMatchesView1");
    }

    /**
     * Container's getter for CreateVettingMatchesRO1.
     * @return CreateVettingMatchesRO1
     */
    public CreateVettingMatchesViewImpl getCreateVettingMatchesView1() {
        return (CreateVettingMatchesViewImpl) findViewObject("CreateVettingMatchesView1");
    }

    /**
     * Container's getter for CreateVettingMatchesRO2.
     * @return CreateVettingMatchesRO2
     */
    public CreateVettingMatchesViewImpl getCreateVettingMatchesView2() {
        return (CreateVettingMatchesViewImpl) findViewObject("CreateVettingMatchesView2");
    }

    /**
     * Container's getter for CreateVettingMatchesRO3.
     * @return CreateVettingMatchesRO3
     */
    public CreateVettingMatchesViewImpl getCreateVettingMatchesView3() {
        return (CreateVettingMatchesViewImpl) findViewObject("CreateVettingMatchesView3");
    }

    /**
     * Container's getter for CreateNewVettingMatcheLnk1.
     * @return CreateNewVettingMatcheLnk1
     */
    public ViewLinkImpl getCreateNewVettingMatcheLnk1() {
        return (ViewLinkImpl) findViewLink("CreateNewVettingMatcheLnk1");
    }

    /**
     * Container's getter for DocumentLinkRO1.
     * @return DocumentLinkRO1
     */
    public ViewObjectImpl getDocumentLinkView1() {
        return (ViewObjectImpl) findViewObject("DocumentLinkView1");
    }

    /**
     * Container's getter for ExsicdSeafarerIfaceRO1.
     * @return ExsicdSeafarerIfaceRO1
     */
    public ViewObjectImpl getRmiSeafarerIfaceView1() {
        return (ViewObjectImpl) findViewObject("RmiSeafarerIfaceView1");
    }

    /**
     * Container's getter for MatchesDisplayDataRO1.
     * @return MatchesDisplayDataRO1
     */
    public MatchesDisplayDataViewImpl getMatchesDisplayDataView1() {
        return (MatchesDisplayDataViewImpl) findViewObject("MatchesDisplayDataView1");
    }

    /**
     * Container's getter for CityNameByIdRO1.
     * @return CityNameByIdRO1
     */
    public ViewObjectImpl getCityNameByIdView() {
        return (ViewObjectImpl) findViewObject("CityNameByIdView");
    }

    /**
     * Container's getter for LovCityNameVO1.
     * @return LovCityNameVO1
     */
    public ViewObjectImpl getLovCityNameView1() {
        return (ViewObjectImpl) findViewObject("LovCityNameView1");
    }

    /**
     * Container's getter for ConsentDetailsRO1.
     * @return ConsentDetailsRO1
     */
    public ViewObjectImpl getConsentDetailsView() {
        return (ViewObjectImpl) findViewObject("ConsentDetailsView");
    }

    /**
     * Container's getter for WcRequestDocumentsVO1.
     * @return WcRequestDocumentsVO1
     */
    public ViewObjectImpl getWcRequestDocumentsView1() {
        return (ViewObjectImpl) findViewObject("WcRequestDocumentsView1");
    }

    /**
     * Container's getter for WcScreeningRequestToDocumentsLK1.
     * @return WcScreeningRequestToDocumentsLK1
     */
    public ViewLinkImpl getWcScreeningRequestToDocumentsLK1() {
        return (ViewLinkImpl) findViewLink("WcScreeningRequestToDocumentsLK1");
    }

    /**
     * Container's getter for LovIsOfacEntityOnListView.
     * @return LovIsOfacEntityOnListView
     */
    public ViewObjectImpl getLovIsOfacEntityOnListView() {
        return (ViewObjectImpl) findViewObject("LovIsOfacEntityOnListView");
    }

    /**
     * Container's getter for TcReferencesDetailsOwsView1.
     * @return TcReferencesDetailsOwsView1
     */
    public ViewObjectImpl getTcReferencesDetailsOwsView1() {
        return (ViewObjectImpl) findViewObject("TcReferencesDetailsOwsView1");
    }

    /**
     * Container's getter for ViewHistoryOwsView1.
     * @return ViewHistoryOwsView1
     */
    public ViewObjectImpl getViewHistoryOwsView1() {
        return (ViewObjectImpl) findViewObject("ViewHistoryOwsView1");
    }

    /**
     * Container's getter for CrossReferencesOwsView1.
     * @return CrossReferencesOwsView1
     */
    public ViewObjectImpl getCrossReferencesOwsView1() {
        return (ViewObjectImpl) findViewObject("CrossReferencesOwsView1");
    }

    /**
     * Container's getter for TcReferencesView1.
     * @return TcReferencesView1
     */
    public ViewObjectImpl getTcReferencesView1() {
        return (ViewObjectImpl) findViewObject("TcReferencesView1");
    }


    /**
     * Container's getter for CaseDocumentsView1.
     * @return CaseDocumentsView1
     */
    public ViewObjectImpl getCaseDocumentsView1() {
        return (ViewObjectImpl) findViewObject("CaseDocumentsView1");
    }

    /**
     * Container's getter for CaseNotesView1.
     * @return CaseNotesView1
     */
    public ViewObjectImpl getCaseNotesView1() {
        return (ViewObjectImpl) findViewObject("CaseNotesView1");
    }

    /**
     * Container's getter for ConsentReceivedOwsView1.
     * @return ConsentReceivedOwsView1
     */
    public ViewObjectImpl getConsentReceivedOwsView1() {
        return (ViewObjectImpl) findViewObject("ConsentReceivedOwsView1");
    }

    /**
     * Container's getter for XwrlRequestDetailsView1.
     * @return XwrlRequestDetailsView1
     */
    public ViewObjectImpl getXwrlRequestDetailsView1() {
        return (ViewObjectImpl) findViewObject("XwrlRequestDetailsView1");
    }
    
    public HashMap userSessionValidation() {
        LOGGER.finest("userSessionValidation");

        Connection connection = null;
        String applServerID = null;
        String systemName = null;
        String home = null;
        FacesContext fctx = null;
        HttpServletRequest request = null;
        HttpServletResponse response = null;
        Statement stmt = null;
        ServletContext servContext = null;
        EBiz instance = null;
        AppsRequestWrapper wrappedRequest = null;
        String agent = null;
        Session session = null;
        CookieStatus icxCookieStatus = null;
        Map<String, String> data = null;
        Integer userId = 0;
        Integer sessionId = 0;
        Integer responsibilityId = 0;
        String userName = "";
        String dbName = "";
        ViewObjectImpl vo = null;
        ViewObjectImpl respVo = null;
        ViewObjectImpl recordLockVO = null;

        Row row = null;
        Row[] rows = null;
        String responsibilityKey = "";
        String responsibilityName = "";
        HashMap respMap = new HashMap();
        Row[] respRows = null;
        Row respRow = null;

        try {

            fctx = FacesContext.getCurrentInstance();
            request = (HttpServletRequest) fctx.getExternalContext().getRequest();
            response = (HttpServletResponse) fctx.getExternalContext().getResponse();

            stmt = this.getDBTransaction().createStatement(0);
            connection = stmt.getConnection();
            servContext = (ServletContext) ADFContext.getCurrent().getEnvironment().getContext();
            applServerID = servContext.getInitParameter("APPL_SERVER_ID_SECURE");
            systemName = servContext.getInitParameter("SYSTEM_NAME");
            instance = new EBiz(connection, applServerID);
            //Note: EBS and WL domain needs to be the same (iri.int) othersize session will return null
            wrappedRequest = new AppsRequestWrapper(request, response, connection, instance);
            agent = wrappedRequest.getEbizInstance().getAppsServletAgent();
            home = agent + "OA.jsp?OAFunc=OAHOMEPAGE";
            session = wrappedRequest.getAppsSession();

            if (session != null) {
                icxCookieStatus = session.getCurrentState().getIcxCookieStatus();
            } else {
                icxCookieStatus = wrappedRequest.getICXCookieStatus();
            }
            //LOGGER.finest("[beforePhase] IcxCookieStatus: " + icxCookieStatus);
            // TSUAZO - Comment to run on local IWS
            //*/
            if (!icxCookieStatus.equals(CookieStatus.VALID)) {
                try {
                    response.sendRedirect(agent + "AppsLocalLogin.jsp");
                } catch (IOException e) {
                    e.printStackTrace();
                    logGenericTC(LogUtils.ERROR, "System encountered an exception while getting redirect link.", 
                                                                   "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","userSessionValidation", LogUtils.returnStackTrace(e));
                }
                return new HashMap();
            }
            //*/

            data = session.getInfo();
            userId = new Integer(data.get("USER_ID"));
            sessionId = new Integer(data.get("SESSION_ID"));
            responsibilityId = new Integer(data.get("RESPONSIBILITY_ID"));
            userName = session.getUserName();
            dbName = instance.getDbId();

            LOGGER.finest("userId: " + userId);
            LOGGER.finest("sessionId: " + sessionId);
            LOGGER.finest("responsibilityId: " + responsibilityId);
            LOGGER.finest("userName: " + userName);
            LOGGER.finest("dbName: " + dbName);

            /*sessionScopeMap = ADFContext.getCurrent().getSessionScope(); */

            respMap.put("UserId", userId);
            respMap.put("SessionId", sessionId);
            respMap.put("ResponsibilityId", responsibilityId);
            respMap.put("UserName", userName);
            respMap.put("DbName", dbName);
            respMap.put("SystemName", systemName);
            respMap.put("isAdminMode", "N");
            respMap.put("isReadOnly", "Y");
            respMap.put("isSuperUserOnly", "N");
            respMap.put("isCorporateReviewer","N"); // T20221108.0024 - TC Role Based Access Control
            respMap.put("isRecordLockUser","N");
            respMap.put("Home", home);
            respMap.put("isOther", false);
            respMap.put("isGenericAdminMode", "N");

            try {
                respVo = this.getFndResponsibilityView1();
                respVo.setNamedWhereClauseParam("pRespId", responsibilityId);
                respVo.executeQuery();
                respVo.setRangeSize(-1);

                respRows = respVo.getAllRowsInRange();
                if(respRows.length != 0){
                    respRow = respRows[0];
                    responsibilityName = nullStrToSpc(respRow.getAttribute("ResponsibilityName"));
                }else
                    responsibilityName="";
                respMap.put("ResponsibilityName", responsibilityName);
                

            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
                logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching responsibility details.", 
                                                               "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","userSessionValidation", LogUtils.returnStackTrace(e));
            }

            LOGGER.finest("responsibilityName: " + responsibilityName);

            vo = getUserRespView1();
            vo.setNamedWhereClauseParam("pUserName", userName);
            vo.executeQuery();
            vo.setRangeSize(-1);

            LOGGER.finest("Estimate count: " + vo.getEstimatedRowCount());

            rows = vo.getAllRowsInRange();
            row = null;


            if (rows != null) {
                LOGGER.finest("length: " + rows.length);

                for (int i = 0; i < rows.length; i++) {
                    row = rows[i];

                    responsibilityKey = nullStrToSpc(row.getAttribute(4));
                    
                        if ("RMI_TC_OWS_REQUEST".equalsIgnoreCase(responsibilityKey)) 
                        {
                            respMap.put("isReadOnly", "Y");
                        }
                    
                    //T20210812.0025 - OWS - TC Approvers
//                        if ("RMI_TC_OWS_SUPERUSER".equalsIgnoreCase(responsibilityKey)) 
//                        {
//                            respMap.put("isSuperUserOnly", "Y");
//                        }
                    
                        if ("RMI_OWS_GENERIC_ADMIN".equalsIgnoreCase(responsibilityKey)) 
                        {
                            respMap.put("isGenericAdminMode", "Y");
                        }
                }

                LOGGER.finest("sessionScopeMap size: " + respMap.size());
            }
            
            //T20210812.0025 - OWS - TC Approvers
            vo = getSuperUserCheck1();
            vo.setNamedWhereClauseParam("pUserName", userName);
            vo.executeQuery();
            
            if(vo.hasNext()) {
                respMap.put("isSuperUserOnly", "Y");
            }
            
            
            //T20221108.0024 - TC Role Based Access Control
            vo = getCorporateReviewerCheck1();
            vo.setNamedWhereClauseParam("pUserName", userName);
            vo.executeQuery();
            
            if(vo.hasNext()) {
                respMap.put("isCorporateReviewer", "Y");
            }
            
            recordLockVO = getRecordLock1();
            recordLockVO.setNamedWhereClauseParam("pUserId", userId);
            recordLockVO.executeQuery();
            
            if(recordLockVO.hasNext()) {
                respMap.put("isRecordLockUser", "Y");
            }
            
            LOGGER.finest("readOnlyMode: " + respMap.get("isReadOnly"));
            LOGGER.finest("isSuperUserOnly: " + respMap.get("isSuperUserOnly"));
            LOGGER.finest("isCorporateReviewer: " + respMap.get("isCorporateReviewer"));


        } catch (SQLException e) {
            e.printStackTrace();
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching responsibility details.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","userSessionValidation", LogUtils.returnStackTrace(e));
        } catch (AppsRequestWrapper.WrapperException e) {
            e.printStackTrace();
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching wrapper responsibility details.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","userSessionValidation",LogUtils.returnStackTrace(e));
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
                logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching responsibility details.", 
                                                               "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","userSessionValidation", LogUtils.returnStackTrace(e));
            }
            return respMap;
        }
    }
    
    public String nullStrToSpc(Object obj) {
        
        LOGGER.finest("nullStrToSpc");
        String spcStr = "";

        if (obj == null) {
            return spcStr;
        } else {
            return obj.toString();
        }
    }

    /**
     * Container's getter for FndResponsibilityView1.
     * @return FndResponsibilityView1
     */
    public ViewObjectImpl getFndResponsibilityView1() {
        return (ViewObjectImpl) findViewObject("FndResponsibilityView1");
    }

    /**
     * Container's getter for UserRespView1.
     * @return UserRespView1
     */
    public ViewObjectImpl getUserRespView1() {
        return (ViewObjectImpl) findViewObject("UserRespView1");
    }

    /**
     * Container's getter for XwrlTCDetailsView1.
     * @return XwrlTCDetailsView1
     */
    public ViewObjectImpl getXwrlTCDetailsView1() {
        return (ViewObjectImpl) findViewObject("XwrlTCDetailsView1");
    }

    /**
     * Container's getter for LovVettingsNameScreenedView1.
     * @return LovVettingsNameScreenedView1
     */
    public LovVettingsNameScreenedViewImpl getLovVettingsNameScreenedView1() {
        return (LovVettingsNameScreenedViewImpl) findViewObject("LovVettingsNameScreenedView1");
    }

    /**
     * Container's getter for LovAliasNameScreenedView1.
     * @return LovAliasNameScreenedView1
     */
    public ViewObjectImpl getLovAliasNameScreenedView1() {
        return (ViewObjectImpl) findViewObject("LovAliasNameScreenedView1");
    }

    /**
     * Container's getter for RmiGenericLogsView1.
     * @return RmiGenericLogsView1
     */
    public ViewObjectImpl getRmiGenericLogsView1() {
        return (ViewObjectImpl) findViewObject("RmiGenericLogsView1");
    }

    /**
     * Container's getter for RmiGenericParametersView1.
     * @return RmiGenericParametersView1
     */
    public ViewObjectImpl getRmiGenericParametersView1() {
        return (ViewObjectImpl) findViewObject("RmiGenericParametersView1");
    }

    /**
     * Container's getter for SuperUserCheck1.
     * @return SuperUserCheck1
     */
    public ViewObjectImpl getSuperUserCheck1() {
        return (ViewObjectImpl) findViewObject("SuperUserCheck1");
    }

    /**
     * Container's getter for GetConsentDetailsByConfNumberView1.
     * @return GetConsentDetailsByConfNumberView1
     */
    public ViewObjectImpl getGetConsentDetailsByConfNumberView1() {
        return (ViewObjectImpl) findViewObject("GetConsentDetailsByConfNumberView1");
    }

    /**
     * Container's getter for GetOnlineConsentByMasterIdView1.
     * @return GetOnlineConsentByMasterIdView1
     */
    public ViewObjectImpl getGetOnlineConsentByMasterIdView1() {
        return (ViewObjectImpl) findViewObject("GetOnlineConsentByMasterIdView1");
    }

    /**
     * Container's getter for XwrlPartyAliasView1.
     * @return XwrlPartyAliasView1
     */
    public ViewObjectImpl getXwrlPartyAliasView1() {
        return (ViewObjectImpl) findViewObject("XwrlPartyAliasView1");
    }

    /**
     * Container's getter for XwrlPartyMasterView1.
     * @return XwrlPartyMasterView1
     */
    public ViewObjectImpl getXwrlPartyMasterView1() {
        return (ViewObjectImpl) findViewObject("XwrlPartyMasterView1");
    }

    /**
     * Container's getter for XwrlPartyXrefView1.
     * @return XwrlPartyXrefView1
     */
    public ViewObjectImpl getXwrlPartyXrefView1() {
        return (ViewObjectImpl) findViewObject("XwrlPartyXrefView1");
    }

    /**
     * Container's getter for LovVettingsNameScreenedRestrictedView1.
     * @return LovVettingsNameScreenedRestrictedView1
     */
    public ViewObjectImpl getLovVettingsNameScreenedRestrictedView1() {
        return (ViewObjectImpl) findViewObject("LovVettingsNameScreenedRestrictedView1");
    }

    /**
     * Container's getter for GetIsOfacABlockedFlagsView1.
     * @return GetIsOfacABlockedFlagsView1
     */
    public ViewObjectImpl getGetIsOfacABlockedFlagsView1() {
        return (ViewObjectImpl) findViewObject("GetIsOfacABlockedFlagsView1");
    }
    
    public  void logGenericTC(String type, String title, String message, String className,String methodName, String detailedMessage ){
        try{
            Map pMap =  ADFContext.getCurrent().getPageFlowScope();
            ViewObject vo = getRmiGenericLogsView1();
            
            Row createRow = vo.createRow();
            createRow.setAttribute("DetailedMessage", detailedMessage);
            createRow.setAttribute("Type", type);
            createRow.setAttribute("Title", title);
            createRow.setAttribute("Message", message);
            if(pMap.get("P_SOURCE_ID") == null || "".equals(pMap.get("P_SOURCE_ID")))
                createRow.setAttribute("SourceId", new BigDecimal("0"));
            else
                createRow.setAttribute("SourceId", new BigDecimal(pMap.get("P_SOURCE_ID")+""));
            createRow.setAttribute("SourceTable", pMap.get("P_SOURCE_TABLE"));
            createRow.setAttribute("SourceTableColumn", pMap.get("P_SOURCE_TABLE_COLUMN"));
            createRow.setAttribute("SourceType", pMap.get("P_SOURCE_TYPE"));
            createRow.setAttribute("ClassName", className);
            createRow.setAttribute("MethodName", methodName);
            createRow.setAttribute("Param1", pMap.get("DPC_CATEGORY"));
            
            vo.insertRow(createRow);
            getDBTransaction().commit();
            
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }

    /**
     * Container's getter for RmiGenericColumnsOrderView1.
     * @return RmiGenericColumnsOrderView1
     */
    public ViewObjectImpl getRmiGenericColumnsOrderView1() {
        return (ViewObjectImpl) findViewObject("RmiGenericColumnsOrderView1");
    }

    /**
     * Container's getter for LovVettingsNameScreenedUpdateView1.
     * @return LovVettingsNameScreenedUpdateView1
     */
    public ViewObjectImpl getLovVettingsNameScreenedUpdateView1() {
        return (ViewObjectImpl) findViewObject("LovVettingsNameScreenedUpdateView1");
    }

    /**
     * Container's getter for LovAliasNameScreenedUpdateView1.
     * @return LovAliasNameScreenedUpdateView1
     */
    public ViewObjectImpl getLovAliasNameScreenedUpdateView1() {
        return (ViewObjectImpl) findViewObject("LovAliasNameScreenedUpdateView1");
    }

    /**
     * Container's getter for AliasNameDuplicateCheckView1.
     * @return AliasNameDuplicateCheckView1
     */
    public ViewObjectImpl getAliasNameDuplicateCheckView1() {
        return (ViewObjectImpl) findViewObject("AliasNameDuplicateCheckView1");
    }

    //T20220323.0025 - Issue with vettings being automatically check mark... (IRI)
    public void saveVettingCheckBoxSelections(){
        LOGGER.finest("Start saveVettingCheckBoxSelections - AMImpl");
        try{
            ViewObjectImpl tcReferenceVo = this.getTcReferencesView1();
            RowSetIterator tcReferenceRsi = tcReferenceVo.createRowSetIterator(null);
            String tcExcluded = "N";
            while (tcReferenceRsi.hasNext()) {
                LOGGER.finest("Inside While loop");
                Row r = tcReferenceRsi.next();

                if (r != null && r.getAttribute("MasterId") != null) {
                    
                    tcExcluded = ("Y".equals(r.getAttribute("TcExcluded")))? "N" : "Y";
                    LOGGER.finest("tcExcluded: "+tcExcluded);
                    AdfUtils.callDbFunction(this, Types.VARCHAR,
                                                         "RMI_GENERIC_TC.update_master_individual(?,?,?,?)", new Object[] {
                                                         r.getAttribute("MasterId"), r.getAttribute("AliasId"),
                                                         r.getAttribute("XrefId"), tcExcluded
                    },"System encountered an exception while saving.");

                    this.getDBTransaction().commit();
                }
            }
            tcReferenceRsi.closeRowSetIterator();
        }catch(Exception e){
            e.printStackTrace();
            logGenericTC(LogUtils.ERROR, "System encountered an exception while fetching responsibility details.", 
                                                           "Please contact your System Administrator.", "RMIManualTradeComplianceAppModuleImpl","saveVettingCheckBoxSelections", LogUtils.returnStackTrace(e));
        }
        LOGGER.finest("End saveVettingCheckBoxSelections - AMImpl");
    }

    /**
     * Container's getter for RecordLock1.
     * @return RecordLock1
     */
    public ViewObjectImpl getRecordLock1() {
        return (ViewObjectImpl) findViewObject("RecordLock1");
    }

    /**
     * Container's getter for CorporateReviewerCheck1.
     * @return CorporateReviewerCheck1
     */
    public ViewObjectImpl getCorporateReviewerCheck1() {
        return (ViewObjectImpl) findViewObject("CorporateReviewerCheck1");
    }
    
    
    public void onLoad() {
        try{
            FacesContext fctx = FacesContext.getCurrentInstance();
            ExternalContext ectx = fctx.getExternalContext();
            Map m = ectx.getRequestParameterMap();
            Map pMap =  ADFContext.getCurrent().getPageFlowScope();
            Map sessionMap = ADFContext.getCurrent().getSessionScope();
            
            if(pMap.get("P_SOURCE_ID") == null)
               pMap.put("P_SOURCE_ID",m.get("sourceId"));
            
            if(pMap.get("P_SOURCE_TABLE") == null)
               pMap.put("P_SOURCE_TABLE",m.get("sourceTable"));
            
            if(pMap.get("P_SOURCE_TABLE_COLUMN") == null)
               pMap.put("P_SOURCE_TABLE_COLUMN",m.get("sourceTableColumn"));
            
            if(pMap.get("P_SOURCE_TYPE") == null)
                pMap.put("P_SOURCE_TYPE",m.get("sourceType"));
            
            sessionMap.put("regionOWSRendered",pMap.get("P_OWS_REGION_RENDERED"));
            sessionMap.put("pFacesServlet",pMap.get("P_FACES_SERVLET"));
            
            System.out.println("seafarerId:"+pMap.get("P_SOURCE_ID"));
            System.out.println("sourceTable:"+pMap.get("P_SOURCE_TABLE"));
            
            /* Provisional Check */
            
            // tsuazo 08/21/2023
            //String sourceTable = (String) pMap.get("P_SOURCE_TABLE");            
            String sourceTable = pMap.get("P_SOURCE_TABLE").toString();            
            String docType = null;
            
            if (sourceTable != null) {
                Integer lInstr = sourceTable.indexOf('_');
                String lSourceTab = sourceTable.substring(0,lInstr);
                
                System.out.println("lInstr:"+lInstr);
                System.out.println("lSourceTab:"+lSourceTab);

                List<String> list = Arrays.asList("SICD");
                boolean isExists = list.contains(lSourceTab);
                
                
                if (isExists) {
                    
                    // tsuazo 08/21/2023
                    //Integer sourceId = Integer.valueOf((String) pMap.get("P_SOURCE_ID"));
                    Integer sourceId = Integer.valueOf(pMap.get("P_SOURCE_ID").toString());
                    
                    // tsuazo 08/21/22023
                    //RMIManualTradeComplianceAppModuleImpl amImpl = (RMIManualTradeComplianceAppModuleImpl) ADFUtils.getApplicationModuleForDataControl("RMIManualTradeComplianceAppModuleDataControl");
                    Statement datasource = this.getDBTransaction().createStatement(0);
                    
                    String sqlQuery = "SELECT RMI_SICD_PUB_EXT.get_seafarer_doc_type(?) doc_type FROM DUAL";
                    
                    try {
                        Connection connection = datasource.getConnection();
                        PreparedStatement statement = connection.prepareStatement(sqlQuery);
                        statement.setInt(1, sourceId);
                        ResultSet resultSet = statement.executeQuery();
                        System.out.println("nameScreenContainVCL resultSet:"+resultSet);
                        if (resultSet.next()) {
                            docType = resultSet.getString("doc_type");
                        }
                        
                        //resultSet.close();
                        //statement.close();
                        //connection.close();
                        
                        
                        
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }   
                    
                    System.out.println("nameScreenContainVCL onLoad docType: "+docType);
                    
                }
            }

            // T20230601.0005 - Eligible for TC Provisional Approval
            //String sourceTab = (String) m.get("sourceTable");
            
            // tsuazo 08/21/2020
            //String sourceTab = (String) pMap.get("P_SOURCE_TABLE");
            String sourceTab = pMap.get("P_SOURCE_TABLE").toString();
            
            if (sourceTab != null) {
                Integer lInstr = sourceTab.indexOf('_');
                String lSourceTab = sourceTab.substring(0,lInstr);                
                System.out.println("lInstr:"+lInstr);
                System.out.println("lSourceTab:"+lSourceTab);
                
                // T20230330.0026 - LONO - TC Department (IRI)
                List<String> list = Arrays.asList("SICD","NRMI","LONO");
                boolean isExists = list.contains(lSourceTab);
                if (isExists) {
                    pMap.put("Provisional","Y");
                    
                    if (lSourceTab.equals("SICD")) {
                        
                        // pMap.put("ProvisionalDocumentType","PRVFT");
                        
                        if (docType != null) {
                            pMap.put("Provisional","Y");
                            pMap.put("ProvisionalDocumentType",docType);                             
                        } else {
                            pMap.put("Provisional","N");
                            pMap.put("ProvisionalDocumentType",null); 
                        }
                        
                        
                        
                    } else if (lSourceTab.equals("NRMI")) {
                        pMap.put("ProvisionalDocumentType","NRMI");
                    } else if (lSourceTab.equals("LONO")) {
                        pMap.put("ProvisionalDocumentType","LONO");     
                    }
                    
                } else {
                    pMap.put("Provisional","N");
                    pMap.put("ProvisionalDocumentType",null);   
                }
                
            }            
            
            System.out.println("Provisional:"+pMap.get("Provisional"));
            System.out.println("ProvisionalDocumentType:"+pMap.get("ProvisionalDocumentType"));
            
            /* End Provisional Check */
            
           /* new IRIUtils().initVersionAYear();*/
            
            
        }catch(Exception e){
            e.printStackTrace();
        }
    }
}
