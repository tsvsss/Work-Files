package com.rmi.applicationEntry.adfbc.entities;

import com.rmi.applicationEntry.adfbc.extensions.CustomEntity;

import java.math.BigDecimal;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jan 21 16:37:20 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DocumentScanningLogImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        EdslId,
        EsiBatchId,
        EsiId,
        EsdiId,
        IriEdocsId,
        DocumentType,
        SeafarerId;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return DocumentScanningLogImpl.AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return DocumentScanningLogImpl.AttributesEnum.firstIndex() +
                   DocumentScanningLogImpl.AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = DocumentScanningLogImpl.AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int EDSLID = AttributesEnum.EdslId.index();
    public static final int ESIBATCHID = AttributesEnum.EsiBatchId.index();
    public static final int ESIID = AttributesEnum.EsiId.index();
    public static final int ESDIID = AttributesEnum.EsdiId.index();
    public static final int IRIEDOCSID = AttributesEnum.IriEdocsId.index();
    public static final int DOCUMENTTYPE = AttributesEnum.DocumentType.index();
    public static final int SEAFARERID = AttributesEnum.SeafarerId.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DocumentScanningLogImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.rmi.applicationEntry.adfbc.entities.DocumentScanningLog");
    }


    /**
     * Gets the attribute value for EdslId, using the alias name EdslId.
     * @return the value of EdslId
     */
    public DBSequence getEdslId() {
        return (DBSequence) getAttributeInternal(EDSLID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EdslId.
     * @param value value to set the EdslId
     */
    public void setEdslId(DBSequence value) {
        setAttributeInternal(EDSLID, value);
    }

    /**
     * Gets the attribute value for EsiBatchId, using the alias name EsiBatchId.
     * @return the value of EsiBatchId
     */
    public BigDecimal getEsiBatchId() {
        return (BigDecimal) getAttributeInternal(ESIBATCHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EsiBatchId.
     * @param value value to set the EsiBatchId
     */
    public void setEsiBatchId(BigDecimal value) {
        setAttributeInternal(ESIBATCHID, value);
    }

    /**
     * Gets the attribute value for EsiId, using the alias name EsiId.
     * @return the value of EsiId
     */
    public BigDecimal getEsiId() {
        return (BigDecimal) getAttributeInternal(ESIID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EsiId.
     * @param value value to set the EsiId
     */
    public void setEsiId(BigDecimal value) {
        setAttributeInternal(ESIID, value);
    }

    /**
     * Gets the attribute value for EsdiId, using the alias name EsdiId.
     * @return the value of EsdiId
     */
    public BigDecimal getEsdiId() {
        return (BigDecimal) getAttributeInternal(ESDIID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EsdiId.
     * @param value value to set the EsdiId
     */
    public void setEsdiId(BigDecimal value) {
        setAttributeInternal(ESDIID, value);
    }

    /**
     * Gets the attribute value for IriEdocsId, using the alias name IriEdocsId.
     * @return the value of IriEdocsId
     */
    public BigDecimal getIriEdocsId() {
        return (BigDecimal) getAttributeInternal(IRIEDOCSID);
    }

    /**
     * Sets <code>value</code> as the attribute value for IriEdocsId.
     * @param value value to set the IriEdocsId
     */
    public void setIriEdocsId(BigDecimal value) {
        setAttributeInternal(IRIEDOCSID, value);
    }

    /**
     * Gets the attribute value for DocumentType, using the alias name DocumentType.
     * @return the value of DocumentType
     */
    public String getDocumentType() {
        return (String) getAttributeInternal(DOCUMENTTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocumentType.
     * @param value value to set the DocumentType
     */
    public void setDocumentType(String value) {
        setAttributeInternal(DOCUMENTTYPE, value);
    }

    /**
     * Gets the attribute value for SeafarerId, using the alias name SeafarerId.
     * @return the value of SeafarerId
     */
    public BigDecimal getSeafarerId() {
        return (BigDecimal) getAttributeInternal(SEAFARERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SeafarerId.
     * @param value value to set the SeafarerId
     */
    public void setSeafarerId(BigDecimal value) {
        setAttributeInternal(SEAFARERID, value);
    }


    /**
     * @param edslId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence edslId) {
        return new Key(new Object[] { edslId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
//        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

