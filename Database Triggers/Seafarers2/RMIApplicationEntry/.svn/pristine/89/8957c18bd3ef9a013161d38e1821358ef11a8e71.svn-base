package com.rmi.applicationEntry.adfbc.entities;

import com.rmi.applicationEntry.adfbc.extensions.CustomEntity;

import java.math.BigDecimal;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jan 21 22:44:14 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DispensationLetterLinksImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        DispensationId,
        VesselId,
        SeafarerId,
        SicdDocumentId,
        CorpId,
        UserId;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return DispensationLetterLinksImpl.AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return DispensationLetterLinksImpl.AttributesEnum.firstIndex() +
                   DispensationLetterLinksImpl.AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = DispensationLetterLinksImpl.AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int DISPENSATIONID = AttributesEnum.DispensationId.index();
    public static final int VESSELID = AttributesEnum.VesselId.index();
    public static final int SEAFARERID = AttributesEnum.SeafarerId.index();
    public static final int SICDDOCUMENTID = AttributesEnum.SicdDocumentId.index();
    public static final int CORPID = AttributesEnum.CorpId.index();
    public static final int USERID = AttributesEnum.UserId.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DispensationLetterLinksImpl() {
    }

    /**
     * Gets the attribute value for DispensationId, using the alias name DispensationId.
     * @return the value of DispensationId
     */
    public Integer getDispensationId() {
        return (Integer) getAttributeInternal(DISPENSATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DispensationId.
     * @param value value to set the DispensationId
     */
    public void setDispensationId(Integer value) {
        setAttributeInternal(DISPENSATIONID, value);
    }

    /**
     * Gets the attribute value for VesselId, using the alias name VesselId.
     * @return the value of VesselId
     */
    public BigDecimal getVesselId() {
        return (BigDecimal) getAttributeInternal(VESSELID);
    }

    /**
     * Sets <code>value</code> as the attribute value for VesselId.
     * @param value value to set the VesselId
     */
    public void setVesselId(BigDecimal value) {
        setAttributeInternal(VESSELID, value);
    }

    /**
     * Gets the attribute value for SeafarerId, using the alias name SeafarerId.
     * @return the value of SeafarerId
     */
    public Integer getSeafarerId() {
        return (Integer) getAttributeInternal(SEAFARERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SeafarerId.
     * @param value value to set the SeafarerId
     */
    public void setSeafarerId(Integer value) {
        setAttributeInternal(SEAFARERID, value);
    }

    /**
     * Gets the attribute value for SicdDocumentId, using the alias name SicdDocumentId.
     * @return the value of SicdDocumentId
     */
    public Integer getSicdDocumentId() {
        return (Integer) getAttributeInternal(SICDDOCUMENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SicdDocumentId.
     * @param value value to set the SicdDocumentId
     */
    public void setSicdDocumentId(Integer value) {
        setAttributeInternal(SICDDOCUMENTID, value);
    }

    /**
     * Gets the attribute value for CorpId, using the alias name CorpId.
     * @return the value of CorpId
     */
    public BigDecimal getCorpId() {
        return (BigDecimal) getAttributeInternal(CORPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CorpId.
     * @param value value to set the CorpId
     */
    public void setCorpId(BigDecimal value) {
        setAttributeInternal(CORPID, value);
    }

    /**
     * Gets the attribute value for UserId, using the alias name UserId.
     * @return the value of UserId
     */
    public BigDecimal getUserId() {
        return (BigDecimal) getAttributeInternal(USERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserId.
     * @param value value to set the UserId
     */
    public void setUserId(BigDecimal value) {
        setAttributeInternal(USERID, value);
    }

    /**
     * @param dispensationId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer dispensationId) {
        return new Key(new Object[] { dispensationId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.rmi.applicationEntry.adfbc.entities.DispensationLetterLinks");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
      
        super.create(attributeList);
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
//        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

