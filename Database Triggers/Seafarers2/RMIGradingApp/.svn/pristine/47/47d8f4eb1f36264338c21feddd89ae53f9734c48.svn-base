package com.rmi.tradecompapproval.adfbc.services;

import com.rmi.tradecompapproval.adfbc.views.RmiBatchViewImpl;

import com.rmi.tradecompapproval.adfbc.views.lovs.CustAccountDeliverToViewImpl;

import oracle.jbo.JboException;
import oracle.jbo.server.ApplicationModuleImpl;
import com.rmi.tradecompapproval.adfbc.services.common.*;

import com.lowagie.text.Document;
import com.lowagie.text.pdf.PdfContentByte;
import com.lowagie.text.pdf.PdfImportedPage;
import com.lowagie.text.pdf.PdfReader;

import com.lowagie.text.pdf.PdfWriter;

import com.rmi.tradecompapproval.adfbc.utils.AdfUtils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import java.lang.reflect.Field;

import java.math.BigDecimal;

import java.net.URL;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.PosixFilePermission;

import java.nio.file.attribute.PosixFilePermissions;

import java.sql.Connection;
import java.sql.PreparedStatement;
import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ViewLinkImpl;
import oracle.binding.BindingContainer;
import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import java.util.Set;

import javax.faces.application.FacesMessage;

import oracle.adf.model.BindingContext;
import oracle.adf.share.ADFContext;
import oracle.adf.view.rich.context.AdfFacesContext;

import oracle.jbo.Key;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Timestamp;

import oracle.jbo.server.DBTransaction;


import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 20 11:21:15 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RMITradeCompApprovalAppModuleImpl extends ApplicationModuleImpl implements RMITradeCompApprovalAppModule{
    /**
     * This is the default constructor (do not remove).
     */
    public RMITradeCompApprovalAppModuleImpl() {
    }

    /**
     * Container's getter for viewBatchVO2.
     * @return viewBatchVO2
     */
    public RmiBatchViewImpl getRmiBatchView2() {
        return (RmiBatchViewImpl) findViewObject("RmiBatchView2");
    }

    /**
     * Container's getter for WorkOrderDetailsRO2.
     * @return WorkOrderDetailsRO2
     */
    public ViewObjectImpl getWorkOrderDetailsView2() {
        return (ViewObjectImpl)findViewObject("WorkOrderDetailsView2");
    }

    /**
     * Container's getter for BatchWorkOrderLK.
     * @return BatchWorkOrderLK
     */
    public ViewLinkImpl getBatchWorkOrderLK() {
        return (ViewLinkImpl)findViewLink("BatchWorkOrderLK");
    }
    
    /**
     * Method fetches batch details of the passed batchId.
     * @param batch_id pass batchId to br edited.
     **/
    public void editBatch(Integer batch_id)
    {
         try 
         {
            ViewObject batchesVO = getRmiBatchView2();
            batchesVO.setWhereClause("esi_batch_id=" + batch_id);
            batchesVO.executeQuery();
            String user_type = null;
            Integer user = null;
            String retVal = null;
            Row row1 = batchesVO.first();
            user = Integer.parseInt(row1.getAttribute("CreatedBy").toString());
            ViewObject userDetailsRo = getUserDetailsView1();
            userDetailsRo.setNamedWhereClauseParam("pUserId", user);
            userDetailsRo.executeQuery();
            if (userDetailsRo.getRowCount() > 0) {
                Row row2 = userDetailsRo.first();
                String ut = row2.getAttribute("UserType").toString();
                user_type = ut;
            }
             
            printTmpLogs("printTmpLogs called :: "+user_type);
            
//            ADFContext.getCurrent().getSessionScope().put("UserId", 10245);
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("user_type", user_type);
            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("Role_Name", ADFContext.getCurrent().getSessionScope().get("RoleName"));
//            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("Role_Name", "EVALUATOR"); //TRADE COMPLIANCE QA PROCESSOR - I EVALUATOR
//            AdfFacesContext.getCurrentInstance().getPageFlowScope().put("Role_Name", "PROCESSOR - I"); //TRADE COMPLIANCE QA PROCESSOR - I EVALUATOR
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching batch details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method fetches url of the documents uploaded.
     * @return String returns url of the documents uploaded.
     **/
    public String getlinkforTaskAssignmentpage()
    {
        String ret = null;

        try
        {
           ViewObject seafarer = getRmiSeafarerView1();
            Row currRow = seafarer.getCurrentRow();
            Integer IdentityDocEdocId = null;
            Integer PhysicalEdocId = null;
            try {
                ViewObject linkVO = getGetDocumentLinkView1();

                IdentityDocEdocId = Integer.parseInt(currRow.getAttribute("IdentityDocEdocId").toString());
                linkVO.setNamedWhereClauseParam("pEdocId", IdentityDocEdocId);
                linkVO.executeQuery();
                if (linkVO.getRowCount() > 0) {
                    Row row = linkVO.first();
                    ret = row.getAttribute("DocPath").toString();
                }

                PhysicalEdocId = Integer.parseInt(currRow.getAttribute("PhysicalEdocId").toString());
                linkVO.setNamedWhereClauseParam("pEdocId", PhysicalEdocId);
                linkVO.executeQuery();
                if (linkVO.getRowCount() > 0) {
                    Row row = linkVO.first();
                    ret = row.getAttribute("DocPath").toString();
                }
            } catch (Exception e) {
                ret = null;
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching document URL." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
      return ret;
    }
    
    /**
     * Method fetches seafarer(s) details of the selected batch.
     **/
    public void filterBatchSeafarersDetails()
        {
            try 
            {
                Row batchRow = this.getRmiBatchView2().getCurrentRow();
    
                if (batchRow != null && batchRow.getAttribute("EsiBatchId") != null) {
                    ViewObjectImpl vwSfrrVo = this.getRmiSeafarerView1();
                    vwSfrrVo.setNamedWhereClauseParam("pEsiBatchId", batchRow.getAttribute("EsiBatchId"));
                    vwSfrrVo.executeQuery();
                }
            } catch (Exception e) {
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching batch seafarer details." +
                                                 " Please contact your System Administrator." , 
                                                 "", FacesMessage.SEVERITY_ERROR);
            }
        }
    
    /**
     * Method calls/executes DB function passed as paramater.
     * @param sqlReturnType pass return type of the passed function.
     * @param stmt pass DB function name with no. of arguments.
     * @param bindVars pass array of Object type which contains required parameters.
     * @return Object returns function output returned by database.
     **/
    protected Object callDbFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try 
        {
          st =
              this.getDBTransaction().createCallableStatement("begin ?:=" + stmt + ";end;", 0);            
          
          st.registerOutParameter(1, sqlReturnType);
          
          if (bindVars != null) 
          {              
            for (int z = 0; z < bindVars.length; z++) 
            {         
                //System.out.println("bindVars["+z+"] :: "+bindVars[z]);
                st.setObject(z + 2, bindVars[z]);
            }
          }
          st.execute();
            
          return st.getObject(1);
        } 
        catch (SQLException e) {
          throw new JboException(e);
        } 
        finally {
          if (st != null) {
            try {
              st.close();
            } catch (SQLException e) {
            }
          }
        }
      }
    
    /**
     * Method updates Issue Type of the certificate(s) of selected seafarer.
     **/
    public void updateIssueType()
    {
      try {
            ViewObject ocVo = getRmiSeafarerDocsOcView1();
            RowSetIterator createRowSetIterator = ocVo.createRowSetIterator(null);
            while (createRowSetIterator.hasNext()) {
                Row row = createRowSetIterator.next();
                Integer esdi_id = Integer.parseInt(row.getAttribute("EsdiId").toString());
                String retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.update_issue_type(?)", new Object[] {
                                                        esdi_id });
            }
        } catch (Exception nfe) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating issue type." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method cancels single line of selected order/batch.
     **/
    public void updateCancelLine()
    {
        try {
            Row batchRow = this.getRmiBatchView2().getCurrentRow();
            ViewObject ocVo = getRmiSeafarerDocsOcView1();
            RowSetIterator createRowSetIterator = ocVo.createRowSetIterator(null);
            while (createRowSetIterator.hasNext()) {
                Row row = createRowSetIterator.next();
                if ((batchRow != null && batchRow.getAttribute("OeHeaderId") != null) &&
                    (row.getAttribute("GradingStatus") != null &&
                     row.getAttribute("GradingStatus").toString().equalsIgnoreCase("Cancel"))) {
                    Integer esdi_id = Integer.parseInt(row.getAttribute("EsdiId").toString());
                    String retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.cancel_single_order_line(?,?)", new Object[] {
                                                            esdi_id, batchRow.getAttribute("OeHeaderId")
                    });
                }

            }
        } catch (Exception nfe) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while cancelling order single line." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method validates selected seafarer using DB procedure.
     * @return String returns if the seafarer already exists or is new.
     **/
    public String validateSeafarerFromProc()
    {
        String retVal = "N";
        
        try {
            Row vwSfrrRow = this.getRmiSeafarerView1().getCurrentRow();

//            System.out.println("vwSfrrRow :: "+vwSfrrRow);
            
            if (vwSfrrRow != null) 
            {
                ADFContext.getCurrent().getSessionScope().put("batchId", vwSfrrRow.getAttribute("EsiBatchId"));
                
                vwSfrrRow.setAttribute("SeafarerVldtFlag", "Y");
                this.getDBTransaction().commit();
                
                printTmpLogs("sessionScope.batchId :: "+ADFContext.getCurrent().getSessionScope().get("batchId"));                
                printTmpLogs("vwSfrrRow.SeafarerVldtFlag :: "+vwSfrrRow.getAttribute("SeafarerVldtFlag"));
                
                ViewObjectImpl sicdSfrrVo = this.getSicdSeafarersQueryView2();
                sicdSfrrVo.setNamedWhereClauseParam("pSeafarerId", vwSfrrRow.getAttribute("SeafarerId"));
                sicdSfrrVo.executeQuery();
                
                Row[] sfrrRows = sicdSfrrVo.getAllRowsInRange();

//                System.out.println("sfrrRows.length :: "+sfrrRows.length);
                
//                if(sfrrRows.length > 0)
//                    System.out.println("Attribute15 :: "+sfrrRows[0].getAttribute("Attribute15"));
                
                if(sfrrRows.length > 0 && sfrrRows[0].getAttribute("Attribute15") == null)
                {
                    try
                    {
                        this.getDBTransaction().commit();
                        
                        retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.validate_seafarer_grading(?,?,?,?,?,?,?,?)", new Object[] {
                                                         vwSfrrRow.getAttribute("SeafarerId"),
                                                         vwSfrrRow.getAttribute("LastName"),
                                                         vwSfrrRow.getAttribute("FirstName"),
                                                         vwSfrrRow.getAttribute("BirthDate"),
                                                         vwSfrrRow.getAttribute("EsiBatchId"),
                                                         vwSfrrRow.getAttribute("Nationality"),
                                                         vwSfrrRow.getAttribute("EsiId"),
                                                         getUserId()
                        });
                        retVal = "Y";
                    } catch (Exception e) {
                        e.printStackTrace();
                        AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while validating seafarer details." +
                                                         " Please contact your System Administrator." , 
                                                         "", FacesMessage.SEVERITY_ERROR);
                    }                    
                    return "Y";
                }
                else
                    return "N";
            }
            
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while validating seafarer details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }

//        System.out.println("retVal :: "+retVal);
        
        if(retVal != null)
            return retVal;
        else
            return "N";
    }
    
    /**
     * Method fetches all details of selected seafarer, including all documents and certificates.
     **/
    public void filterValidateSeafarerVO()
    {
        try 
        {
            Object seafarerIdO = RequestContext.getCurrentInstance().getPageFlowScope().get("P_SEAFARER_ID");
            Integer seafarerId = null;
            ViewObjectImpl vwSfrrVo = this.getRmiSeafarerView1();
            Row vwSfrrRow = vwSfrrVo.getCurrentRow();

            if (seafarerIdO != null) {
                seafarerId = Integer.parseInt(seafarerIdO.toString());
            } else if ((vwSfrrRow != null && vwSfrrRow.getAttribute("SeafarerId") != null)) {
                seafarerId = (Integer) vwSfrrRow.getAttribute("SeafarerId");
            }

            if (seafarerId != null) {
                ViewObjectImpl sicdSfrrVo = this.getSicdSeafarerView1();
                sicdSfrrVo.setNamedWhereClauseParam("pSeafarerId", seafarerId);
                sicdSfrrVo.executeQuery();

                ViewObjectImpl ocVo = this.getOfficerCertificatesView1();
                ocVo.setNamedWhereClauseParam("pOcSeafarerId", seafarerId);
                ocVo.executeQuery();

                ViewObjectImpl booksVo = this.getBooksView1();
                booksVo.setNamedWhereClauseParam("pBookSeafarerId", seafarerId);
                booksVo.executeQuery();
                
                updateIssueType();
                
            } else {
                AdfUtils.addFormattedFacesErrorMessage("Unable to fetch Seafarer ID !", "", FacesMessage.SEVERITY_ERROR);
            }
        } catch (Exception nfe) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching seafarer details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method fetches all details of selected seafarer, including all documents and certificates.
     * @param seafarerId pass seafarerId for desired seafarer details.
     **/
    public void filterValidateSeafarerVoOnLoad(Integer seafarerId)
    {
        try 
        {
            if (seafarerId != null) {
                ViewObjectImpl sicdSfrrVo = this.getSicdSeafarerView1();
                sicdSfrrVo.setNamedWhereClauseParam("pSeafarerId", seafarerId);
                sicdSfrrVo.executeQuery();

                ViewObjectImpl ocVo = this.getOfficerCertificatesView1();
                ocVo.setNamedWhereClauseParam("pOcSeafarerId", seafarerId);
                ocVo.executeQuery();

                ViewObjectImpl booksVo = this.getBooksView1();
                booksVo.setNamedWhereClauseParam("pBookSeafarerId", seafarerId);
                booksVo.executeQuery();
            } else {
                AdfUtils.addFormattedFacesErrorMessage("Unable to fetch Seafarer ID !", "", FacesMessage.SEVERITY_ERROR);
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching seafarer details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method fetches the list of seafarers which matches the criteria.
     * @param seafarerId pass seafarerId for desired seafarer details.
     **/
    public void filterSearchSeafarerVO()
    {
        try 
        {
            additionalFilterReset();
            ViewObjectImpl vwSfrrVo = this.getRmiSeafarerView1();
            Row vwSfrrRow = vwSfrrVo.getCurrentRow();

            if (vwSfrrRow != null) {
                BigDecimal queryId = null;

                try {
                    queryId = (BigDecimal) callDbFunction(Types.NUMERIC, "RMI_SICD_PUB.find_seafarer(?,?,?,?,?)", new Object[] {
                                                          vwSfrrRow.getAttribute("LastName"),
                                                          vwSfrrRow.getAttribute("FirstName"),
                                                          vwSfrrRow.getAttribute("BirthDate"),
                                                          vwSfrrRow.getAttribute("Nationality"),
                                                          vwSfrrRow.getAttribute("EsiBatchId")
                    });
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching seafarer list." +
                                                     " Please contact your System Administrator." , 
                                                     "", FacesMessage.SEVERITY_ERROR);
                }

                if (queryId != null) {
                    ViewObjectImpl srchSfrrVo = this.getSearchSeafarerView1();
                    srchSfrrVo.setNamedWhereClauseParam("pQueryId", queryId.intValue());
                    srchSfrrVo.executeQuery();
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching seafarer list." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }        
    }
    
    /**
     * Method fetches all details of selected seafarer, including all documents and certificates.
     **/
    public void filterUseSeafarerVO()
    {
        try 
        {
            ADFContext.getCurrent().getPageFlowScope().put("P_USE_SELECTED_SEAFARER", null);
            ViewObjectImpl srchSfrrVo = this.getSearchSeafarerView1();
            Row vwBatchRow = (this.getRmiBatchView2().getCurrentRow() != null)
                              ? this.getRmiBatchView2().getCurrentRow()
                              : this.getRmiBatchView2().first();
            Row vwSfrrRow = this.getRmiSeafarerView1().getCurrentRow();
            Row[] srchSfrrFrRows = srchSfrrVo.getFilteredRows("TransUseSelected", "true");
            Object pEsiId = ADFContext.getCurrent().getPageFlowScope().get("P_ESI_ID");
            printTmpLogs("P_ESI_ID :: "+ADFContext.getCurrent().getPageFlowScope().get("P_ESI_ID"));
            printTmpLogs("pEsiId :: "+pEsiId);

            if ((srchSfrrFrRows.length > 0 && srchSfrrFrRows[0].getAttribute("SeafarerId") != null
                    && pEsiId != null)){
                
                Integer esiId = Integer.parseInt(pEsiId.toString());
                printTmpLogs("esiId :: "+esiId);
                    
                Row srchSfrrRow = srchSfrrFrRows[0];
                String retVal = "Y";
                BigDecimal requestId = null;
                
//                System.out.println("srchSfrrRow :: "+srchSfrrRow);                
//                System.out.println("SeafarerId :: "+srchSfrrRow.getAttribute("SeafarerId"));

                try 
                {
                    printTmpLogs("srchSfrrRow :: "+srchSfrrRow);
                    printTmpLogs("srchSfrrRow.getAttribute(SeafarerId) :: "+srchSfrrRow.getAttribute("SeafarerId"));
                    System.out.println("esiId :: "+esiId);
                    
                } catch (Exception e) {
                    e.printStackTrace();
                }

                if (srchSfrrRow != null && srchSfrrRow.getAttribute("SeafarerId") != null) {
                    Integer seafarerId = (Integer) srchSfrrRow.getAttribute("SeafarerId");

                    try 
                    {
                        printTmpLogs("vwBatchRow :: "+vwBatchRow);
                        printTmpLogs("vwBatchRow.getAttribute(OeHeaderId) :: "+vwBatchRow.getAttribute("OeHeaderId"));
//                        printTmpLogs("vwSfrrRow :: "+vwSfrrRow);
//                        printTmpLogs("vwSfrrRow.getAttribute(EsiId) :: "+vwSfrrRow.getAttribute("EsiId"));

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    
                    if (vwBatchRow != null && vwBatchRow.getAttribute("OeHeaderId") != null) {
                        try {
                            retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.update_selected_seafarer(?,?,?,?,?)", new Object[] {
                                                             esiId,
                                                             vwBatchRow.getAttribute("OeHeaderId"), seafarerId,
                                                             getUserId(),
                                                             srchSfrrRow.getAttribute("QueryId")
                            });
                            
                            this.getDBTransaction().commit();

                            requestId = (BigDecimal) callDbFunction(Types.NUMERIC, "RMI_SICD_PUB.rmi_submit_ows_request(?,?,?)", new Object[] {
                                                             seafarerId,
                                                             esiId,
                                                             getUserId()
                            });
                            
                            System.out.println("rmi_submit_ows_request :: "+requestId);
                            
                            if(requestId != null && !(requestId.equals("-1")))
                            {
//                                vwSfrrRow.setAttribute("TransConcRequestId", requestId.intValue());
                                ADFContext.getCurrent().getSessionScope().put("P_CONC_REQUEST_ID", requestId.intValue());
                                
                                ViewObjectImpl concReqStatusVo = this.getConcRequestStatusView1();
                                concReqStatusVo.setNamedWhereClauseParam("pRequestId", requestId.intValue());
                                concReqStatusVo.executeQuery();
                                
                                Row[] concReqStatusRows = concReqStatusVo.getAllRowsInRange();
                                
                                if(concReqStatusRows.length> 0)
                                {
                                    Row r = concReqStatusRows[0];
                                    
                                    if ("P".equals(r.getAttribute("PhaseCode").toString()))
                                        ADFContext.getCurrent().getSessionScope().put("P_COLOR_CODE", "background:#95f995 !important;color:black;");
//                                        vwSfrrRow.setAttribute("TransColorCode", "background:#95f995 !important;color:black;");
                                    else if (!"CDX".contains(r.getAttribute("PhaseCode").toString()))
                                        ADFContext.getCurrent().getSessionScope().put("P_COLOR_CODE", "background:#95f995 !important;color:black;");
//                                        vwSfrrRow.setAttribute("TransColorCode", "background:#95f995 !important;color:black;");
                                    else if ("E".equals(r.getAttribute("StatusCode").toString()))
                                        ADFContext.getCurrent().getSessionScope().put("P_COLOR_CODE", "background:#f7a1a1 !important;color:black;");
//                                        vwSfrrRow.setAttribute("TransColorCode", "background:#f7a1a1 !important;color:black;");
                                    else
                                        ADFContext.getCurrent().getSessionScope().put("P_COLOR_CODE", null);
//                                        vwSfrrRow.setAttribute("TransColorCode", "");
                                }
                            }
                            
                        } catch (Exception e) {
                            e.printStackTrace();
                            AdfUtils.addFormattedFacesErrorMessage("There has been an error while updating Seafarer details : ",
                                                          e.getMessage(), FacesMessage.SEVERITY_ERROR);
                            return;
                        }
                    }

                    if (retVal != null && !(retVal.equalsIgnoreCase("Y"))) {
                        AdfUtils.addFormattedFacesErrorMessage("There has been an error while updating Seafarer ID.", "",
                                                      FacesMessage.SEVERITY_ERROR);
                    } else {
                        this.getDBTransaction().commit();
                        
                        System.out.println("esiId before filter :: "+esiId);
                        
                        Key custOrdKey = new Key(new Object[]{esiId});
                                              
                        System.out.println("custOrdKey :: "+custOrdKey); 
//                        System.out.println("vwSfrrRow.getAttribute(EsiId) :: "+vwSfrrRow.getAttribute("EsiId"));  
//                        printTmpLogs("vwSfrrRow.getAttribute(EsiId) :: "+vwSfrrRow.getAttribute("EsiId"));
                        printTmpLogs("esiId before filter :: :: "+vwBatchRow);              
                        printTmpLogs("custOrdKey :: "+custOrdKey);
                        
                        this.getRmiSeafarerView1().executeQuery();
                        
                        RowSetIterator rsi = this.getRmiSeafarerView1().createRowSetIterator(null);
                        Row row = rsi.findByKey(custOrdKey, 1)[0];
                        
                        this.getRmiSeafarerView1().setCurrentRow(row);
                        
                        System.out.println("row :: "+row);                        
                        System.out.println("CurrentRow :: "+getRmiSeafarerView1().getCurrentRow());
                        
                        ViewObjectImpl sicdSfrrVo = this.getSicdSeafarerView1();
                        sicdSfrrVo.setNamedWhereClauseParam("pSeafarerId", seafarerId);
                        sicdSfrrVo.executeQuery();

                        ViewObjectImpl ocVo = this.getOfficerCertificatesView1();
                        ocVo.setNamedWhereClauseParam("pOcSeafarerId", seafarerId);
                        ocVo.executeQuery();

                        ViewObjectImpl booksVo = this.getBooksView1();
                        booksVo.setNamedWhereClauseParam("pBookSeafarerId", seafarerId);
                        booksVo.executeQuery();
                    }
                }
            }
            else
                ADFContext.getCurrent().getPageFlowScope().put("P_USE_SELECTED_SEAFARER", "NotSelected");
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating selected seafarer details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    public String countSeafarerSelected()
    {
//        System.out.println("---1");
            ViewObjectImpl srchSfrrVo = this.getSearchSeafarerView1();
            int count = 0;
            RowSetIterator rit = srchSfrrVo.createRowSetIterator(null);
            while(rit.hasNext())
            {
//                    System.out.println("---2");
            Row row = rit.next();
            if(row.getAttribute("TransUseSelected") != null)
            {
//                    System.out.println("---3");
              if(row.getAttribute("TransUseSelected").toString().equalsIgnoreCase("true") || row.getAttribute("TransUseSelected").toString().equalsIgnoreCase("Y"))
              {
//                      System.out.println("---4");
                count++;  
                  }
                
                
                }
                
                
                }
        if(count > 1)
        {
           return "multiple"; 
            }
        return "ok";
        }
    
    /**
     * Method cancels the seafarer selection and returns back to previous screen.
     * @return String returns success or error.
     **/
    public String cancelSeafarerNotFound()
    {
        String retVal = "N";
        
        try 
        {
            ADFContext.getCurrent().getPageFlowScope().put("P_UPDATE_SEAFARER", null);
            Row srchSfrrRow = this.getSearchSeafarerView1().getCurrentRow();
            Row sfrrRow = this.getRmiSeafarerView1().getCurrentRow();
            Row batchRow = this.getRmiBatchView2().getCurrentRow();
            
            if ((batchRow != null && batchRow.getAttribute("OeHeaderId") != null)
                 && (sfrrRow != null && sfrrRow.getAttribute("EsiId") != null && 
                      sfrrRow.getAttribute("SeafarerId") != null && sfrrRow.getAttribute("EsiBatchId") != null)
                 && (srchSfrrRow != null && srchSfrrRow.getAttribute("QueryId") != null)) 
            {
                try {
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.CANCEL_SEAFARER_NOT_FOUND(?,?,?,?,?,?)", new Object[] {
                                                     sfrrRow.getAttribute("EsiId"),
                                                     sfrrRow.getAttribute("SeafarerId"),
                                                     sfrrRow.getAttribute("EsiBatchId"),
                                                     batchRow.getAttribute("OeHeaderId"),
                                                     getUserId(),
                                                     srchSfrrRow.getAttribute("QueryId")
                    });
                } catch (Exception e) {
                    e.printStackTrace();
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception on Cancel Seafarer not found." +
                                                     " Please contact your System Administrator." , 
                                                     "", FacesMessage.SEVERITY_ERROR);
                }

                if (!(retVal != null))
                    retVal = "N";
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception on Cancel Seafarer not found." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }        
        
        return retVal;
    }
    
    /**
     * Method unselects all seafarers other than the current selected one from list.
     **/
    public void unselectOtherSeafarers() 
    {
        try 
        {
            ViewObjectImpl srchSfrrVo = this.getSearchSeafarerView1();
            Row[] fr = srchSfrrVo.getFilteredRows("TransUseSelected", "true");
            
            System.out.println("selectedRows.length :: "+fr.length);

            for (Row r : fr) {
                r.setAttribute("TransUseSelected", "false");
                srchSfrrVo.executeQuery();
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while selecting this seafarer." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method fetches user Id of the login user from session.
     * @return Integer returns user of the login user.
     **/
    public Integer getUserId() 
    {
        try 
        {
            Object usrId = ADFContext.getCurrent().getSessionScope().get("UserId");
            return (Integer.parseInt(usrId != null ? usrId.toString() : "10245"));
            
        } catch (Exception nfe) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching user Id." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return -1;
    }
    
    /**
     * Method fetches certificates which are pending for verification.
     * @param filterType pass source from user's processing center or all processing centres (M,A).
     **/
    public void filterOcVerification(String filterType)
    {        
        try 
        {
            ViewObjectImpl vwSfrrVo = this.getRmiSeafarerView1();
            Row vwSfrrRow = vwSfrrVo.getCurrentRow();

            if (vwSfrrRow != null && vwSfrrRow.getAttribute("SeafarerId") != null) {
                Integer seafarerId = (Integer) vwSfrrRow.getAttribute("SeafarerId");

                if (filterType != null) {
                    if (filterType.equalsIgnoreCase("a")) {
                        ViewObjectImpl ocVerfctnVO = this.getOcVerificationOrdersView1();
                        ocVerfctnVO.setNamedWhereClauseParam("pSalesRepId", null);
                        ocVerfctnVO.setNamedWhereClauseParam("pSeafarerId", seafarerId);
                        ocVerfctnVO.executeQuery();

                        ViewObjectImpl ocWaitngVO = this.getOcWaitingResponseView1();
                        ocWaitngVO.setNamedWhereClauseParam("pUserId", null);
                        ocWaitngVO.setNamedWhereClauseParam("pSeafarerId", seafarerId);
                        ocWaitngVO.executeQuery();
                    } else {
                        ViewObjectImpl ocVerfctnVO = this.getOcVerificationOrdersView1();
                        ocVerfctnVO.setNamedWhereClauseParam("pSalesRepId", getUserId());
                        ocVerfctnVO.setNamedWhereClauseParam("pSeafarerId", seafarerId);
                        ocVerfctnVO.executeQuery();

                        ViewObjectImpl ocWaitngVO = this.getOcWaitingResponseView1();
                        ocWaitngVO.setNamedWhereClauseParam("pUserId", getUserId());
                        ocWaitngVO.setNamedWhereClauseParam("pSeafarerId", seafarerId);
                        ocWaitngVO.executeQuery();
                    }
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching certificates pending verification." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method fetches email notification details and set it on the popup.
     **/
    public void setEmailNotificationDetails()
    {
        try 
        {
            ViewObjectImpl dualVo = this.getDualView1();
            ViewObjectImpl ocCertVo = this.getOcVerificationOrdersView1();
            Row dualRow = (dualVo.getCurrentRow() != null) ? dualVo.getCurrentRow() : dualVo.first();
            Row ocCertRow = ocCertVo.getCurrentRow();

            BigDecimal retVal = new BigDecimal(-1);

            if (ocCertRow != null) {
                try {
                    retVal = (BigDecimal) callDbFunction(Types.NUMERIC, "RMI_SICD_PUB.verify_seafarer(?,?,?,?,?,?)", new Object[] {
                                                         ocCertRow.getAttribute("DocumentId"),
                                                         ocCertRow.getAttribute("SeafarerId"),
                                                         ocCertRow.getAttribute("TransCertVerification"),
                                                         ocCertRow.getAttribute("VerificationMethod"),
                                                         getUserId(), "U"
                                                         
                    });
                } catch (Exception e) {
                    e.printStackTrace();
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching email notification details." +
                                                     " Please contact your System Administrator." , 
                                                     "", FacesMessage.SEVERITY_ERROR);
                }
            }

            if (retVal != null && !(retVal.toString().equalsIgnoreCase("-1"))) {

                ViewObjectImpl vsslVo = this.getVsslInspCommView1();
                vsslVo.setNamedWhereClauseParam("pCommId", retVal.intValue());
                vsslVo.executeQuery();

                Row[] vsslRows = vsslVo.getAllRowsInRange();

                if (vsslRows.length > 0) {
                    Row r = vsslRows[0];
                                        
                    if(r != null)
                    {
//                        System.out.println("TransMailFrom"+ r.getAttribute("EmailFrom"));
//                        System.out.println("TransMailTo"+ r.getAttribute("SentTo"));
//                        System.out.println("TransMailCc"+ r.getAttribute("Cc"));
//                        System.out.println("TransMailSubject"+ r.getAttribute("Regarding"));
//                        System.out.println("TransMailMessage"+ r.getAttribute("Message"));
                        
                        dualRow.setAttribute("TransMailFrom", r.getAttribute("EmailFrom"));
                        dualRow.setAttribute("TransMailTo", r.getAttribute("SentTo"));
                        dualRow.setAttribute("TransMailCc", r.getAttribute("Cc"));
                        dualRow.setAttribute("TransMailSubject", r.getAttribute("Regarding"));
                        dualRow.setAttribute("TransMailMessage", r.getAttribute("Message"));
                    }
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching email notification details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method fetches email notification details and set it on the popup.
     **/   
    public void setEmailNotificationWaiting()
    {
        try 
        {
            ViewObjectImpl dualVo = this.getDualView1();
            ViewObjectImpl ocCertVo = this.getOcWaitingResponseView1();
            Row dualRow = (dualVo.getCurrentRow() != null) ? dualVo.getCurrentRow() : dualVo.first();
            Row ocCertRow = ocCertVo.getCurrentRow();

            BigDecimal retVal = new BigDecimal(-1);

            if (ocCertRow != null) {
                try {
                    retVal = (BigDecimal) callDbFunction(Types.NUMERIC, "RMI_SICD_PUB.verify_seafarer(?,?,?,?,?,?)", new Object[] {
                                                      ocCertRow.getAttribute("DocumentId"),
                                                      ocCertRow.getAttribute("SeafarerId"),
                                                      ocCertRow.getAttribute("TransCertVerifyWaiting"),
                                                      ocCertRow.getAttribute("VerificationMethod"), 
                                                      getUserId(), "W"
                    });
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching email notification details." +
                                                     " Please contact your System Administrator." , 
                                                     "", FacesMessage.SEVERITY_ERROR);
                }
            }

            if (retVal != null && !(retVal.toString().equalsIgnoreCase("-1"))) {
                ViewObjectImpl vsslVo = this.getVsslInspCommView1();
                vsslVo.setNamedWhereClauseParam("pCommId", retVal.intValue());
                vsslVo.executeQuery();

                Row[] vsslRows = vsslVo.getAllRowsInRange();

                if (vsslRows.length > 0) {
                    Row r = vsslRows[0];
                    //                dualRow.setAttribute("TransMailFrom", getUserEmailId((Integer) dualRow.getAttribute("TransUserId")));
                    dualRow.setAttribute("TransMailFrom", r.getAttribute("EmailFrom"));
                    dualRow.setAttribute("TransMailTo", r.getAttribute("SentTo"));
                    dualRow.setAttribute("TransMailCc", r.getAttribute("Cc"));
                    dualRow.setAttribute("TransMailSubject", r.getAttribute("Regarding"));
                    dualRow.setAttribute("TransMailMessage", r.getAttribute("Message"));
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching email notification details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method fetches email ID of logged in user.
     * @param userId pass current login user ID.
     * @return String returns email ID of logged in user.
     **/
    public String getUserEmailId(Integer userId)
    {
        try 
        {
            if (userId != null) {
                ViewObjectImpl procsCntrVo = this.getProcessingCenterView1();
                procsCntrVo.setNamedWhereClauseParam("pUserId", userId);
                procsCntrVo.executeQuery();

                Row[] frRows = procsCntrVo.getAllRowsInRange();

                if (frRows.length > 0 && frRows[0].getAttribute("EmailId") != null) {
                    return (frRows[0].getAttribute("EmailId").toString());
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching user email credentials." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return null;
    }
    
    /**
     * Method sets default values for required attributes when new certificate line is created.
     * @param documentType pass certificate type OC/SQC/BOOK.
     **/
    public void setDefaultValuesOnCreate(String documentType)
    {
        try {
            Row docRow;

            if (documentType != null) {
                if (documentType.equalsIgnoreCase("oc") && this.getOfficerCertificatesView1().getCurrentRow() != null) {
                    docRow = this.getOfficerCertificatesView1().getCurrentRow();
                    docRow.setAttribute("DocumentType", "OC");
                } else if (documentType.equalsIgnoreCase("books") && this.getBooksView1().getCurrentRow() != null) {
                    docRow = this.getBooksView1().getCurrentRow();
                    docRow.setAttribute("DocumentType", "BOOK");
                } else if (documentType.equalsIgnoreCase("sqc") &&
                           this.getSpecialQualificationsView1().getCurrentRow() != null) {
                    docRow = this.getSpecialQualificationsView1().getCurrentRow();
                    docRow.setAttribute("DocumentType", "SQC");
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while creating new line." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method updates certificate status as selected by user.
     * @param docType pass certificate status type i.e. U-Unverified/W-Waiting
     * @return String returns success or error.
     **/
    public String updateDocVerifiedStatus(String docType)
    {
        try {
            Row docRow;

            if (docType != null && docType.equalsIgnoreCase("U"))
                docRow = this.getOcVerificationOrdersView1().getCurrentRow();
            else
                docRow = this.getOcWaitingResponseView1().getCurrentRow();

            String retVal = "N";

            if (docRow != null) {
                try {
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.update_doc_status(?,?,?,?,?,?)", new Object[] {
                                                     docRow.getAttribute("DocumentId"),
                                                     docRow.getAttribute("SeafarerId"),
                                                     ((docType.equalsIgnoreCase("U")) ?
                                                      docRow.getAttribute("TransCertVerification") :
                                                      docRow.getAttribute("TransCertVerifyWaiting")),
                                                     ((docType.equalsIgnoreCase("U")) ?
                                                      docRow.getAttribute("TransCancelCert") :
                                                      docRow.getAttribute("TransCancelCertWaiting")),
                                                     docRow.getAttribute("VerificationMethod"), getUserId()
                    });
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating certificate status." +
                                                     " Please contact your System Administrator." , 
                                                     "", FacesMessage.SEVERITY_ERROR);
                }
            }

            if (retVal != null && retVal.length() > 0) {
                if (retVal.equalsIgnoreCase("u")) {
                    AdfUtils.addFormattedFacesErrorMessage("Please upload Verification Document first !", null,
                                                  FacesMessage.SEVERITY_ERROR);
                }

                this.getDBTransaction().commit();
                this.filterOcVerification("M");
                return retVal;
            } else
                return "N";
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating certificate status." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    
    /**
     * Method fetches COC file name for selected certificate.
     * @param colType pass what is required file name/file url.
     * @param docType pass certificate status type i.e. U-Unverified/W-Waiting
     * @return String returns success or error.
     **/
    public String getCocFileName(String colType, String docType)
    {
        try {
            Row docRow;

            if (docType != null && docType.equalsIgnoreCase("U"))
                docRow = this.getOcVerificationOrdersView1().getCurrentRow();
            else
                docRow = this.getOcWaitingResponseView1().getCurrentRow();

            String retVal = "N";

            if (docRow != null) {
                try {
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.fetch_coc_url(?,?)", new Object[] {
                                                     docRow.getAttribute("SeafarerId"),
                                                     docRow.getAttribute("DocumentId")
                    });
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching COC file name." +
                                                     " Please contact your System Administrator." , 
                                                     "", FacesMessage.SEVERITY_ERROR);
                }
            }

            if (retVal != null && retVal.length() > 0) {
                String[] col = retVal.split("---");

                if (colType != null && colType.equalsIgnoreCase("fileNm"))
                    return col[1].trim();
                else
                    return col[0].trim();
            } else
                return "N";
            
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching COC file name." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }


    /**
     * Method sends email notification for the selected certificate.
     * @param docType pass certificate status type i.e. U-Unverified/W-Waiting
     * @return String returns success or error.
     **/
    public String sendEmailNotification(String docType)
    {           
        String retVal = "N";
           
        try 
        {
            Row vsslRow = this.getVsslInspCommView1().first();
            Row dualRow = this.getDualView1().getCurrentRow();
            if (vsslRow != null && dualRow != null) {
                try {
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.send_email_notification(?,?,?,?,?,?)", new Object[] {
                                                     vsslRow.getAttribute("CommId"),
                                                     dualRow.getAttribute("TransMailTo"),
                                                     dualRow.getAttribute("TransMailFrom"),
                                                     dualRow.getAttribute("TransMailCc"),
                                                     dualRow.getAttribute("TransMailSubject"),
                                                     dualRow.getAttribute("TransMailMessage")
                    });
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while sending email notification." +
                                                     " Please contact your System Administrator." , 
                                                     "", FacesMessage.SEVERITY_ERROR);
                }
            }

            if (retVal != null && retVal.length() > 0 && retVal.equalsIgnoreCase("Y")) {
                this.getDBTransaction().commit();
                this.filterOcVerification("M");
                return retVal;
            } else
                return "N";
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while sending email notification." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }

    /**
     * Method uploads document selected by user.
     * @param param1 pass upload type eg. SICD/CONSENT/etc.
     * @param param2 pass object name/table name.
     * @param param3 pass column name.
     * @param fileName pass the file name selected by user.
     * @param docType pass certificate status type i.e. U-Unverified/W-Waiting/OC-Officers Certificate/SQC-Special Qualifications
     * @return String returns uploaded file path on server.
     **/
    public String uploadDocument(String param1, String param2, String param3, String fileName, String docType)
    {        
        String stat = null;
            
        try 
        {
            String[] ret = null;
            Row docRow;

            if (docType != null && docType.equalsIgnoreCase("U"))
                docRow = this.getOcVerificationOrdersView1().getCurrentRow();
            else
                docRow = this.getOcWaitingResponseView1().getCurrentRow();

            if (docRow != null) {
                stat = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.upload_coc(?,?,?,?)", new Object[] {
                                               docRow.getAttribute("SeafarerId"), docRow.getAttribute("DocumentId"),
                                               docRow.getAttribute("VerificationEdocId"), fileName
                });

                //            stat = callDbFunction(Types.INTEGER, "IRI_EDOCS_PKG.GET_CATEGORY_ID(?,?,?)", new Object[]
                //                                  {param1, param2, param3});

                if (stat != null) {
                    this.getDBTransaction().commit();

                    if (docType != null && docType.equalsIgnoreCase("U"))
                        this.getOcVerificationOrdersView1().executeQuery();
                    else
                        this.getOcWaitingResponseView1().executeQuery();

                    //                ret = callProceduregetFileName(fileName,docRow.getAttribute("SeafarerId").toString(),stat.toString());
                    //                return ret[0];
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while uploading document." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        
        return stat;
    }
    
    /**
     * Method generates new edocID for the newly uploaded files.
     * @param filename pass the file name selected by user.
     * @param seafarer pass seafarerID of the selected seafarer.
     * @param categoryId pass category ID eg. SICD/CONSENT/etc.
     * @return String[] returns array of errorCode and errorMessage.
     **/
    public String[] callProceduregetFileName(String filename, String seafarer, String categoryId) {
        CallableStatement st = null;
        String[] ret = { null, null };

        try {
            String sql = "begin ?:=iri_exsicd_web.get_new_edoc_filename(?,?,?,?,?,?); end;";
            st = getDBTransaction().createCallableStatement(sql, this.getDBTransaction().DEFAULT);
            st.setObject(2, categoryId);
            st.setObject(3, seafarer);
            st.setObject(4, filename);
            st.setObject(5, "Y");
            st.registerOutParameter(1, Types.VARCHAR);
            st.registerOutParameter(6, Types.NUMERIC);
            st.registerOutParameter(7, Types.VARCHAR);
            st.execute();
            ret[0] = st.getObject(1).toString();
            ret[1] = st.getObject(6).toString();
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
        return ret;
    }
    
    /**
     * Method rejects the batch which esiBatchId matches the passed parameter.
     * @param esiBatchId pass EsiBatchId of the batch to be rejected.
     **/
    public void rejectBatch(Object esiBatchId)
    {
        try 
        {
            if (esiBatchId != null) {
                ViewObject wfView = getRmiWorkflowView1();
                wfView.setNamedWhereClauseParam("pBatchId", Integer.parseInt(esiBatchId.toString()));
                wfView.executeQuery();
                
                RowSetIterator createRowSetIterator = wfView.createRowSetIterator(null);
                while (createRowSetIterator.hasNext()) {
                    Row row = createRowSetIterator.next();
                    row.setAttribute("LastUpdatedRow", "N");
                }
                createRowSetIterator.closeRowSetIterator();
                this.getDBTransaction().commit();
            }
        } catch (Exception nfe) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while rejecting batch." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method approves/rejects the selected seafarer based on some checks.
     **/
    public void approveSeafarer()
    {
        try 
        {
            Row seafarer;
            seafarer = this.getRmiSeafarerView1().getCurrentRow();
            Row batchRow = this.getRmiBatchView2().getCurrentRow();
            
            if (seafarer != null && batchRow != null) 
            {
                this.getDBTransaction().postChanges();    
                
                try {
                    String retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.reject_seafarer_grading(?,?,?,?,?)", new Object[] {
                                                            seafarer.getAttribute("SeafarerId"),
                                                            seafarer.getAttribute("EsiBatchId"),
                                                            seafarer.getAttribute("EsiId"),
                                                            ADFContext.getCurrent().getSessionScope().get("UserId"),
                                                            batchRow.getAttribute("OeHeaderId")
                    });
                    
                    if (null != retVal && retVal.equalsIgnoreCase("Y"))
                    {
                        this.getDBTransaction().commit();
                        this.getRmiSeafarerView1().executeQuery();
                        this.getRmiSeafarerView1().setCurrentRow(seafarer);
                    }                    
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage(e.getMessage(), null, FacesMessage.SEVERITY_ERROR);

                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while approving seafarer." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }           
    }
    
    /**
     * Method approves/rejects the selected seafarer based on some checks by evaluator.
     **/
    public String approveSeafarerByEval()
    {
        String retVal = null;
        try 
        {
            Row seafarer;
            seafarer = this.getRmiSeafarerView1().getCurrentRow();
            Row batchRow = (this.getRmiBatchView2().getCurrentRow()) != null 
                            ? this.getRmiBatchView2().getCurrentRow() 
                            : this.getRmiBatchView2().first();
            
            if (seafarer != null && batchRow != null) {
//                seafarer.setAttribute("SeafarerGrdStatus", "Approved");
//                seafarer.setAttribute("BookGrdStatus", "Approved");
                this.getDBTransaction().postChanges();
                try {
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.approve_seafarer(?,?,?,?,?)", new Object[] {
                                                     seafarer.getAttribute("SeafarerId"),
                                                     seafarer.getAttribute("EsiBatchId"),
                                                     seafarer.getAttribute("EsiId"),
                                                     getUserId(),
                                                     batchRow.getAttribute("OeHeaderId")
                    });
                    
                    System.out.println("retVal :: "+retVal);
                    
                    if (null != retVal && retVal.equalsIgnoreCase("Y"))
                    {
                        this.getDBTransaction().commit();
                        this.getRmiSeafarerView1().executeQuery();
                        this.getRmiSeafarerView1().setCurrentRow(seafarer);
                        
                        String processOrderRetVal = processOrder();
                        
                        if(processOrderRetVal != null && processOrderRetVal.equalsIgnoreCase("E"))
                            return "PO";                        
                    }
                    else
                    {
                        this.getDBTransaction().rollback();                       
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    AdfUtils.addFormattedFacesErrorMessage(e.getMessage(), null, FacesMessage.SEVERITY_ERROR);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while approving seafarer." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
       return retVal; 
    }

    /**
     * Method fetches TC status of the selected seafarer.
     **/
    public String callProcedure()
    {
        try 
        {
            Connection con = null;
            CallableStatement st = null;
            PreparedStatement ps = null;
            DBTransaction dbTransaction = null;
            Row batchId;
            batchId = this.getRmiBatchView2().getCurrentRow();
            Row sfrrRow = this.getRmiSeafarerView1().getCurrentRow();
            try {
                dbTransaction = (DBTransaction) this.getTransaction();
                ps = dbTransaction.createPreparedStatement("select * from dual", 0);
                ps.execute();
                con = ps.getConnection();
                st = con.prepareCall("{? = call RMI_SICD_PUB.get_seafarer_wc_status(?)}");
                st.registerOutParameter(1, Types.VARCHAR);
                Integer i = null;               
                
                if(sfrrRow != null && sfrrRow.getAttribute("SeafarerId") != null) {
                    i = (Integer) sfrrRow.getAttribute("SeafarerId");
                }
                else {
                    Row ar = this.getRmiSeafarerView1().first();
                    i = (Integer) ar.getAttribute("SeafarerId");
                }
                st.setInt(2, i);
                st.execute();

                return st.getString(1);
            } catch (Exception e) {
//                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching TC details." +
//                                                 " Please contact your System Administrator." , 
//                                                 "", FacesMessage.SEVERITY_ERROR);
            }
        } catch (Exception e) {
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching TC details." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "NO_RECORD";
    }
    
    /**
     * Method checks if any of the mandatory value is entered or not on search form.
     * @return String returns Y for entered, N for not entered.
     **/
    public String filterValuesCheck()
    {
        try 
        {
            ViewObjectImpl dualEoRo = this.getDualEnterOrdersView1();
            Row dualEoRow = dualEoRo.getCurrentRow();

            if (dualEoRow != null) {
                if (dualEoRow.getAttribute("TransCustomerId") != null)
                    return "Y";
                else if (dualEoRow.getAttribute("TransPoNumber") != null)
                    return "Y";
                else if (dualEoRow.getAttribute("TransOrderNumber") != null)
                    return "Y";
                else if (dualEoRow.getAttribute("TransBatchName") != null)
                    return "Y";
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching order details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    
    /**
     * Method fetches order details queried from search form.
     **/
    public void searchOrder()
    {
        try 
        {
            ViewObjectImpl dualEoRo = this.getDualEnterOrdersView1();
            Row dualEoRow = dualEoRo.getCurrentRow();
            String batchRowsCount = "Y";
            Integer headerId = null;

            if (dualEoRow != null) 
            {
                if(dualEoRow.getAttribute("TransBatchName") != null)
                {
                    Row[] batchRows = this.getRmiBatchView1().getFilteredRows("BatchName", dualEoRow.getAttribute("TransBatchName"));
                    
                    if(batchRows.length > 0 && batchRows[0].getAttribute("OeHeaderId") != null)
                        headerId = Integer.parseInt(batchRows[0].getAttribute("OeHeaderId").toString());
                    else
                        batchRowsCount = "N";
                }
                
                if(batchRowsCount.equalsIgnoreCase("Y"))
                {
                    ViewObjectImpl eoHdrVo = this.getOrderHeaderView1();
                    eoHdrVo.setNamedWhereClauseParam("pCustomer", dualEoRow.getAttribute("TransCustomerId"));
                    eoHdrVo.setNamedWhereClauseParam("pCustomerPo", dualEoRow.getAttribute("TransPoNumber"));
                    eoHdrVo.setNamedWhereClauseParam("pOrderNumber", dualEoRow.getAttribute("TransOrderNumber"));
                    eoHdrVo.setNamedWhereClauseParam("pHeaderId", headerId);
                    eoHdrVo.executeQuery();
                    
                    if (eoHdrVo.getAllRowsInRange().length > 0 && eoHdrVo.getAllRowsInRange()[0] != null) {
                        Row eoHdrRow = eoHdrVo.getAllRowsInRange()[0];
                        
                        dualEoRow.setAttribute("TransCustomerId", eoHdrRow.getAttribute("SoldToOrgId"));
                        dualEoRow.setAttribute("TransPoNumber", eoHdrRow.getAttribute("CustPoNumber"));
                        dualEoRow.setAttribute("TransOrderNumber", eoHdrRow.getAttribute("OrderNumber"));
                        
                        ViewObjectImpl batchDtlVo = this.getBatchDetailsView1();
                        batchDtlVo.setNamedWhereClauseParam("pHeaderId", eoHdrRow.getAttribute("HeaderId"));
                        batchDtlVo.setNamedWhereClauseParam("pBatchId", null);
                        batchDtlVo.executeQuery();
                        
                        Row[] batchRows = batchDtlVo.getAllRowsInRange();                        
                        
                        if(batchRows.length > 0 && batchRows[0].getAttribute("BatchName") != null)
                        {
                            dualEoRow.setAttribute("TransBatchName", batchRows[0].getAttribute("BatchName"));
//                            ADFContext.getCurrent().getSessionScope().put("P_BATCH_NAME", batchRows[0].getAttribute("BatchName"));
                            ADFContext.getCurrent().getPageFlowScope().put("P_BATCH_NAME", batchRows[0].getAttribute("BatchName"));
                        }
                        
//                        ADFContext.getCurrent().getSessionScope().put("P_CUSTOMER_ID", eoHdrRow.getAttribute("SoldToOrgId"));                    
//                        ADFContext.getCurrent().getSessionScope().put("P_PO_NUMBER", eoHdrRow.getAttribute("CustPoNumber"));                    
//                        ADFContext.getCurrent().getSessionScope().put("P_ORDER_NUMBER", eoHdrRow.getAttribute("OrderNumber"));                        
                        ADFContext.getCurrent().getPageFlowScope().put("P_CUSTOMER_ID", eoHdrRow.getAttribute("SoldToOrgId"));                    
                        ADFContext.getCurrent().getPageFlowScope().put("P_PO_NUMBER", eoHdrRow.getAttribute("CustPoNumber"));                    
                        ADFContext.getCurrent().getPageFlowScope().put("P_ORDER_NUMBER", eoHdrRow.getAttribute("OrderNumber"));
                    }
                    else
                    {
                        AdfUtils.addFormattedFacesErrorMessage("No match found with given search parameters." +
                                                         "" , 
                                                         "", FacesMessage.SEVERITY_ERROR);
                    }
                }
                else
                {
                    AdfUtils.addFormattedFacesErrorMessage("No match found with given search parameters." +
                                                     "" , 
                                                     "", FacesMessage.SEVERITY_ERROR);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching order details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }        
    }
    
    /**
     * Method resets all fields on order search form.
     **/
    public void resetOrderFilter()
    {
        try 
        {
            ViewObjectImpl eoHdrVo = this.getOrderHeaderView1();
            eoHdrVo.setNamedWhereClauseParam("pCustomer", -1);
            eoHdrVo.setNamedWhereClauseParam("pCustomerPo", null);
            eoHdrVo.setNamedWhereClauseParam("pOrderNumber", -1);
            eoHdrVo.setNamedWhereClauseParam("pHeaderId", -1);
            eoHdrVo.executeQuery();

            this.getDualEnterOrdersView1().executeQuery();
            
//            ADFContext.getCurrent().getSessionScope().put("P_CUSTOMER_ID", null);                    
//            ADFContext.getCurrent().getSessionScope().put("P_PO_NUMBER", null);                    
//            ADFContext.getCurrent().getSessionScope().put("P_ORDER_NUMBER", null);
//            ADFContext.getCurrent().getSessionScope().put("P_BATCH_NAME", null);
            
            ADFContext.getCurrent().getPageFlowScope().put("P_CUSTOMER_ID", null);                    
            ADFContext.getCurrent().getPageFlowScope().put("P_PO_NUMBER", null);                    
            ADFContext.getCurrent().getPageFlowScope().put("P_ORDER_NUMBER", null);
            ADFContext.getCurrent().getPageFlowScope().put("P_BATCH_NAME", null);
//            ADFContext.getCurrent().getSessionScope().put("RoleName", "PROCESSOR - II");
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while resetting search form." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method fetches seafarer details queried from search form.
     **/
    public void searchEditSeafarers()
    {
        try 
        {            
//            ADFContext.getCurrent().getSessionScope().put("UserId", 10245);
//            System.out.println("sessionScope.UserId :: "+ADFContext.getCurrent().getSessionScope().get("UserId"));
            ViewObjectImpl dualEditSfrrVo = this.getDualEditSeafarersView1();
            Row dualEditSfrrRow = dualEditSfrrVo.getCurrentRow();

            if (dualEditSfrrRow != null) {
                ViewObjectImpl editSfrrVo = this.getEditSeafarersView1();
                editSfrrVo.setNamedWhereClauseParam("pBirthDate", dualEditSfrrRow.getAttribute("TransBirthDate"));
                editSfrrVo.setNamedWhereClauseParam("pFirstName", dualEditSfrrRow.getAttribute("TransFirstName"));
                editSfrrVo.setNamedWhereClauseParam("pLastName", dualEditSfrrRow.getAttribute("TransLastName"));
                //            editSfrrVo.setNamedWhereClauseParam("pNationality", dualEditSfrrRow.getAttribute("TransNationalityCode"));
                editSfrrVo.setNamedWhereClauseParam("pSeafarerId", dualEditSfrrRow.getAttribute("TransSeafarerId"));
                editSfrrVo.executeQuery();
                
                String seafarerStatus = fetchSelectedSeafarerStatus(); 
                
                if(seafarerStatus != null)
                {
                    if (seafarerStatus.toString().equalsIgnoreCase("Suspended") ||
                        seafarerStatus.toString().equalsIgnoreCase("Deceased"))
                        AdfUtils.addFormattedFacesErrorMessage("Seafarer FIN record status is "+seafarerStatus, "",
                                                                   FacesMessage.SEVERITY_WARN);
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching seafarers details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method resets all fields on seafarer search form.
     **/
    public void resetSearchEditSeafarers()
    {
        try {
            ViewObjectImpl editSfrrVo = this.getEditSeafarersView1();
            editSfrrVo.setNamedWhereClauseParam("pBirthDate", null);
            editSfrrVo.setNamedWhereClauseParam("pFirstName", null);
            editSfrrVo.setNamedWhereClauseParam("pLastName", null);
            editSfrrVo.setNamedWhereClauseParam("pNationality", null);
            editSfrrVo.setNamedWhereClauseParam("pSeafarerId", -1);
            editSfrrVo.executeQuery();
            this.getDualEditSeafarersView1().executeQuery();
            
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while resetting search form." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method fetches seafarer documents details of the seafarer queried from search form.
     **/
    public void filterEditDocumentsVO()
    {
        try 
        {
            Object calledFrmTf = RequestContext.getCurrentInstance().getPageFlowScope().get("P_CALLED_FROM_TF");

            Row editSfrrFrRow = null;
            
            if(calledFrmTf != null && calledFrmTf.toString().equalsIgnoreCase("VL")) {            
            }
            if (calledFrmTf != null && calledFrmTf.toString().equalsIgnoreCase("VS")) {
//                ViewObjectImpl vwSfrrVo = this.getRmiSeafarerView1();
//                editSfrrFrRow = vwSfrrVo.getCurrentRow();
            }
            else if (calledFrmTf != null && calledFrmTf.toString().equalsIgnoreCase("SO")) {
                ViewObjectImpl vwSfrrVo = this.getOrderLinesView1();
                editSfrrFrRow = vwSfrrVo.getCurrentRow();
            }else {
                ViewObjectImpl editSfrrVo = this.getEditSeafarersView1();
                editSfrrFrRow = editSfrrVo.getCurrentRow();
            }
            
            System.out.println("calledFrmTf :: "+calledFrmTf);            
            System.out.println("editSfrrFrRow :: "+editSfrrFrRow);

            if (editSfrrFrRow != null) {
                Row srchSfrrRow = editSfrrFrRow;

                if (srchSfrrRow != null) {
                    Integer seafarerId = null;


                    if (calledFrmTf != null && calledFrmTf.toString().equalsIgnoreCase("VS"))
                        seafarerId = (Integer) srchSfrrRow.getAttribute("SeafarerId");
                    else if (calledFrmTf != null && calledFrmTf.toString().equalsIgnoreCase("SO"))
                        seafarerId = (Integer) srchSfrrRow.getAttribute("SeafarerId");
                    else
                        seafarerId = (Integer) srchSfrrRow.getAttribute("SeafarerId");

//                    System.out.println("seafarerId :: "+seafarerId);

                    if (seafarerId != null) {
                        ViewObjectImpl sicdSfrrVo = this.getSicdSeafarerView1();
                        sicdSfrrVo.setNamedWhereClauseParam("pSeafarerId", seafarerId);
                        sicdSfrrVo.executeQuery();

                        ViewObjectImpl ocVo = this.getOfficerCertificatesView1();
                        ocVo.setNamedWhereClauseParam("pOcSeafarerId", seafarerId);
                        ocVo.executeQuery();

                        ViewObjectImpl booksVo = this.getBooksView1();
                        booksVo.setNamedWhereClauseParam("pBookSeafarerId", seafarerId);
                        booksVo.executeQuery();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching seafarer certificates details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method rejects selected seafarer based on some checks.
     **/
    public void processTC()
    {
        try
        {
            Row batch_id;
            batch_id = this.getRmiBatchView2().getCurrentRow();
            rejectBatch(batch_id.getAttribute("EsiBatchId"));
            
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while applying hold on seafarer." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method sends batch to QA Processor's queue for further processing.
     * @param retVal pass return value of the check performed by method.
     **/
    public void processEVAL(String retVal)
    {
        try
        {
            if(retVal != null)
            {
                int count = 0;
                Row batch_id1;
                batch_id1 = this.getRmiBatchView2().getCurrentRow();            
                ViewObject wfView = getRmiWorkflowView1();
                wfView.setNamedWhereClauseParam("pBatchId", Integer.parseInt(batch_id1.getAttribute("EsiBatchId").toString()));
                wfView.executeQuery();

                //            rejectBatch(batch_id1.getAttribute("EsiBatchId"));
                
                RowSetIterator createRowSetIterator = wfView.createRowSetIterator(null);
                while (createRowSetIterator.hasNext()) {
                    Row row = createRowSetIterator.next();
                    if(row.getAttribute("BatchStatus").toString().equalsIgnoreCase("Pending_QA")
                        && row.getAttribute("LastUpdatedRow").toString().equalsIgnoreCase("Y")){
                       count++;
                    }
                }
                createRowSetIterator.reset();
                
                if(count == 0)
                {
                    Row createRow = wfView.createRow();
                    createRow.setAttribute("EsiBatchId", batch_id1.getAttribute("EsiBatchId"));
                    createRow.setAttribute("BatchStatus", "Pending_QA");
                    createRow.setAttribute("LastUpdatedRow", "Y");
                    wfView.insertRow(createRow);
                }
                
                if(retVal.equalsIgnoreCase("all"))
                {
                    while (createRowSetIterator.hasNext()) {
                        Row row = createRowSetIterator.next();
                        if (row.getAttribute("BatchStatus").toString().equalsIgnoreCase("Pending_MTC")){
                            row.setAttribute("LastUpdatedRow", "N");
                        }
                    }    
                }

                retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.rmi_upd_seafarer_status_qa(?)", new Object[] {
                                                 batch_id1.getAttribute("EsiBatchId") });
                this.getDBTransaction().commit();
                createRowSetIterator.closeRowSetIterator();    
            }

        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while processing this batch." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method approves CRA document for the selected seafarer.
     * @param docid pass document unique Id i.e. ESDI_ID which is to be approved.
     * @param esiID pass seafarer unique Id i.e. ESI_ID.
     **/
    public void approveCRA(String docid, String esiID)
    {
        try
        {   
            this.getDBTransaction().postChanges();
//            RowSetIterator docRsi = this.getRmiSeafarerDocsOcView1().createRowSetIterator(null);
//            while(docRsi.hasNext())
//            {
//            }
//            docRsi.closeRowSetIterator();
            
                Row r = this.getRmiSeafarerDocsOcView1().getCurrentRow();
                
                if(r != null && r.getAttribute("CraRequired") != null && 
                    (r.getAttribute("CraRequired").toString().equalsIgnoreCase("Y") ||
                    r.getAttribute("CraRequired").toString().equalsIgnoreCase("true"))
                    && !(r.getAttribute("CraApprovedFlag") != null))
                {
                    try 
                    {                
                        String retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.approve_cra_doc(?,?,?,?,?)", 
                                                              new Object[]{"Y", 
                                                                           r.getAttribute("EsdiId"), 
                                                                           null,
                                                                           r.getAttribute("EsiId"),
                                                                           getUserId()});
                           if( null!=retVal && retVal.equalsIgnoreCase("Y"))
                           {
                               this.getDBTransaction().commit();
                               this.getRmiSeafarerDocsOcView1().executeQuery();
                           }
                    } catch (Exception e) {
                        AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while approving CRA." +
                                                         " Please contact your System Administrator." , 
                                                         "", FacesMessage.SEVERITY_ERROR);
                    }
                }
            
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while approving CRA." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }  
    }
    
    /**
     * Method sends email notofication whenever the selected seafarer is rejected.
     **/
    public void sendmail()
     {
       try 
       {
            CallableStatement st = null;
            Row seafarer;
            seafarer = this.getRmiSeafarerView1().getCurrentRow();
            try {
                String sql = "BEGIN RMI_SICD_PUB.send_rejection_notice(?,?);END;";
                st = getDBTransaction().createCallableStatement(sql, 0);
                //System.out.println("EsiBatchId->"+seafarer.getAttribute("EsiBatchId"));
                //System.out.println("EsiId->"+seafarer.getAttribute("EsiId"));
                st.setObject(1, seafarer.getAttribute("EsiBatchId")); //MAIL SERVER
                st.setObject(2, seafarer.getAttribute("EsiId")); //SENDER
                //         st.setObject(3, to);//TO
                //         st.setObject(4, cc);//CC
                //         st.setObject(5, bcc);//BCC

                //         st.setObject(6, subject);//SUBJECT
                //         st.setObject(7, body);//BODY
                //         st.registerOutParameter(8, Types.VARCHAR);//OUT PARAM ERROR
                st.execute();
            } catch (SQLException e) {
                throw new JboException(e.getMessage());

            } finally {
                if (st != null) {
                    try {
                        st.close();
                    } catch (SQLException e) {
                        AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while sending email notification." +
                                                         " Please contact your System Administrator." , 
                                                         "", FacesMessage.SEVERITY_ERROR);
                    }
                }
            }
        } catch (Exception je) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while sending email notification." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
     }
    
    /**
     * Method calls/executes DB function passed as paramater.
     * @param sqlReturnType pass return type of the passed function.
     * @param stmt pass DB function name with no. of arguments.
     * @param bindVars pass array of Object type which contains required parameters.
     * @return Object returns function output returned by database.
     **/
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
                CallableStatement cst = null;
                try {
                    //Creating sql statement
                    cst = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                    //Register dataType for return value
                    cst.registerOutParameter(1, sqlReturnType);
                    //Pass input parameters value
                    if (bindVars != null) {
                        for (int z = 0; z < bindVars.length; z++) {
                            cst.setObject(z + 2, bindVars[z]);
                        }
                    }
                    cst.executeUpdate();
                    //Finally get returned value
                    return cst.getObject(1);
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                } finally {
                    if (cst != null) {
                        try {
                            cst.close();
                        } catch (SQLException e) {
                            throw new JboException(e.getMessage());
                        }
                    }
                }
            }
   
    /**
     * Method fetches selected batch name.
     * @return String returns selected batch name.
     **/
    public String getCurrentBatchName()
    {
        try 
        {
            Row sfrrRow = this.getRmiSeafarerView1().getCurrentRow();

            if (sfrrRow != null && sfrrRow.getAttribute("EsiBatchId") != null) {
                ViewObjectImpl batchVo = this.getRmiBatchView1();
                batchVo.setNamedWhereClauseParam("pEsiBatchId", sfrrRow.getAttribute("EsiBatchId"));
                batchVo.executeQuery();

                Row[] batchRow = batchVo.getAllRowsInRange();

                if (batchRow != null && batchRow[0].getAttribute("BatchName") != null) {
                    return batchRow[0].getAttribute("BatchName").toString();
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching batch name." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        
        return null;
    }
    
    /**
     * Method fetches selected batch's Work Order number.
     * @return String returns selected batch's Work Order number.
     **/
    public String getCurrentWoNumber()
    {
        try 
        {
            ViewObjectImpl sfrrVo = this.getRmiSeafarerView1();
            Row sfrrRow = sfrrVo.getCurrentRow();

            if (sfrrRow != null && sfrrRow.getAttribute("EsiId") != null) {
                ViewObjectImpl woVo = this.getBatchOrderDetailsView1();
                woVo.setNamedWhereClauseParam("pEsiId", sfrrRow.getAttribute("EsiId"));
                woVo.executeQuery();

                Row[] woRow = woVo.getAllRowsInRange();

                if (woRow.length > 0 && woRow[0].getAttribute("OrderNumber") != null) {
                    return woRow[0].getAttribute("OrderNumber").toString();
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching Work Order number." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return null;
    }
    
    /**
     * Method sends selected certificate for verification.
     * @return String returns success or error.
     **/
    public String sendOcForVerification()
    {
        try 
        {
            Row batchRow = this.getRmiBatchView2().getCurrentRow();
            ViewObjectImpl sfrrDocOcVo = this.getRmiSeafarerDocsOcView1();
            Row sfrrDocOcRow = sfrrDocOcVo.getCurrentRow();
            String retVal = "N";

            if (batchRow != null && sfrrDocOcRow != null) 
            {
                this.getDBTransaction().commit();

//                retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.update_issue_type(?)", new Object[] {
//                                                 sfrrDocOcRow.getAttribute("EsdiId") });
                
//                retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.create_order_line(?,?)", new Object[] {
//                                                 sfrrDocOcRow.getAttribute("EsdiId"),
//                                                 batchRow.getAttribute("OeHeaderId")});

//                System.out.println("retVal :: "+retVal);
//                
//                if (retVal == null || (retVal != null && retVal.equalsIgnoreCase("N")))
//                    return "N";

//                this.getDBTransaction().commit();
                
                retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.send_oc_for_verification(?,?,?)", new Object[] {
                                                 sfrrDocOcRow.getAttribute("EsiId"),
                                                 sfrrDocOcRow.getAttribute("EsdiId"),
                                                 batchRow.getAttribute("OeHeaderId")
                });

                this.getDBTransaction().commit();
                
              retVal =  processOrder();

                this.getDBTransaction().commit();
            }

            if (retVal != null) {
                sfrrDocOcVo.executeQuery();
                return retVal;
            } else {
                return "N";
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while sending this certificate for verification." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    
    /**
     * Method fetches all certificates which are pending for verification.
     * @param filterType pass certificate status type i.e. U-Unverified/W-Waiting.
     **/
    public void filterOrdersVerification(String filterType)
    {        
        /*ViewObjectImpl vwSfrrVo = this.getviewSeafarerVO1();
        Row vwSfrrRow = vwSfrrVo.getCurrentRow();
        
        if(vwSfrrRow != null && vwSfrrRow.getAttribute("SeafarerId") != null)
        {
            Integer seafarerId = (Integer) vwSfrrRow.getAttribute("SeafarerId");
        }*/        
        
        try 
        {
            if (filterType != null) {
                if (filterType.equalsIgnoreCase("a")) {
                    ViewObjectImpl odrVerfctnVO = this.getSeafarerDataVerificationOrdersView1();
                    odrVerfctnVO.setNamedWhereClauseParam("pSalesRepId", null);
                    odrVerfctnVO.executeQuery();
                } else {
                    ViewObjectImpl odrVerfctnVO = this.getOcVerificationOrdersView1();
                    odrVerfctnVO.setNamedWhereClauseParam("pSalesRepId", getUserId());
                    odrVerfctnVO.executeQuery();
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching orders pending verification." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method fetches details including documents of selected seafarer.
     **/
    public void filterSeafarersDetails()
    {
        try 
        {
            ViewObjectImpl odrVerfctnVO = this.getSeafarerDataVerificationOrdersView1();
            Row odrVerfctnRow = odrVerfctnVO.getCurrentRow();

            if (odrVerfctnRow != null && odrVerfctnRow.getAttribute("EsiBatchId") != null) {
                ViewObjectImpl vwSfrrVo = this.getRmiSeafarerView1();
                vwSfrrVo.setNamedWhereClauseParam("pEsiBatchId", odrVerfctnRow.getAttribute("EsiBatchId"));
                vwSfrrVo.executeQuery();
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching seafarer details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method sends batch to Evaluator's queue for further processing.
     * @param retVal pass return value of the check performed by method.
     **/
    public void sentToEval(String retVal)
    {
        try 
        {
            if(retVal != null)
            {
                int count = 0;
                
                ViewObject btVo = getRmiBatchView2();
                Row batchRow = btVo.getCurrentRow();           
                ViewObject wfView = getRmiWorkflowView1();
                wfView.setNamedWhereClauseParam("pBatchId", Integer.parseInt(batchRow.getAttribute("EsiBatchId").toString()));
                wfView.executeQuery();

//                rejectBatch(row.getAttribute("EsiBatchId"));
                
                RowSetIterator createRowSetIterator = wfView.createRowSetIterator(null);
                while (createRowSetIterator.hasNext()) {
                    Row row = createRowSetIterator.next();
                    if(row.getAttribute("BatchStatus").toString().equalsIgnoreCase("Pending_VAL")
                        && row.getAttribute("LastUpdatedRow").toString().equalsIgnoreCase("Y")){
                       count++;
                    }
                }
                createRowSetIterator.reset();
                
                if(count == 0)
                {
                    Row createRow = wfView.createRow();
                    createRow.setAttribute("EsiBatchId", batchRow.getAttribute("EsiBatchId"));
                    createRow.setAttribute("BatchStatus", "Pending_VAL");
                    createRow.setAttribute("LastUpdatedRow", "Y");
                    wfView.insertRow(createRow);
                }
                
                if(retVal.equalsIgnoreCase("all"))
                {
                    while (createRowSetIterator.hasNext()) {
                        Row row = createRowSetIterator.next();
                        if (row.getAttribute("BatchStatus").toString().equalsIgnoreCase("Pending_TC")){
                            row.setAttribute("LastUpdatedRow", "N");
                        }
                    }    
                }
//                else
//                {
//                    while (createRowSetIterator.hasNext()) {
//                        Row row = createRowSetIterator.next();
//                        if (row.getAttribute("BatchStatus").toString().equalsIgnoreCase("Pending_TC")
//                            && (row.getAttribute("LastUpdatedRow") != null && row.getAttribute("LastUpdatedRow").toString().equalsIgnoreCase("y"))){
//                            row.setAttribute("AssignedTo", null);
//                        }
//                    } 
//                }

                retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.rmi_upd_seafarer_status_eval(?)", new Object[] {
                                                 batchRow.getAttribute("EsiBatchId") });

                this.getDBTransaction().commit(); 
                createRowSetIterator.closeRowSetIterator();   
            }            
        } catch (Exception nfe) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while processing this batch." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }    
    }    
    
    
    /**
     * Method sends batch to Trade Compliance Processor's queue for further processing.
     * @param retVal pass return value of the check performed by method.
     **/
    public void sentToTcProcessor(String retVal)
    {
        try 
        {
            if(retVal != null)
            {
                int count = 0;
                
                ViewObject btVo = getRmiBatchView2();
                Row batchRow = btVo.getCurrentRow();           
                ViewObject wfView = getRmiWorkflowView1();
                wfView.setNamedWhereClauseParam("pBatchId", Integer.parseInt(batchRow.getAttribute("EsiBatchId").toString()));
                wfView.executeQuery();

    //                rejectBatch(row.getAttribute("EsiBatchId"));

                RowSetIterator createRowSetIterator = wfView.createRowSetIterator(null);
                while (createRowSetIterator.hasNext()) {
                    Row row = createRowSetIterator.next();
                    if(row.getAttribute("BatchStatus").toString().equalsIgnoreCase("Pending_MTC")
                        && row.getAttribute("LastUpdatedRow").toString().equalsIgnoreCase("Y")){
//                        row.setAttribute("LastUpdatedRow", "N");
                       count++;
                    }
                }
                createRowSetIterator.reset();
                
                if(count == 0)
                {
                    Row createRow = wfView.createRow();
                    createRow.setAttribute("EsiBatchId", batchRow.getAttribute("EsiBatchId"));
                    createRow.setAttribute("BatchStatus", "Pending_MTC");
                    createRow.setAttribute("LastUpdatedRow", "Y");
                    wfView.insertRow(createRow);
                }
                
                if(retVal.equalsIgnoreCase("all"))
                {
                    while (createRowSetIterator.hasNext()) {
                        Row row = createRowSetIterator.next();
                        if (row.getAttribute("BatchStatus").toString().equalsIgnoreCase("Pending_VAL")){
                            row.setAttribute("LastUpdatedRow", "N");
                        }
                    }    
                }

                retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.rmi_upd_seafarer_status_tc(?)", new Object[] {
                                                 batchRow.getAttribute("EsiBatchId") });

                this.getDBTransaction().commit(); 
                createRowSetIterator.closeRowSetIterator();   
            }            
        } catch (Exception nfe) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while processing this batch." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }    
    }
    
    /**
     * Method changes the batch status to Cancelled and returns to the previous queue.
     **/
    public void cancelbatch()
    {
        try 
        {
            ViewObject btVo = getRmiBatchView2();
            Row row = btVo.getCurrentRow();
            row.setAttribute("BatchStatus", "Cancelled");
            row.setAttribute("LastUpdateDate", new Timestamp(System.currentTimeMillis()));
            row.setAttribute("LastUpdatedBy", ADFContext.getCurrent().getSessionScope().get("UserId"));
            //        this.getDBTransaction().commit();

            rejectBatch(row.getAttribute("EsiBatchId"));
            
        } catch (Exception nfe) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while cancelling this batch." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method gets binding of the current context.
     * @return BindingContainer type.
     **/
    public BindingContainer getBindings(){
            return BindingContext.getCurrent().getCurrentBindingsEntry();
    }
    
    /**
     * Method creates a new line of certificate by setting default values.
     **/
    public void addOcLine()
    {
        try 
        {
            ViewObject ocVo = getRmiSeafarerDocsOcView1();
            Row createRow = ocVo.createRow();
            createRow.setAttribute("CreatedBy", getUserId());
            createRow.setAttribute("AddedByRole", "EVALUATOR");
            createRow.setAttribute("GradeType", "OC");
            createRow.setAttribute("GradingStatus", "Pending");
            createRow.setAttribute("tranDisableDeleteLine", "Y");
            
            //ADFContext.getCurrent().getSessionScope().get("UserId")
            ocVo.insertRow(createRow);
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while adding new line." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }   
    }
    
    /**
     * Method saves the new line(s) created.
     **/
    public void saveocline()
    {
        try 
        {
            Row batchRow = this.getRmiBatchView2().getCurrentRow();
            ViewObjectImpl sfrrVo = this.getRmiSeafarerView1();
            Row sfrrRow = sfrrVo.getCurrentRow();

            if ((batchRow != null && batchRow.getAttribute("OeHeaderId") != null) &&
                (sfrrRow != null && sfrrRow.getAttribute("EsiId") != null)) {
                ViewObjectImpl sfrrDocsVo = this.getSeafarerDocsIfaceView1();
                sfrrDocsVo.setNamedWhereClauseParam("pEsiId", sfrrRow.getAttribute("EsiId"));
                sfrrDocsVo.executeQuery();

                this.getDBTransaction().commit();

                RowSetIterator docsRsi = this.getRmiSeafarerDocsOcView1().createRowSetIterator(null);

                while (docsRsi.hasNext()) {
                    Row r = docsRsi.next();
                       r.setAttribute("tranDisableDeleteLine", null);
                    if (r.getAttribute("EsdiId") != null) {
                        Row[] fr = sfrrDocsVo.getFilteredRows("EsdiId", r.getAttribute("EsdiId"));
                        String retVal = null;

                        if (!(fr.length > 0)) {
                            
                            if(sfrrRow.getAttribute("IssueType3") != null && !(sfrrRow.getAttribute("IssueType3").toString().equalsIgnoreCase("New")))
                            {
                                retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.update_issue_type(?)", new Object[] {
                                                                 r.getAttribute("EsdiId") });
                            }
                            retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.create_order_line(?,?)", new Object[] {
                                                             r.getAttribute("EsdiId"),
                                                             batchRow.getAttribute("OeHeaderId")
                            });                            

                            if (retVal != null && retVal.equalsIgnoreCase("n")) {
                                AdfUtils.addFormattedFacesErrorMessage("Failed to create Order Line for COC Number :: ." +
                                                              r.getAttribute("CocNumber"), "",
                                                              FacesMessage.SEVERITY_ERROR);
                                return;
                            }
                            else
                                processOrder();                            
                        }
                    }
                }
                updateCancelLine();
                this.getDBTransaction().commit();
                docsRsi.closeRowSetIterator();
                AdfUtils.addFormattedFacesErrorMessage("Record Saved Successfully !", "", FacesMessage.SEVERITY_INFO);
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while saving lines details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method validates if any document/certificate is marked as Hold before approving seafarer.
     * @return String returns the document name if found else returns Y.
     **/
    public String validateApproveSeafarer()
    {
        try 
        {
            ViewObjectImpl sfrrVo = this.getRmiSeafarerView1();
            Row sfrrRow = sfrrVo.getCurrentRow();

            if (sfrrRow != null && sfrrRow.getAttribute("EsiId") != null) {
                if ((sfrrRow.getAttribute("PhotoGrdStatus") == null) || 
                    (sfrrRow.getAttribute("PhotoGrdStatus") != null && sfrrRow.getAttribute("PhotoGrdStatus").toString().equalsIgnoreCase("Hold")) || 
                    (sfrrRow.getAttribute("PhotoGrdStatus") != null && sfrrRow.getAttribute("PhotoGrdStatus").toString().equalsIgnoreCase("Pending"))) {
                    return "Photo Uploaded => Uploaded Documents";
                }
                if ((sfrrRow.getAttribute("IdentityDocGrdStatus") == null) || 
                    (sfrrRow.getAttribute("IdentityDocGrdStatus") != null && sfrrRow.getAttribute("IdentityDocGrdStatus").toString().equalsIgnoreCase("Hold")) || 
                    (sfrrRow.getAttribute("IdentityDocGrdStatus") != null && sfrrRow.getAttribute("IdentityDocGrdStatus").toString().equalsIgnoreCase("Pending"))) {
                    return "Identity Document => Uploaded Documents";
                }
                if ((sfrrRow.getAttribute("PhysicalGrdStatus") == null) || 
                    (sfrrRow.getAttribute("PhysicalGrdStatus") != null && sfrrRow.getAttribute("PhysicalGrdStatus").toString().equalsIgnoreCase("Hold")) || 
                    (sfrrRow.getAttribute("PhysicalGrdStatus") != null && sfrrRow.getAttribute("PhysicalGrdStatus").toString().equalsIgnoreCase("Pending"))) {
                    return "Medical Examination Report => Uploaded Documents";
                }
                if ((sfrrRow.getAttribute("SeaserviceGrdStatus") == null) || 
                    (sfrrRow.getAttribute("SeaserviceGrdStatus") != null && sfrrRow.getAttribute("SeaserviceGrdStatus").toString().equalsIgnoreCase("Hold")) || 
                    (sfrrRow.getAttribute("SeaserviceGrdStatus") != null && sfrrRow.getAttribute("SeaserviceGrdStatus").toString().equalsIgnoreCase("Pending"))) {
                    return "Sea Service Transcript => Uploaded Documents";
                }
                if ((sfrrRow.getAttribute("ApplicationGrdStatus") == null) || 
                    (sfrrRow.getAttribute("ApplicationGrdStatus") != null && sfrrRow.getAttribute("ApplicationGrdStatus").toString().equalsIgnoreCase("Hold")) || 
                    (sfrrRow.getAttribute("PhotoGrdStatus") != null && sfrrRow.getAttribute("PhotoGrdStatus").toString().equalsIgnoreCase("Pending"))) {
                    return "Attestation => Uploaded Documents";
                }
                if ((sfrrRow.getAttribute("AffidavitGrdStatus") == null) || 
                    (sfrrRow.getAttribute("AffidavitGrdStatus") != null && sfrrRow.getAttribute("AffidavitGrdStatus").toString().equalsIgnoreCase("Hold")) || 
                    (sfrrRow.getAttribute("AffidavitGrdStatus") != null && sfrrRow.getAttribute("AffidavitGrdStatus").toString().equalsIgnoreCase("Pending"))) {
                    return "Affidavit => Uploaded Documents";
                }
                if ((sfrrRow.getAttribute("SatGrdStatus") == null) || 
                    (sfrrRow.getAttribute("SatGrdStatus") != null && sfrrRow.getAttribute("SatGrdStatus").toString().equalsIgnoreCase("Hold")) || 
                    (sfrrRow.getAttribute("SatGrdStatus") != null && sfrrRow.getAttribute("SatGrdStatus").toString().equalsIgnoreCase("Pending"))) {
                    return "Security Awareness => Uploaded Documents";
                }
                if ((sfrrRow.getAttribute("ConGrdStatus") == null) || 
                    (sfrrRow.getAttribute("ConGrdStatus") != null && sfrrRow.getAttribute("ConGrdStatus").toString().equalsIgnoreCase("Hold")) || 
                    (sfrrRow.getAttribute("ConGrdStatus") != null && sfrrRow.getAttribute("ConGrdStatus").toString().equalsIgnoreCase("Pending"))) {
                    return "Data Privacy Consent => Uploaded Documents";
                }
                if ((sfrrRow.getAttribute("BookGrdStatus") == null) || 
                    (sfrrRow.getAttribute("BookGrdStatus") != null && sfrrRow.getAttribute("BookGrdStatus").toString().equalsIgnoreCase("Hold")) || 
                    (sfrrRow.getAttribute("BookGrdStatus") != null && sfrrRow.getAttribute("BookGrdStatus").toString().equalsIgnoreCase("Pending"))) {
                    return "Seafarer Book => SQC's Requested";
                } 
                if ((sfrrRow.getAttribute("IdCardGrdStatus") == null) || 
                    (sfrrRow.getAttribute("IdCardGrdStatus") != null && sfrrRow.getAttribute("IdCardGrdStatus").toString().equalsIgnoreCase("Hold")) || 
                    (sfrrRow.getAttribute("IdCardGrdStatus") != null && sfrrRow.getAttribute("IdCardGrdStatus").toString().equalsIgnoreCase("Pending"))) {
                    return "Seafarer ID Card => SQC's Requested";
                } 
            }

            ViewObjectImpl ocDocVo = this.getRmiSeafarerDocsOcView1();
            RowSetIterator ocDocRsi = ocDocVo.createRowSetIterator(null);

            while (ocDocRsi.hasNext()) {
                Row r = ocDocRsi.next();
                if (r != null) {
                    if ((r.getAttribute("GradingStatus") == null) || 
                        (r.getAttribute("GradingStatus") != null && r.getAttribute("GradingStatus").toString().equalsIgnoreCase("Hold")) ||
                        (r.getAttribute("GradingStatus") != null && r.getAttribute("GradingStatus").toString().equalsIgnoreCase("Pending"))) {
                        return "Grading Status => OC's Requested";
                    }
                }
            }

            ViewObjectImpl sqcDocVo = this.getRmiSeafarerDocsSqcView1();
            RowSetIterator sqcDocRsi = sqcDocVo.createRowSetIterator(null);

            while (sqcDocRsi.hasNext()) {
                Row r = sqcDocRsi.next();
                if (r != null) {
                    if ((r.getAttribute("GradingStatus3") == null) || 
                        (r.getAttribute("GradingStatus3") != null && r.getAttribute("GradingStatus3").toString().equalsIgnoreCase("Hold")) ||
                        (r.getAttribute("GradingStatus3") != null && r.getAttribute("GradingStatus3").toString().equalsIgnoreCase("Pending"))) {
                        return "Grading Status => SQC's Requested";
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while approving seafarer." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        
        return "Y";    
    }
    
    /**
     * Method validates if atleast any 1 document/certificate is marked as Hold before Hold seafarer.
     * @return String returns the document name if found else returns Y.
     **/
    public String validateHoldSeafarer()
    {
        try 
        {
            ViewObjectImpl sfrrVo = this.getRmiSeafarerView1();
            Row sfrrRow = sfrrVo.getCurrentRow();

            if (sfrrRow != null && sfrrRow.getAttribute("EsiId") != null) {
                if (sfrrRow.getAttribute("PhotoGrdStatus") != null &&
                    (sfrrRow.getAttribute("PhotoGrdStatus").toString().equalsIgnoreCase("Hold"))) {
                    return "Photo Uploaded => Uploaded Documents";
                }
                if (sfrrRow.getAttribute("IdentityDocGrdStatus") != null &&
                    (sfrrRow.getAttribute("IdentityDocGrdStatus").toString().equalsIgnoreCase("Hold"))) {
                    return "Identity Document => Uploaded Documents";
                }
                if (sfrrRow.getAttribute("PhysicalGrdStatus") != null &&
                    (sfrrRow.getAttribute("PhysicalGrdStatus").toString().equalsIgnoreCase("Hold"))) {
                    return "Medical Examination Report => Uploaded Documents";
                }
                if (sfrrRow.getAttribute("SeaserviceGrdStatus") != null &&
                    (sfrrRow.getAttribute("SeaserviceGrdStatus").toString().equalsIgnoreCase("Hold"))) {
                    return "Sea Service Transcript => Uploaded Documents";
                }
                if (sfrrRow.getAttribute("ApplicationGrdStatus") != null &&
                    (sfrrRow.getAttribute("ApplicationGrdStatus").toString().equalsIgnoreCase("Hold"))) {
                    return "Attestation => Uploaded Documents";
                }
                if (sfrrRow.getAttribute("AffidavitGrdStatus") != null &&
                    (sfrrRow.getAttribute("AffidavitGrdStatus").toString().equalsIgnoreCase("Hold"))) {
                    return "Affidavit => Uploaded Documents";
                }
                if (sfrrRow.getAttribute("SatGrdStatus") != null &&
                    (sfrrRow.getAttribute("SatGrdStatus").toString().equalsIgnoreCase("Hold"))) {
                    return "Security Awareness => Uploaded Documents";
                }
                if (sfrrRow.getAttribute("ConGrdStatus") != null &&
                    (sfrrRow.getAttribute("ConGrdStatus").toString().equalsIgnoreCase("Hold"))) {
                    return "Data Privacy Consent => Uploaded Documents";
                }
                if (sfrrRow.getAttribute("BookGrdStatus") != null || 
                    (sfrrRow.getAttribute("BookGrdStatus").toString().equalsIgnoreCase("Hold"))) {
                    return "Seafarer Book => SQC's Requested";
                } 
                if (sfrrRow.getAttribute("IdCardGrdStatus") != null || 
                    (sfrrRow.getAttribute("IdCardGrdStatus").toString().equalsIgnoreCase("Hold"))) {
                    return "Seafarer ID Card => SQC's Requested";
                }
            }

            ViewObjectImpl ocDocVo = this.getRmiSeafarerDocsOcView1();
            RowSetIterator ocDocRsi = ocDocVo.createRowSetIterator(null);

            while (ocDocRsi.hasNext()) {
                Row r = ocDocRsi.next();
                if (r != null) {
                    if (r.getAttribute("GradingStatus") != null &&
                        (r.getAttribute("GradingStatus").toString().equalsIgnoreCase("Hold"))) {
                        return "Grading Status => OC's Requested";
                    }
                }
            }

            ViewObjectImpl sqcDocVo = this.getRmiSeafarerDocsSqcView1();
            RowSetIterator sqcDocRsi = sqcDocVo.createRowSetIterator(null);

            while (sqcDocRsi.hasNext()) {
                Row r = sqcDocRsi.next();
                if (r != null) {
                    if (r.getAttribute("GradingStatus3") != null &&
                        (r.getAttribute("GradingStatus3").toString().equalsIgnoreCase("Hold"))) {
                        return "Grading Status => SQC's Requested";
                    }
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while marking seafarer as hold." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        
        return "Y";    
    }
    
    /**
     * Method updates certificate status manually selected by user i.e. without any email/portal verification.
     * @param docType pass certificate status type i.e. U-Unverified/W-Waiting.
     * @return String returns success or error.
     **/
    public String updateDocVerifiedStatusManually(String docType)
    {
        try 
        {
            Row docRow;

            if (docType != null && docType.equalsIgnoreCase("U"))
                docRow = this.getOcVerificationOrdersView1().getCurrentRow();
            else
                docRow = this.getOcWaitingResponseView1().getCurrentRow();

            String retVal = "N";

            if (docRow != null) {
                try {
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.update_doc_status_manually(?,?,?,?,?,?)", new Object[] {
                                                     docRow.getAttribute("DocumentId"),
                                                     docRow.getAttribute("SeafarerId"), "Y",
                                                     ((docType.equalsIgnoreCase("U")) ?
                                                      docRow.getAttribute("TransCancelCert") :
                                                      docRow.getAttribute("TransCancelCertWaiting")),
                                                     docRow.getAttribute("VerificationMethod"), getUserId()
                    });
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating certificate status." +
                                                     " Please contact your System Administrator." , 
                                                     "", FacesMessage.SEVERITY_ERROR);
                }
            }

            //System.out.println("retVal :: "+retVal);

            if (retVal != null && retVal.length() > 0) {
                if (retVal.equalsIgnoreCase("u")) {
                    AdfUtils.addFormattedFacesErrorMessage("Please upload Verification Document first !", null,
                                                  FacesMessage.SEVERITY_ERROR);
                }

                this.getDBTransaction().commit();
                this.filterOcVerification("M");
                return retVal;
            } else
                return "N";
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating certificate status." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    
    /**
     * Method validates if all the documents are Verified before approving order.
     * @return String returns document name if found else returns Y.
     **/
    public String validateApproveOrder()
    {
        try 
        {
            ViewObjectImpl ocDocVo = this.getRmiSeafarerDocsOcView1();
            RowSetIterator ocDocRsi = ocDocVo.createRowSetIterator(null);

            while (ocDocRsi.hasNext()) {
                Row r = ocDocRsi.next();
                if (r != null) {
                    if (r.getAttribute("DataVerified") != null &&
                        (r.getAttribute("DataVerified").toString().equalsIgnoreCase("No"))) {
                        return "Data Verified => OC's Requested";
                    }
                }
            }

            ViewObjectImpl sqcDocVo = this.getRmiSeafarerDocsSqcView1();
            RowSetIterator sqcDocRsi = sqcDocVo.createRowSetIterator(null);

            while (sqcDocRsi.hasNext()) {
                Row r = sqcDocRsi.next();
                if (r != null) {
                    if (r.getAttribute("DataVerified1") != null &&
                        (r.getAttribute("DataVerified1").toString().equalsIgnoreCase("No"))) {
                        return "Data Verified => SQC's Requested";
                    }
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while approving order." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        
        return "Y";    
    }
    
    /**
     * Method approves the selected order.
     * @return String returns success or error.
     **/
    public String approveOrder()
    {
        try 
        {
            Row batchRow = this.getRmiBatchView2().getCurrentRow();
            String retVal = null;
            String errMsg = null;

            if (batchRow != null && batchRow.getAttribute("OeHeaderId") != null) {
                try {
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.approve_order(?)", new Object[] {
                                                     batchRow.getAttribute("OeHeaderId") });
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while approving order." +
                                                     " Please contact your System Administrator." , 
                                                     "", FacesMessage.SEVERITY_ERROR);
                }
            }

            if (retVal != null && retVal.equalsIgnoreCase("L"))
                AdfUtils.addFormattedFacesErrorMessage("This order is in use by another user.", "", FacesMessage.SEVERITY_WARN);
            else if (retVal != null && !(retVal.equalsIgnoreCase("Y")))
                AdfUtils.addFormattedFacesErrorMessage("There has been an error while approving this order : " + errMsg, "",
                                              FacesMessage.SEVERITY_ERROR);
            else
                AdfUtils.addFormattedFacesErrorMessage("Order Approved Successfully.", "", FacesMessage.SEVERITY_INFO);

            return retVal;
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while approving order." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    
    /**
     * Method fetches book details for the selected order/batch.
     **/
    public void filterProcessBook()
    {
        try 
        {
            Object headerIdO = RequestContext.getCurrentInstance().getPageFlowScope().get("P_HEADER_ID");
            Integer headerId = null;

//            System.out.println("headerIdO :: " + headerIdO);

            if (headerIdO != null) {
                headerId = Integer.parseInt(headerIdO.toString());

                ViewObjectImpl procBkHdrVo = this.getProcessBookHeaderView1();
                procBkHdrVo.setNamedWhereClauseParam("pHeaderId", headerId);
                procBkHdrVo.executeQuery();

                ViewObjectImpl procBkDtlVo = this.getProcessBookDetailsView1();
                procBkDtlVo.setNamedWhereClauseParam("pHeaderId", headerId);
                procBkDtlVo.executeQuery();
            }
        } catch (Exception nfe) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching book details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method fetches book details for the selected order/batch.
     **/
    public void filterAssignBook()
    {
        try 
        {
            Object headerIdO = RequestContext.getCurrentInstance().getPageFlowScope().get("P_HEADER_ID");
            Integer headerId = null;

            //        System.out.println("headerIdO :: "+headerIdO);

            if (headerIdO != null) {
                headerId = Integer.parseInt(headerIdO.toString());

                ViewObjectImpl procBkHdrVo = this.getProcessBookHeaderView1();
                procBkHdrVo.setNamedWhereClauseParam("pHeaderId", headerId);
                procBkHdrVo.executeQuery();

                ViewObjectImpl procBkDtlVo = this.getProcessBookDetailsView1();
                procBkDtlVo.setNamedWhereClauseParam("pHeaderId", headerId);
                procBkDtlVo.executeQuery();

                AdfFacesContext.getCurrentInstance().getPageFlowScope().put("P_REQUEST_NO", null);
                AdfFacesContext.getCurrentInstance().getPageFlowScope().put("Role_Name", ADFContext.getCurrent().getSessionScope().get("RoleName"));
//                AdfFacesContext.getCurrentInstance().getPageFlowScope().put("Role_Name", "PROCESSOR - II"); //QA PROCESSOR-EVALUATOR
            }
        } catch (Exception nfe) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching book details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }

    /**
     * Method assigns book number to all the lines which are unassigned.
     **/
    public String assignBookNumbers()
    {
        String retVal = "Y";
            
        try 
        {
            Object headerIdO = RequestContext.getCurrentInstance().getPageFlowScope().get("P_HEADER_ID");
            Integer headerId = null;
            Row dualBookRow = this.getDualProcessBookView1().getCurrentRow();

            if (headerIdO != null && (dualBookRow != null && dualBookRow.getAttribute("Trans5Yr") != null)) {
                headerId = Integer.parseInt(headerIdO.toString());
                
//                System.out.println("Trans5Yr :: "+dualBookRow.getAttribute("Trans5Yr"));

                try {
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.rmi_assign_books(?,?,?,?)", new Object[] {
                                                     headerId,
                                                     ((Integer) dualBookRow.getAttribute("Trans5Yr")).toString(), null,
                                                     null
                    });
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while assigning book numbers." +
                                                     " Please contact your System Administrator." , 
                                                     "", FacesMessage.SEVERITY_ERROR);
                }

                if(retVal != null && retVal.equalsIgnoreCase("Y"))
                {
                    this.getDualProcessBookView1().executeQuery();
                    ViewObjectImpl procBkDtlVo = this.getProcessBookDetailsView1();
                    procBkDtlVo.setNamedWhereClauseParam("pHeaderId", headerId);
                    procBkDtlVo.executeQuery();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while assigning book numbers." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return retVal;
    }

    /**
     * Method updates book number to all the lines which are assigned.
     * @return String returns success or error.
     **/
    public String updateBookNumbers()
    {
        try 
        {
            Object headerIdO = RequestContext.getCurrentInstance().getPageFlowScope().get("P_HEADER_ID");
            Integer headerId = null;
            String retVal = null;

            if (headerIdO != null) {
                headerId = Integer.parseInt(headerIdO.toString());

                try {
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.rmi_update_books(?)", new Object[] {
                                                     headerId });
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating book numbers." +
                                                     " Please contact your System Administrator." , 
                                                     "", FacesMessage.SEVERITY_ERROR);
                }

                ViewObjectImpl procBkDtlVo = this.getProcessBookDetailsView1();
                procBkDtlVo.setNamedWhereClauseParam("pHeaderId", headerId);
                procBkDtlVo.executeQuery();
            }

            return retVal;
        } catch (Exception nfe) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating book numbers." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }

    /**
     * Method generates name for the file generated by merging all supporting documents.
     * @return String returns merged pdf file name.
     **/
    public String getMergedFileName()
    {
        try
        {
            Row sfrrRow = this.getSicdSeafarerView1().getCurrentRow();
            Object nameScreened = null;
            
            System.out.println("sfrrRow :: "+sfrrRow);
            
            if (sfrrRow != null) {
                nameScreened =
                    ("" + sfrrRow.getAttribute("FirstName") + " " + sfrrRow.getAttribute("LastName") + " " +
                     sfrrRow.getAttribute("SeafarerId"));
            }

            return ((nameScreened != null) ? (nameScreened.toString().replaceAll("\\s+", "_")) : "merged");
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while generating document." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "merged";
    }

    /**
     * Method url for the file generated by merging all supporting documents.
     * @return String returns merged pdf file url.
     **/
    public String genMergedSupportingDocs()
    {
        try 
        {
            Row sicdSfrrRow = this.getSicdSeafarerView1().getCurrentRow();
            
            System.out.println("sicdSfrrRow :: "+sicdSfrrRow);

            if (sicdSfrrRow != null) {
                Object nameScreened = "";
                nameScreened =
                    ("" + sicdSfrrRow.getAttribute("FirstName") + " " + sicdSfrrRow.getAttribute("LastName") + " " +
                     sicdSfrrRow.getAttribute("SeafarerId"));
                ViewObjectImpl vwSfrrVo = this.getRmiSeafarerView1();
                Row[] sfrrRows = vwSfrrVo.getFilteredRows("SeafarerId", (Integer) sicdSfrrRow.getAttribute("SeafarerId"));
                if (sfrrRows.length> 0 && sfrrRows[0] != null) 
                {
                    Row sfrrRow = sfrrRows[0];
                    String identitydocPath = null;
                    String medicalphysicaledocPath = null;
                    String serviceTransPath = null;
                    String applicationedocPath = null;
                    String affidavitPath = null;
                    String securitysatedocPath = null;
                    String consentdocPath = null;
                    String internaledocPath = null;
                    List<InputStream> inputPdfList = null;
                    inputPdfList = new ArrayList<InputStream>();
                    ViewObjectImpl docLnkVo = this.getGetDocumentLinkView1();
                    Row[] docLnkRows;
                    

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow.getAttribute("IdentityDocEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                        identitydocPath = docLnkRows[0].getAttribute("DocPath").toString();
                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow.getAttribute("PhysicalEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                        medicalphysicaledocPath = docLnkRows[0].getAttribute("DocPath").toString();
                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow.getAttribute("SeaserviceTranscriptEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                        serviceTransPath = docLnkRows[0].getAttribute("DocPath").toString();
                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow.getAttribute("ApplicationEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                        applicationedocPath = docLnkRows[0].getAttribute("DocPath").toString();
                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow.getAttribute("AffidavitEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                        affidavitPath = docLnkRows[0].getAttribute("DocPath").toString();
                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow.getAttribute("SatEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                        securitysatedocPath = docLnkRows[0].getAttribute("DocPath").toString();
                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow.getAttribute("ConsentEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                        consentdocPath = docLnkRows[0].getAttribute("DocPath").toString();
                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow.getAttribute("InternalEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                        internaledocPath = docLnkRows[0].getAttribute("DocPath").toString();
                    }
                    
                    RowSetIterator ocRsi = getRmiSeafarerDocsOcView1().createRowSetIterator(null);                    
                    RowSetIterator sqcRsi = getRmiSeafarerDocsSqcView1().createRowSetIterator(null);
                    String[] ocEdocId = new String[500];
                    String[] ocSuppEdocId = new String[500];
                    String[] sqcEdocId = new String[500];
                    String[] sqcSuppEdocId = new String[500];
                    Integer ocEdocIdCnt = 0;
                    Integer ocSuppEdocIdCnt = 0;
                    Integer sqcEdocIdCnt = 0;
                    Integer sqcSuppEdocIdCnt = 0;
                    
                    while(ocRsi.hasNext())
                    {
                        Row r = ocRsi.next();
                        if(r != null)
                        {
                            if(r.getAttribute("EdocId") != null)
                            {                                
                                docLnkVo.setWhereClause(null);
                                docLnkVo.setNamedWhereClauseParam("pEdocId", r.getAttribute("EdocId"));
                                docLnkVo.executeQuery();

                                docLnkRows = docLnkVo.getAllRowsInRange();

                                if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                    //                                    System.out.println("ocEdocId :: "+r.getAttribute("EdocId"));
                    //                                    System.out.println("url :: "+docLnkRows[0].getAttribute("DocPath"));
                                    ocEdocId[ocEdocIdCnt] = docLnkRows[0].getAttribute("DocPath").toString();
                                }
                                ocEdocIdCnt = ocEdocIdCnt + 1;
                            }
                            
                            if(r.getAttribute("SupportEdocId") != null)
                            {
                                docLnkVo.setWhereClause(null);
                                docLnkVo.setNamedWhereClauseParam("pEdocId", r.getAttribute("SupportEdocId"));
                                docLnkVo.executeQuery();

                                docLnkRows = docLnkVo.getAllRowsInRange();

                                if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                    //                                    System.out.println("ocSupportEdocId :: "+r.getAttribute("SupportEdocId"));
                    //                                    System.out.println("url :: "+docLnkRows[0].getAttribute("DocPath"));
                                    ocSuppEdocId[ocSuppEdocIdCnt] = docLnkRows[0].getAttribute("DocPath").toString();
                                }
                                ocSuppEdocIdCnt = ocSuppEdocIdCnt + 1;
                            }
                        }
                    }
                    ocRsi.closeRowSetIterator();
                    
                    while(sqcRsi.hasNext())
                    {
                        Row r = sqcRsi.next();
                        if(r != null)
                        {
                            if(r.getAttribute("EdocId") != null)
                            {                                
                                docLnkVo.setWhereClause(null);
                                docLnkVo.setNamedWhereClauseParam("pEdocId", r.getAttribute("EdocId"));
                                docLnkVo.executeQuery();
                    
                                docLnkRows = docLnkVo.getAllRowsInRange();
                    
                                if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                    //                                    System.out.println("sqcEdocId :: "+r.getAttribute("EdocId"));
                    //                                    System.out.println("url :: "+docLnkRows[0].getAttribute("DocPath"));
                                    sqcEdocId[sqcEdocIdCnt] = docLnkRows[0].getAttribute("DocPath").toString();
                                }
                                sqcEdocIdCnt = sqcEdocIdCnt + 1;
                            }
                            
                            if(r.getAttribute("SupportEdocId") != null)
                            {
                                docLnkVo.setWhereClause(null);
                                docLnkVo.setNamedWhereClauseParam("pEdocId", r.getAttribute("SupportEdocId"));
                                docLnkVo.executeQuery();
                    
                                docLnkRows = docLnkVo.getAllRowsInRange();
                    
                                if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                    //                                    System.out.println("sqcSupportEdocId :: "+r.getAttribute("SupportEdocId"));
                    //                                    System.out.println("url :: "+docLnkRows[0].getAttribute("DocPath"));
                                    sqcSuppEdocId[sqcSuppEdocIdCnt] = docLnkRows[0].getAttribute("DocPath").toString();
                                }
                                sqcSuppEdocIdCnt = sqcSuppEdocIdCnt + 1;
                            }
                        }
                    }
                    sqcRsi.closeRowSetIterator();

                                    System.out.println("identitydocPath =" + identitydocPath);
                                    System.out.println("medicalphysicaledocPath =" + medicalphysicaledocPath);
                                    System.out.println("serviceTransPath =" + serviceTransPath);
                                    System.out.println("applicationedocPath =" + applicationedocPath);
                                    System.out.println("affidavitPath =" + affidavitPath);
                                    System.out.println("securitysatedocPath =" + securitysatedocPath);
                                    System.out.println("consentdocPath =" + consentdocPath);
                                    System.out.println("internaledocPath =" + internaledocPath);

                    try {
                        if (sfrrRow.getAttribute("IdentityDocEdocId") != null) {
//                            try {
//                                inputPdfList.add(new URL(null,identitydocPath,new sun.net.www.protocol.https.Handler()).openStream());
//                            } catch (Exception e) {
//                                //System.out.println("inside identitydocPath exception :: " + e.getMessage());
//                            }
                            inputPdfList.add(getInputStreamFromFile(identitydocPath));
                        }

                        if (sfrrRow.getAttribute("PhysicalEdocId") != null) {
//                            try {
//                                inputPdfList.add(new URL(null,medicalphysicaledocPath,new sun.net.www.protocol.https.Handler()).openStream());
//                            } catch (Exception e) {
//                                //System.out.println("inside medicalphysicaledocPath exception :: " + e.getMessage());
//                            }
                            inputPdfList.add(getInputStreamFromFile(medicalphysicaledocPath));
                        }

                        if (sfrrRow.getAttribute("SeaserviceTranscriptEdocId") != null) {
//                            try {
//                                inputPdfList.add(new URL(null,serviceTransPath,new sun.net.www.protocol.https.Handler()).openStream());
//                            } catch (Exception e) {
//                                //System.out.println("inside serviceTransPath exception :: " + e.getMessage());
//                            }
                            inputPdfList.add(getInputStreamFromFile(serviceTransPath));
                        }

                        if (sfrrRow.getAttribute("ApplicationEdocId") != null) {
//                            try {
//                                inputPdfList.add(new URL(null,applicationedocPath,new sun.net.www.protocol.https.Handler()).openStream());
//                            } catch (Exception e) {
//                                //System.out.println("inside applicationedocPath exception :: " + e.getMessage());
//                            }
                            inputPdfList.add(getInputStreamFromFile(applicationedocPath));
                        }

                        if (sfrrRow.getAttribute("AffidavitEdocId") != null) {
//                            try {
//                                inputPdfList.add(new URL(null,affidavitPath,new sun.net.www.protocol.https.Handler()).openStream());
//                            } catch (Exception e) {
//                                //System.out.println("inside affidavitPath exception :: " + e.getMessage());
//                            }
                            inputPdfList.add(getInputStreamFromFile(affidavitPath));
                        }

                        if (sfrrRow.getAttribute("SatEdocId") != null) {
//                            try {
//                                inputPdfList.add(new URL(null,securitysatedocPath,new sun.net.www.protocol.https.Handler()).openStream());
//                            } catch (Exception e) {
//                                //System.out.println("inside securitysatedocPath exception :: " + e.getMessage());
//                            }
                            inputPdfList.add(getInputStreamFromFile(securitysatedocPath));
                        }

                        if (sfrrRow.getAttribute("ConsentEdocId") != null) {
//                            try {
//                                inputPdfList.add(new URL(null,consentdocPath,new sun.net.www.protocol.https.Handler()).openStream());
//                            } catch (Exception e) {
//                                //System.out.println("inside consentdocPath exception :: " + e.getMessage());
//                            }
                            inputPdfList.add(getInputStreamFromFile(consentdocPath));
                        }

                        if (sfrrRow.getAttribute("InternalEdocId") != null) {
//                            try {
//                                inputPdfList.add(new URL(null,internaledocPath,new sun.net.www.protocol.https.Handler()).openStream());
//                            } catch (Exception e) {
//                                //System.out.println("inside internaledocPath exception :: " + e.getMessage());
//                            }
                            inputPdfList.add(getInputStreamFromFile(internaledocPath));
                        }                        
                        
                        for(String url : ocEdocId)
                        {                            
                            if (url != null) {
                                System.out.println("Oc doc url :: "+url);
                        //                                try {
                        //                                    inputPdfList.add(new URL(null,url,new sun.net.www.protocol.https.Handler()).openStream());
                        //                                } catch (Exception e) {
                        //                                    //System.out.println("inside identitydocPath exception :: " + e.getMessage());
                        //                                }
                                inputPdfList.add(getInputStreamFromFile(url));
                            }
                        }
                        
                        for(String url : sqcEdocId)
                        {                            
                            if (url != null) {
                                System.out.println("Sqc doc url :: "+url);
                        //                                try {
                        //                                    inputPdfList.add(new URL(null,url,new sun.net.www.protocol.https.Handler()).openStream());
                        //                                } catch (Exception e) {
                        //                                    //System.out.println("inside identitydocPath exception :: " + e.getMessage());
                        //                                }
                                inputPdfList.add(getInputStreamFromFile(url));
                            }
                        }

//                        String folderPath = "D://WIP";
//                        String folderPath = "/irid/oracle_files/DEV/seaf_doc";
                        String folderPath = "/iridr/oracle_files/DR/seaf_doc/";
//                        String folderPath = "/irip/oracle_files/PROD/seaf_doc";
//                        File folder = new File(folderPath);
//                        boolean folderExists = folder.exists();
//                        
//                        System.out.println("folderExists :: "+folderExists);
//                        
//                        if(!folderExists)
//                            createDocumentPreviewFolderWithPerms(folderPath);
//
                        String fileName =
                            folderPath +
                            ((nameScreened != null) ? (nameScreened.toString().replaceAll("\\s+", "_")) : "merge") +
                            ".pdf";
                        OutputStream outputStream = new FileOutputStream(fileName);
                        mergePdfFiles(inputPdfList, outputStream);
                        //                    documentbind.setVisible(true);
                        //                    setPhotoLink("E:\/mergefile.pdf");

                        return (fileName);

                    } catch (Exception e) {
                        e.printStackTrace();
                        AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while generating supporting documents." +
                                                         " Please contact your System Administrator." , 
                                                         "", FacesMessage.SEVERITY_ERROR);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while generating supporting documents." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
                
        return null;
    }

    /**
     * Method generates new file by merging all supporting documents.
     * @param inputPdfList pass List array of pdf files to be merged.
     * @param outputStream pass file in which the merged file will be updated.
     * @throws Exception.
     **/
    public void mergePdfFiles(List<InputStream> inputPdfList,
            OutputStream outputStream) throws Exception{

        try
        {
            //Create document and pdfReader objects.
            Document document = new Document();
            List<PdfReader> readers = new ArrayList<PdfReader>();
            int totalPages = 0;

            //Create pdf Iterator object using inputPdfList.
            Iterator<InputStream> pdfIterator = inputPdfList.iterator();

            // Create reader list for the input pdf files.
            while (pdfIterator.hasNext()) {
                InputStream pdf = pdfIterator.next();
                PdfReader pdfReader = new PdfReader(pdf);
                readers.add(pdfReader);
                totalPages = totalPages + pdfReader.getNumberOfPages();

                //System.out.println("total pages count="+pdfReader.getNumberOfPages());
            }

            // Create writer for the outputStream
            PdfWriter writer = PdfWriter.getInstance(document, outputStream);

            //Open document.
            document.open();

            //Contain the pdf data.
            PdfContentByte pageContentByte = writer.getDirectContent();

            PdfImportedPage pdfImportedPage;
            int currentPdfReaderPage = 1;
            Iterator<PdfReader> iteratorPDFReader = readers.iterator();

            // Iterate and process the reader list.
            while (iteratorPDFReader.hasNext()) {
                PdfReader pdfReader = iteratorPDFReader.next();
                //Create page and add content.
                while (currentPdfReaderPage <= pdfReader.getNumberOfPages()) {
                    document.newPage();
                    unlockPdf(pdfReader);
                    pdfImportedPage = writer.getImportedPage(pdfReader, currentPdfReaderPage);
                    pageContentByte.addTemplate(pdfImportedPage, 0, 0);
                    //                Rectangle rect = writer.getBoxSize("art");
                    //                Phrase[] header = new Phrase[2];
                    //                header[0] = new Phrase("Date/time here");
                    //                ColumnText.showTextAligned(pageContentByte, Element.ALIGN_MIDDLE, header[0], rect.ALIGN_CENTER, rect.getTop(), 0);
                    currentPdfReaderPage++;
                }
                currentPdfReaderPage = 1;
            }

            //Close document and outputStream.
            outputStream.flush();
            //           List<Integer> allPages = new ArrayList<>(totalPages);
            //           allPages.remove(1);
            document.close();
            outputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage(e.getMessage() , 
                                                      "", FacesMessage.SEVERITY_ERROR);
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while merging supporting documents." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     *    Method enables View Only restricted PDFs (eg. Order Acknowledgements.) to be merged.
     *    @param PdfReader pass the pdf which is to be read & merged.
     *    @return 
     **/
    public static PdfReader unlockPdf(PdfReader reader) {
        if (reader == null) {
            return reader;
        }
        try {
            Field f = reader.getClass().getDeclaredField("encrypted");
            f.setAccessible(true);
            f.set(reader, false);
        } catch (Exception e) { // ignore
            e.printStackTrace();
        }
        return reader;
    }

    /** @deprecated **/
    public void createDocumentPreviewFolderWithPerms(String folderPath) 
    {
        if(folderPath != null)
        {
            printTmpLogs("folderPath in filePermission :: "+folderPath);
            
    //            Set<PosixFilePermission> fullPermission = new HashSet<PosixFilePermission>();
    //            fullPermission.add(PosixFilePermission.OWNER_READ);
    //            fullPermission.add(PosixFilePermission.OWNER_WRITE);
    //            fullPermission.add(PosixFilePermission.OWNER_EXECUTE);
    //
    //            fullPermission.add(PosixFilePermission.GROUP_READ);
    //            fullPermission.add(PosixFilePermission.GROUP_WRITE);
    //            fullPermission.add(PosixFilePermission.GROUP_EXECUTE);
    //
    //            fullPermission.add(PosixFilePermission.OTHERS_READ);
    //            fullPermission.add(PosixFilePermission.OTHERS_WRITE);
    //            fullPermission.add(PosixFilePermission.OTHERS_EXECUTE);

            
    //            Path path = Paths.get(folderPath, "null");
    //            printTmpLogs("path in filePermission :: "+path);
    //            printTmpLogs("fullPermission in filePermission :: "+fullPermission);
            
            try 
            {
                File file = new File(folderPath);

                printTmpLogs("file :: "+file.getPath()+"//"+file.getName());
                
                if(file != null)
                {
                    boolean readPermForAll = file.setReadable(true,false);
                    boolean writePermForAll = file.setWritable(true,false); 
                    boolean executePermForAll = file.setExecutable(true,false); 
                }
                
                printTmpLogs("Executable : " + file.canExecute());
                printTmpLogs("Readable   : " + file.canRead());
                printTmpLogs("Writable   : "+ file.canWrite());
                
    //                Files.createDirectories(path, PosixFilePermissions.asFileAttribute(fullPermission));
    //                outputLS(path);
    //                Files.setPosixFilePermissions(path, fullPermission);
    //                printTmpLogs("after assigning filePermission");
    //                outputLS(path);
            } catch (Exception e) {
                printTmpLogs("error while assigning filePermission :: "+e.getStackTrace());
                e.printStackTrace();
            }
        }
    }

    private static void outputLS(Path path) throws IOException {
        System.out.println(new java.util.Scanner(Runtime.getRuntime().exec("ls -alt " + path.toAbsolutePath() +
                                                                           "/..").getInputStream()).useDelimiter("\\A").next());
    }

    /**
     * Method generates/updates all lines in the order which are added/changed at batch level.
     * @return String returns success or error.
     **/
    public String processOrder()
    {
        try 
        {
            Row batchRow = (this.getRmiBatchView2().getCurrentRow() != null)
                            ? this.getRmiBatchView2().getCurrentRow()
                            : this.getRmiBatchView2().first();
            Row seafarerRow = (this.getRmiSeafarerView1().getCurrentRow() != null)
                                ? this.getRmiSeafarerView1().getCurrentRow()
                                : this.getRmiSeafarerView1().first();
            
            String retVal = null;

            if (batchRow != null && seafarerRow != null && batchRow.getAttribute("OeHeaderId") != null) 
            {
                try {
                    this.getDBTransaction().commit();
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.process_order_grading(?,?)", new Object[] {
                                                     batchRow.getAttribute("OeHeaderId"), getUserId()
                    });
                } catch (Exception e) {
                    e.printStackTrace();
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while processing order." +
                                                     " Please contact your System Administrator." , 
                                                     "", FacesMessage.SEVERITY_ERROR);
                }

                if (null != retVal && retVal.equalsIgnoreCase("Y")) 
                {
                    this.getDBTransaction().commit();
                    this.getRmiSeafarerView1().executeQuery();
                    this.getRmiSeafarerView1().setCurrentRow(seafarerRow);
                }

                ViewObjectImpl errorVo = this.getSicdOrderErrorsView1();
                errorVo.setNamedWhereClauseParam("pHeaderId", batchRow.getAttribute("OeHeaderId"));
                errorVo.setNamedWhereClauseParam("pSeafarerId", seafarerRow.getAttribute("SeafarerId"));
                errorVo.executeQuery();
                Row[] errorRows = errorVo.getAllRowsInRange();
    
                if (errorRows.length > 0) {
                    AdfUtils.addFormattedFacesErrorMessage("There has been some error(s) while processing this order.", "",
                                                  FacesMessage.SEVERITY_ERROR);
                    return "E";
                } else {
                    System.out.println("retVal :: "+retVal);
                    if (retVal != null && !(retVal.equalsIgnoreCase("Y")))
                        AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while processing order." +
                                                         " Please contact your System Administrator." , 
                                                         "", FacesMessage.SEVERITY_ERROR);
                }
            } else {
//                AdfUtils.addFormattedFacesErrorMessage("Work Order has not been generated for this batch. ", "",
//                                              FacesMessage.SEVERITY_ERROR);
            }

            if (retVal != null)
                return retVal;
            else
                return "N";
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while processing order." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }

    /**
     * Method gives print command to the printer mapped with user,
     *  to print the order details on Assign Book Number screen.
     * @return String returns success or error.
     **/
    public String printOrder()
    {
        try 
        {
            Object headerIdO = RequestContext.getCurrentInstance().getPageFlowScope().get("P_HEADER_ID");
            Integer headerId = null;
            String retVal = null;
            Row bookHeaderRow = this.getProcessBookHeaderView1().getCurrentRow();
            
            if (headerIdO != null && bookHeaderRow != null) {
                headerId = Integer.parseInt(headerIdO.toString());

                try {
//                    System.out.println("PrintRequestSet :: "+bookHeaderRow.getAttribute("PrintRequestSet"));
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.print_order(?,?,?,?)", new Object[] {
                                                     headerId,
                                                     ((bookHeaderRow.getAttribute("PrintRequestSet") != null)
                                                         ? bookHeaderRow.getAttribute("PrintRequestSet")
                                                         : "SICD010"),
                                                     null, getUserId()
                    });
                } catch (Exception e) {
                    e.printStackTrace();
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while printing order." +
                                                            " Please contact your System Administrator.",
                                                            "", FacesMessage.SEVERITY_ERROR);
                }
            }

            if (retVal != null && retVal.length() > 0)
            {
                System.out.println("retVal :: "+retVal);
                
                String[] splited = retVal.split("\\s+");
                if(splited != null && splited.length > 1 && splited[2] != null)
                    AdfFacesContext.getCurrentInstance().getPageFlowScope().put("P_REQUEST_NO", Integer.parseInt(splited[2]));
                return retVal;
            }
            else
                return "N";
        } catch (Exception nfe) {
            nfe.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while printing order." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    
    /**
     * Method sends batch to Assign Book Number queue for further processing.
     * @return String returns success or error.
     **/
    public String sendToAssignBookNumber(String retVal)
    {
        try 
        {
            Row batchRow = this.getRmiBatchView2().getCurrentRow();

            if (retVal != null && batchRow != null && batchRow.getAttribute("EsiBatchId") != null) 
            {
                int count = 0;
                
                ViewObject wfView = getRmiWorkflowView1();
                wfView.setNamedWhereClauseParam("pBatchId", Integer.parseInt(batchRow.getAttribute("EsiBatchId").toString()));
                wfView.executeQuery();
                
//                rejectBatch(batchRow.getAttribute("EsiBatchId"));
                
                RowSetIterator createRowSetIterator = wfView.createRowSetIterator(null);
                while (createRowSetIterator.hasNext()) {
                    Row row = createRowSetIterator.next();
                    if(row.getAttribute("BatchStatus").toString().equalsIgnoreCase("Pending_ABN")
                        && row.getAttribute("LastUpdatedRow").toString().equalsIgnoreCase("Y")){
                       count++;
                    }
                }
                createRowSetIterator.reset();
                
                System.out.println("retVal :: "+retVal);
                System.out.println("count :: "+count);
                
                if(count == 0)
                {
                    Row createRow = wfView.createRow();
                    createRow.setAttribute("EsiBatchId", batchRow.getAttribute("EsiBatchId"));
                    createRow.setAttribute("BatchStatus", "Pending_ABN");
                    createRow.setAttribute("LastUpdatedRow", "Y");
                    wfView.insertRow(createRow);
                }
                
                if(retVal.equalsIgnoreCase("all"))
                {
                    while (createRowSetIterator.hasNext()) {
                        Row row = createRowSetIterator.next();
                        if (row.getAttribute("BatchStatus").toString().equalsIgnoreCase("Pending_QA")){
                            row.setAttribute("LastUpdatedRow", "N");
                        }
                    }    
                }

                retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.rmi_upd_seafarer_status_abn(?)", new Object[] {
                                                 batchRow.getAttribute("EsiBatchId") });
                this.getDBTransaction().commit();   
                createRowSetIterator.closeRowSetIterator();
            }      

            return "Y";
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while processing this batch." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    
    /**
     * Method sends batch to Shipping queue for further processing.
     * @return String returns success or error.
     **/
    public String sendToShipping(String retVal)
    {
        try 
        {
            Object headerIdO = RequestContext.getCurrentInstance().getPageFlowScope().get("P_HEADER_ID");
            Integer headerId = null;
            
            if (retVal != null && headerIdO != null) 
            {
                headerId = Integer.parseInt(headerIdO.toString());
                int count = 0;

                Row[] batch_id1;
                batch_id1 = this.getRmiBatchView1().getFilteredRows("OeHeaderId", headerId);   
                
                ViewObjectImpl batchDtlVo = this.getBatchDetailsView1();
                batchDtlVo.setNamedWhereClauseParam("pHeaderId", headerId);
                batchDtlVo.setNamedWhereClauseParam("pBatchId", null);
                batchDtlVo.executeQuery();
                
                batch_id1 = batchDtlVo.getAllRowsInRange();
                
                if(batch_id1.length > 0)
                {                
                    ViewObject wfView = getRmiWorkflowView1();
                    wfView.setNamedWhereClauseParam("pBatchId", Integer.parseInt(batch_id1[0].getAttribute("EsiBatchId").toString()));
                    wfView.executeQuery();
    
                    if(batch_id1.length > 0 && batch_id1[0].getAttribute("EsiBatchId") != null)
                    {                
    //                    rejectBatch(batch_id1[0].getAttribute("EsiBatchId"));
                        
                        RowSetIterator createRowSetIterator = wfView.createRowSetIterator(null);
                        while (createRowSetIterator.hasNext()) {
                            Row row = createRowSetIterator.next();
                            if(row.getAttribute("BatchStatus").toString().equalsIgnoreCase("Pending_Shipping")
                                && row.getAttribute("LastUpdatedRow").toString().equalsIgnoreCase("Y")){
                               count++;
                            }
                        }
                        createRowSetIterator.reset();
                        
                        if(count == 0)
                        {
                            Row createRow = wfView.createRow();
                            createRow.setAttribute("EsiBatchId", batch_id1[0].getAttribute("EsiBatchId"));
                            createRow.setAttribute("BatchStatus", "Pending_Shipping");
                            createRow.setAttribute("LastUpdatedRow", "Y");
                            wfView.insertRow(createRow);
                        }
                        
                        if(retVal.equalsIgnoreCase("all"))
                        {
                            while (createRowSetIterator.hasNext()) {
                                Row row = createRowSetIterator.next();
                                if (row.getAttribute("BatchStatus").toString().equalsIgnoreCase("Pending_ABN")){
                                    row.setAttribute("LastUpdatedRow", "N");
                                }
                            }    
                        }
    
                        retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.rmi_upd_seafarer_status_ship(?,?)", new Object[] {
                                                         batch_id1[0].getAttribute("EsiBatchId"),
                                                         headerId}); 
                        this.getDBTransaction().commit();
                        createRowSetIterator.closeRowSetIterator();
                    }
                }
            }

            return "Y";
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while processing this batch." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    
    /**
     * Method validates Acknowledgement status before sending the batch to Evaluator's queue for further processing.
     * @return String returns success or error.
     **/
    public String checkSendToEval()
    {
        try 
        {
            Row batchRow = this.getRmiBatchView2().getCurrentRow();
            String retVal = null;

            if (batchRow != null && batchRow.getAttribute("EsiBatchId") != null) {
                try {
                    this.getDBTransaction().postChanges();
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.rmi_chk_send_to_eval(?)", new Object[] {
                                                     batchRow.getAttribute("EsiBatchId") });
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while processing this batch." +
                                                             " Please contact your System Administrator." , 
                                                             "", FacesMessage.SEVERITY_ERROR);
                }
            }

            if (retVal != null && retVal.length() > 0)
                return retVal;
            else
                return "N";
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while processing this batch." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    
    /**
     * Method validates TC status before sending the batch to QA Processor's queue for further processing.
     * @return String returns success or error.
     **/
    public String checkSendToMtc()
    {
        try 
        {
            Row batchRow = this.getRmiBatchView2().getCurrentRow();
            String retVal = null;

            if (batchRow != null && batchRow.getAttribute("EsiBatchId") != null) {
                try {
                    this.getDBTransaction().postChanges();
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.rmi_chk_send_to_mtc(?)", new Object[] {
                                                     batchRow.getAttribute("EsiBatchId") });
                } catch (Exception e) {
                    e.printStackTrace();
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while processing this batch." +
                                                            " Please contact your System Administrator.",
                                                            "", FacesMessage.SEVERITY_ERROR);
                }
            }

            if (retVal != null && retVal.length() > 0)
                return retVal;
            else
                return "N";
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while processing this batch." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    
    /**
     * Method validates seafarers status before sending the batch to Evaluator's queue for further processing.
     * @return String returns success or error.
     **/
    public String checkSendToQa()
    {
        try 
        {
            Row batchRow = this.getRmiBatchView2().getCurrentRow();
            String retVal = null;

            if (batchRow != null && batchRow.getAttribute("EsiBatchId") != null) {
                try {
                    this.getDBTransaction().postChanges();
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.rmi_chk_send_to_qa(?)", new Object[] {
                                                     batchRow.getAttribute("EsiBatchId") });
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("There has been an error calling RMI_CHK_SEND_TO_QA function : ",
                                                  e.getMessage(), FacesMessage.SEVERITY_ERROR);
                }
            }

            if (retVal != null && retVal.length() > 0)
                return retVal;
            else
                return "N";
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while processing this batch." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    
    /**
     * Method validates if data vefification is done or not before sending the batch to Evaluator's queue for further processing.
     * @return String returns success or error.
     **/
    public String checkSendToAssignBook()
    {
        try 
        {
            Row batchRow = this.getRmiBatchView2().getCurrentRow();
            String retVal = null;

            if (batchRow != null && batchRow.getAttribute("EsiBatchId") != null) {
                try {
                    this.getDBTransaction().postChanges();
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.rmi_chk_send_to_abn(?)", new Object[] {
                                                     batchRow.getAttribute("EsiBatchId") });
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("There has been an error calling RMI_CHK_SEND_TO_ABN function : ",
                                                  e.getMessage(), FacesMessage.SEVERITY_ERROR);
                }
            }

            if (retVal != null && retVal.length() > 0)
                return retVal;
            else
                return "N";
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while processing this batch." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    
    /**
     * Method updated release status from the order and sets it to unhold.
     * @return String returns success or error.
     **/
    public String releaseOrderHold()
    {
        try 
        {
            Row odrHdrRow = this.getOrderHeaderView1().getCurrentRow();
            Row odrHdrHoldRow = this.getOrderHeaderHoldsView1().getCurrentRow();
            String[] retStat = null;

            if ((odrHdrRow != null && odrHdrRow.getAttribute("HeaderId") != null)
                && (odrHdrHoldRow != null && odrHdrHoldRow.getAttribute("HoldId") != null)) {
                retStat =
                    callReleaseHoldProc(((Integer) odrHdrRow.getAttribute("HeaderId")),
                                        null,
                                        (String) odrHdrRow.getAttribute("TransHoldReleaseReasonCode"),
                                        (String) odrHdrRow.getAttribute("TransReleaseReasonDesc"),
                                        (Integer) odrHdrHoldRow.getAttribute("HoldId"));
            }

            if (!(retStat.length > 1 && (retStat[1] != null && retStat[0].length() > 0))) {
                this.getDBTransaction().commit();
                this.getOrderHeaderView1().executeQuery();
                return retStat[1];
            } else
                return "N";
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while releasing order hold." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    
    /**
     * Method updated release status from the order and sets it to unhold.
     * @param headerId pass headerId from order table.
     * @param reasonCode pass reason code from the reason selected from the list.
     * @param reasonDesc pass reason description from the reason selected from the list.
     * @return String[] returns errorCode and errorMessage.
     **/
    public String[] callReleaseHoldProc(Integer headerId, Integer lineId, String reasonCode, String reasonDesc, Integer holdId)
    {
        CallableStatement st = null;
        String[] ret = { null, null };

        try {
            String sql = "begin RMI_SICD_PUB.release_credit_check_hold(?,?,?,?,?,?,?,?); end;";
            st = getDBTransaction().createCallableStatement(sql, this.getDBTransaction().DEFAULT);
            st.setObject(1, headerId);
            st.setObject(2, holdId);
            st.setObject(3, getUserId());
            st.setObject(4, reasonCode);
            st.setObject(5, reasonDesc);
            st.registerOutParameter(6, Types.VARCHAR);
            st.registerOutParameter(7, Types.VARCHAR);
            st.setObject(8, lineId);
            st.execute();
            ret[0] = ((st.getObject(6)) != null ? st.getObject(6).toString() : "");
            ret[1] = ((st.getObject(7)) != null ? st.getObject(7).toString() : "");
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
        return ret;
    }

    /**
     * Method updates item details of selected order line.
     * @return String returns success or error.
     **/
    public String updateLineItem()
    {
        try 
        {
            ViewObjectImpl lineView = this.getOrderLinesView1();
            Row lineRow = lineView.getCurrentRow();
            String retVal = null;

//            System.out.println("lineRow :: "+lineRow);
            if (lineRow != null) {
                
                System.out.println("TransShipCharges :: "+lineRow.getAttribute("TransShipCharges"));                
                System.out.println("InventoryItemId :: "+lineRow.getAttribute("InventoryItemId"));

                try {
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.update_line_item(?,?,?,?,?)", new Object[] {
                                                     lineRow.getAttribute("HeaderId"),
                                                     lineRow.getAttribute("LineId"),
                                                     lineRow.getAttribute("TransShipCharges"),
                                                     lineRow.getAttribute("TransItemUom"),
                                                     lineRow.getAttribute("InventoryItemId")
                                                     });
                    System.out.println("retVal :: "+retVal);
                } catch (Exception e) {
                    e.printStackTrace();
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating line details." +
                                                     " Please contact your System Administrator." , 
                                                     "", FacesMessage.SEVERITY_ERROR);
                }
                    this.getDBTransaction().commit();
                    getOrderHeaderView1().executeQuery();
                    lineView.executeQuery();
                if(retVal != null && retVal.trim().length() < 2)
                {
                }
            }

            return retVal;
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating line details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }

    /**
     * Method updates seafarer documents details from into RMI_SEAFARER tables.
     * @param batchId pass EsiBatchId of the selected batch.
     * @return String returns success or error.
     **/
    public String updateSeafarerDocsDetails(Integer batchId)
    {
        try 
        {
            Row ocRow = this.getOfficerCertificatesView1().getCurrentRow();
            String retVal = null;

            if (batchId != null && ocRow != null)
            {
                try {
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.update_seafarer_docs_details(?,?,?)", new Object[] {
                                                     batchId,
                                                     ocRow.getAttribute("SeafarerId"),
                                                     getUserId()});
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating Seafarer's endorsement details." +
                                                     " Please contact your System Administrator." , 
                                                     "", FacesMessage.SEVERITY_ERROR);
                }
                return retVal;
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating Seafarer's endorsement details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "Y";
    }

    /**
     * Method fetches document upload history for selected seafarer.
     * @param docCode pass document code of each document type, e.g. 0002.
     **/
    public void filterDocumentsHistory(String docCode)
    {
        try 
        {
            Row sfrrRow = this.getRmiSeafarerView1().getCurrentRow();
            if (sfrrRow != null) {
                ViewObjectImpl docVo = this.getRmiBatchDocumentsHistoryView1();
                docVo.setNamedWhereClauseParam("pDocCode", docCode);
                docVo.setNamedWhereClauseParam("pEsiBatchId", sfrrRow.getAttribute("EsiBatchId"));
                docVo.setNamedWhereClauseParam("pSeafarerId", sfrrRow.getAttribute("SeafarerId"));
                docVo.executeQuery();
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching Document upload history." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }

    /**
     * Method executes the OC & SQC views on refresh.
     **/
    public void refreshViews()
    {
        try {
            this.getDBTransaction().rollback();
            this.getRmiSeafarerView1().executeQuery();
            this.getRmiSeafarerDocsOcView1().executeQuery();
            this.getRmiSeafarerDocsSqcView1().executeQuery();
//            Row sfrrRow = this.getRmiSeafarerView1().getCurrentRow();
//            this.getRmiSeafarerView1().setCurrentRow(sfrrRow);
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while refreshing data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }

    /**
     * Method url for the file generated by merging all supporting documents including certificates.
     * @return String returns merged pdf file url.
     **/
    public String genMergedAllSupportingDocs()
    {
        try 
        {
            Row sfrrRow = this.getRmiSeafarerView1().getCurrentRow();

            if (sfrrRow != null) 
            {                
                    String identitydocPath = null;
                    String medicalphysicaledocPath = null;
                    String serviceTransPath = null;
                    String applicationedocPath = null;
                    String affidavitPath = null;
                    String securitysatedocPath = null;
                    String consentdocPath = null;
                    String internaledocPath = null;
                    List<InputStream> inputPdfList = null;
                    inputPdfList = new ArrayList<InputStream>();
                    ViewObjectImpl docLnkVo = this.getGetDocumentLinkView1();
                    Row[] docLnkRows;

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow.getAttribute("IdentityDocEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                        identitydocPath = docLnkRows[0].getAttribute("DocPath").toString();
                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow.getAttribute("PhysicalEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                        medicalphysicaledocPath = docLnkRows[0].getAttribute("DocPath").toString();
                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow.getAttribute("SeaserviceTranscriptEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                        serviceTransPath = docLnkRows[0].getAttribute("DocPath").toString();
                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow.getAttribute("ApplicationEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                        applicationedocPath = docLnkRows[0].getAttribute("DocPath").toString();
                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow.getAttribute("AffidavitEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                        affidavitPath = docLnkRows[0].getAttribute("DocPath").toString();
                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow.getAttribute("SatEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                        securitysatedocPath = docLnkRows[0].getAttribute("DocPath").toString();
                    }

//                    docLnkVo.setWhereClause(null);
//                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow.getAttribute("ConsentEdocId"));
//                    docLnkVo.executeQuery();
//
//                    docLnkRows = docLnkVo.getAllRowsInRange();
//
//                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
//                        consentdocPath = docLnkRows[0].getAttribute("DocPath").toString();
//                    }

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow.getAttribute("InternalEdocId"));
                    docLnkVo.executeQuery();

                    docLnkRows = docLnkVo.getAllRowsInRange();

                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                        internaledocPath = docLnkRows[0].getAttribute("DocPath").toString();
                    }
                    
                    RowSetIterator ocRsi = getRmiSeafarerDocsOcView1().createRowSetIterator(null);                    
                    RowSetIterator sqcRsi = getRmiSeafarerDocsSqcView1().createRowSetIterator(null);
                    String[] ocEdocId = new String[500];
                    String[] ocSuppEdocId = new String[500];
                    String[] sqcEdocId = new String[500];
                    String[] sqcSuppEdocId = new String[500];
                    Integer ocEdocIdCnt = 0;
                    Integer ocSuppEdocIdCnt = 0;
                    Integer sqcEdocIdCnt = 0;
                    Integer sqcSuppEdocIdCnt = 0;
                    
                    while(ocRsi.hasNext())
                    {
                        Row r = ocRsi.next();
                        if(r != null)
                        {
                            if(r.getAttribute("EdocId") != null)
                            {                                
                                docLnkVo.setWhereClause(null);
                                docLnkVo.setNamedWhereClauseParam("pEdocId", r.getAttribute("EdocId"));
                                docLnkVo.executeQuery();

                                docLnkRows = docLnkVo.getAllRowsInRange();

                                if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                                    System.out.println("ocEdocId :: "+r.getAttribute("EdocId"));
                                    System.out.println("url :: "+docLnkRows[0].getAttribute("DocPath"));
                                    ocEdocId[ocEdocIdCnt] = docLnkRows[0].getAttribute("DocPath").toString();
                                }
                                ocEdocIdCnt = ocEdocIdCnt + 1;
                            }
                            
                            if(r.getAttribute("SupportEdocId") != null)
                            {
                                docLnkVo.setWhereClause(null);
                                docLnkVo.setNamedWhereClauseParam("pEdocId", r.getAttribute("SupportEdocId"));
                                docLnkVo.executeQuery();

                                docLnkRows = docLnkVo.getAllRowsInRange();

                                if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                                    System.out.println("ocSupportEdocId :: "+r.getAttribute("SupportEdocId"));
                                    System.out.println("url :: "+docLnkRows[0].getAttribute("DocPath"));
                                    ocSuppEdocId[ocSuppEdocIdCnt] = docLnkRows[0].getAttribute("DocPath").toString();
                                }
                                ocSuppEdocIdCnt = ocSuppEdocIdCnt + 1;
                            }
                        }
                    }
                    ocRsi.closeRowSetIterator();
                    
                    while(sqcRsi.hasNext())
                    {
                        Row r = sqcRsi.next();
                        if(r != null)
                        {
                            if(r.getAttribute("EdocId") != null)
                            {                                
                                docLnkVo.setWhereClause(null);
                                docLnkVo.setNamedWhereClauseParam("pEdocId", r.getAttribute("EdocId"));
                                docLnkVo.executeQuery();
    
                                docLnkRows = docLnkVo.getAllRowsInRange();
    
                                if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                                    System.out.println("sqcEdocId :: "+r.getAttribute("EdocId"));
                                    System.out.println("url :: "+docLnkRows[0].getAttribute("DocPath"));
                                    sqcEdocId[sqcEdocIdCnt] = docLnkRows[0].getAttribute("DocPath").toString();
                                }
                                sqcEdocIdCnt = sqcEdocIdCnt + 1;
                            }
                            
                            if(r.getAttribute("SupportEdocId") != null)
                            {
                                docLnkVo.setWhereClause(null);
                                docLnkVo.setNamedWhereClauseParam("pEdocId", r.getAttribute("SupportEdocId"));
                                docLnkVo.executeQuery();
    
                                docLnkRows = docLnkVo.getAllRowsInRange();
    
                                if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {
                                    System.out.println("sqcSupportEdocId :: "+r.getAttribute("SupportEdocId"));
                                    System.out.println("url :: "+docLnkRows[0].getAttribute("DocPath"));
                                    sqcSuppEdocId[sqcSuppEdocIdCnt] = docLnkRows[0].getAttribute("DocPath").toString();
                                }
                                sqcSuppEdocIdCnt = sqcSuppEdocIdCnt + 1;
                            }
                        }
                    }
                    sqcRsi.closeRowSetIterator();
                    
//                    identitydocPath = "D://WIP/Document/1369390-0001-001.pdf";                    
//                    medicalphysicaledocPath = "D://WIP/Document/1369390-0003-001.pdf";                    
//                    serviceTransPath = "D://WIP/Document/1369390-0004-001.pdf";                      
//                    applicationedocPath = "D://WIP/Document/1369390-0006-001.pdf";                    
//                    affidavitPath = "D://WIP/Document/1369390-0006-002.pdf";                  
//                    securitysatedocPath = "D://WIP/Document/1369390-0006-003.pdf";                  
//                    consentdocPath = "D://WIP/Document/1369390-0006-004.pdf";              
//                    internaledocPath = "D://WIP/Document/1369390-0008-001.pdf";
//                    String url = "D://WIP/Document/1369390-0016-001.pdf"; 
//                    String url2 = "D://WIP/Document/1369390-0005-001.pdf";
                    
//                    System.out.println("IdentityDocEdocId :: "+sfrrRow.getAttribute("IdentityDocEdocId"));                    
//                    System.out.println("PhysicalEdocId :: "+sfrrRow.getAttribute("PhysicalEdocId"));                    
//                    System.out.println("SeaserviceTranscriptEdocId :: "+sfrrRow.getAttribute("SeaserviceTranscriptEdocId"));                    
//                    System.out.println("ApplicationEdocId :: "+sfrrRow.getAttribute("ApplicationEdocId"));                    
//                    System.out.println("AffidavitEdocId :: "+sfrrRow.getAttribute("AffidavitEdocId"));                    
//                    System.out.println("SatEdocId :: "+sfrrRow.getAttribute("SatEdocId"));                    
//                    System.out.println("ConsentEdocId :: "+sfrrRow.getAttribute("ConsentEdocId"));                    
//                    System.out.println("InternalEdocId :: "+sfrrRow.getAttribute("InternalEdocId"));
//                    
//                    System.out.println("identitydocPath =" + identitydocPath);
//                    System.out.println("medicalphysicaledocPath =" + medicalphysicaledocPath);
//                    System.out.println("serviceTransPath =" + serviceTransPath);
//                    System.out.println("applicationedocPath =" + applicationedocPath);
//                    System.out.println("affidavitPath =" + affidavitPath);
//                    System.out.println("securitysatedocPath =" + securitysatedocPath);
//                    System.out.println("consentdocPath =" + consentdocPath);
//                    System.out.println("internaledocPath =" + internaledocPath);    
//                    System.out.println("url =" + url);          
//                    System.out.println("url2 =" + url2);                   

                    try {
                        
                        if (sfrrRow.getAttribute("IdentityDocEdocId") != null) {
//                            try {
//                                inputPdfList.add(new URL(null,identitydocPath,new sun.net.www.protocol.https.Handler()).openStream());
//                            } catch (Exception e) {
//                                //System.out.println("inside identitydocPath exception :: " + e.getMessage());
//                            }
                            inputPdfList.add(getInputStreamFromFile(identitydocPath));
                        }

                        if (sfrrRow.getAttribute("PhysicalEdocId") != null) {
//                            try {
//                                inputPdfList.add(new URL(null,medicalphysicaledocPath,new sun.net.www.protocol.https.Handler()).openStream());
//                            } catch (Exception e) {
//                                //System.out.println("inside medicalphysicaledocPath exception :: " + e.getMessage());
//                            }
                            inputPdfList.add(getInputStreamFromFile(medicalphysicaledocPath));
                        }
                        
                        if (sfrrRow.getAttribute("SeaserviceTranscriptEdocId") != null) {
//                            try {
//                                inputPdfList.add(new URL(null,serviceTransPath,new sun.net.www.protocol.https.Handler()).openStream());
//                            } catch (Exception e) {
//                                //System.out.println("inside serviceTransPath exception :: " + e.getMessage());
//                            }
                            inputPdfList.add(getInputStreamFromFile(serviceTransPath));
                        }
                        
                        if (sfrrRow.getAttribute("ApplicationEdocId") != null) {
//                            try {
//                                inputPdfList.add(new URL(null,applicationedocPath,new sun.net.www.protocol.https.Handler()).openStream());
//                            } catch (Exception e) {
//                                //System.out.println("inside applicationedocPath exception :: " + e.getMessage());
//                            }
                            inputPdfList.add(getInputStreamFromFile(applicationedocPath));
                        }
                        
                        if (sfrrRow.getAttribute("AffidavitEdocId") != null) {
//                            try {
//                                inputPdfList.add(new URL(null,affidavitPath,new sun.net.www.protocol.https.Handler()).openStream());
//                            } catch (Exception e) {
//                                //System.out.println("inside affidavitPath exception :: " + e.getMessage());
//                            }                                           
                            inputPdfList.add(getInputStreamFromFile(affidavitPath));
                        }
                        
                        if (sfrrRow.getAttribute("SatEdocId") != null) {
//                            try {
//                                inputPdfList.add(new URL(null,securitysatedocPath,new sun.net.www.protocol.https.Handler()).openStream());
//                            } catch (Exception e) {
//                                //System.out.println("inside securitysatedocPath exception :: " + e.getMessage());
//                            }
                            inputPdfList.add(getInputStreamFromFile(securitysatedocPath));
                        }

//                        if (sfrrRow.getAttribute("ConsentEdocId") != null) {
//                            try {
//                                inputPdfList.add(new URL(null,consentdocPath,new sun.net.www.protocol.https.Handler()).openStream());
//                            } catch (Exception e) {
//                                //System.out.println("inside consentdocPath exception :: " + e.getMessage());
//                            }
//                            inputPdfList.add(getInputStreamFromFile(consentdocPath));
//                        }

                        if (sfrrRow.getAttribute("InternalEdocId") != null) {
//                            try {
//                                inputPdfList.add(new URL(null,internaledocPath,new sun.net.www.protocol.https.Handler()).openStream());
//                            } catch (Exception e) {
//                                System.out.println("inside internaledocPath exception :: " + e.getMessage());
//                            }
                            inputPdfList.add(getInputStreamFromFile(internaledocPath)); 
                        }
                        
                        for(String url : ocEdocId)
                        {                            
                            if (url != null) {
//                                try {
//                                    inputPdfList.add(new URL(null,url,new sun.net.www.protocol.https.Handler()).openStream());
//                                } catch (Exception e) {
//                                    //System.out.println("inside identitydocPath exception :: " + e.getMessage());
//                                }
                                inputPdfList.add(getInputStreamFromFile(url));
                            }
                        }
                        
                        for(String url : sqcEdocId)
                        {                            
                            if (url != null) {
//                                try {
//                                    inputPdfList.add(new URL(null,url,new sun.net.www.protocol.https.Handler()).openStream());
//                                } catch (Exception e) {
//                                    //System.out.println("inside identitydocPath exception :: " + e.getMessage());
//                                }
                                inputPdfList.add(getInputStreamFromFile(url));
                            }
                        }
                        
//                        String folderPath = "D://WIP";
//                        String folderPath = "/tmp/IRI_SEAFARER_REBUILD/"; 
//                        String folderPath = "/irid/oracle_files/DEV/seaf_doc";
                        String folderPath = "/iridr/oracle_files/DR/seaf_doc/";
//                        String folderPath = "/irip/oracle_files/PROD/seaf_doc";
//                        File folder = new File(folderPath);
//                        boolean folderExists = folder.exists();
//                                                
//                        if(!folderExists)
//                            createDocumentPreviewFolderWithPerms(folderPath);

                        String fileName =
                            folderPath + "/mergedfile_"+getUserId()+".pdf";
                        OutputStream outputStream = new FileOutputStream(fileName);
                        mergePdfFiles(inputPdfList, outputStream);

                        return (fileName);

                    } catch (Exception e) {
                        e.printStackTrace();
                AdfUtils.addFormattedFacesErrorMessage(e.getMessage() , 
                                                          "", FacesMessage.SEVERITY_ERROR);
//                        AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while generating supporting documents." +
//                                                         " Please contact your System Administrator." , 
//                                                         "", FacesMessage.SEVERITY_ERROR);
                    }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage(e.getMessage() , 
                                                      "", FacesMessage.SEVERITY_ERROR);
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while generating supporting documents." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR);
        }
                
        return null;
    }

    public InputStream getInputStreamFromFile(String filePath)
    {
        InputStream inputStream = null;
        try 
        {
            if(filePath != null)
            {
                File file = new File(filePath);
                System.out.println("fileName :: "+file.getName());
                inputStream = new FileInputStream(file);
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        
        return inputStream;
    }

    /**
     * Method url for the file generated of Data privacy consent.
     * @return String returns merged pdf file url.
     **/
    public String genDataPrivacyConsent()
    {
        try 
        {
            Row sfrrRow = this.getRmiSeafarerView1().getCurrentRow();

            if (sfrrRow != null) 
            {                
                    String consentdocPath = null;
                    List<InputStream> inputPdfList = null;
                    inputPdfList = new ArrayList<InputStream>();
                    ViewObjectImpl docLnkVo = this.getGetDocumentLinkView1();
                    Row[] docLnkRows;

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow.getAttribute("ConsentEdocId"));
                    docLnkVo.executeQuery();
    
                    docLnkRows = docLnkVo.getAllRowsInRange();
    
//                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("DocPath") != null) {    
                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("EdocId") != null) {
                        consentdocPath = docLnkRows[0].getAttribute("EdocId").toString();
                    }
                    
                    System.out.println("consentdocPath =" + consentdocPath);
                    try {
//
//                            if (sfrrRow.getAttribute("ConsentEdocId") != null) {
//                                try {
//                                    inputPdfList.add(new URL(null,consentdocPath, new sun.net.www.protocol.https.Handler()).openStream());
//                                } catch (Exception e) {
//                                    e.printStackTrace();
//                                    System.out.println("inside consentdocPath exception :: " + e.getMessage());
//                                }
//                            }
//                        String folderPath = "D://WIP";
//                        String folderPath = "/tmp/IRI_SEAFARER_REBUILD/";  
//                        File folder = new File(folderPath);
//                        boolean folderExists = folder.exists();
//                                                
//                        if(!folderExists)
//                            createDocumentPreviewFolderWithPerms(folderPath);
//
//                        String fileName =
//                            folderPath + "/mergedfile_"+getUserId()+".pdf";
                        
//                        String fileName = "/tmp/IRI_SEAFARER_REBUILD/mergedfile_"+getUserId()+".pdf";
//                        OutputStream outputStream = new FileOutputStream(fileName);
//                        mergePdfFiles(inputPdfList, outputStream);
//                        AdfUtils.addFormattedFacesErrorMessage("Data Privacy Consent URL :: " +
//                                                                    consentdocPath , 
//                                                                  "", FacesMessage.SEVERITY_INFO);
//                        return (fileName);
                        return consentdocPath;

                    } catch (Exception e) {
                        e.printStackTrace();
                        AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while generating supporting documents." +
                                                         " Please contact your System Administrator." , 
                                                         "", FacesMessage.SEVERITY_ERROR);
                    }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while generating supporting documents." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }                
        return null;
    }

    /**
     * Method checks whether the seafarer is available to edit or not.
     * @return String returns Y-Yes, N-No.
     **/
    public String isSeafarerDisabled()
    {
        try 
        {
            Row sfrrRow = this.getRmiSeafarerView1().getCurrentRow();

            if (sfrrRow != null) {
                if (sfrrRow.getAttribute("TransSeafarerStatus") != null &&
                    sfrrRow.getAttribute("SeafarerWfStatus") != null) {
                    if (!(sfrrRow.getAttribute("TransSeafarerStatus").toString().equalsIgnoreCase(sfrrRow.getAttribute("SeafarerWfStatus").toString()))) {
                        return "Y";
                    }
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching Seafarer status." +
                                                      " Please contact your System Administrator.",
                                                      "", FacesMessage.SEVERITY_ERROR);
        }
        
        return "N";
    }

    /**
     * Method url for the file generated of Additional Documents uploaded by user.
     * @return String returns merged pdf file url.
     **/
    public String genAdditionalDocs()
    {
        try 
        {
            Row sfrrRow = this.getRmiSeafarerView1().getCurrentRow();

            if (sfrrRow != null) 
            {                
                    String additionalEdocPath = null;
                    List<InputStream> inputPdfList = null;
                    inputPdfList = new ArrayList<InputStream>();
                    ViewObjectImpl docLnkVo = this.getGetDocumentLinkView1();
                    Row[] docLnkRows;

                    docLnkVo.setWhereClause(null);
                    docLnkVo.setNamedWhereClauseParam("pEdocId", sfrrRow.getAttribute("AdditionalDocEdocId"));
                    docLnkVo.executeQuery();
    
                    docLnkRows = docLnkVo.getAllRowsInRange();
    
                    if (docLnkRows.length > 0 && docLnkRows[0].getAttribute("EdocId") != null) {
                        additionalEdocPath = docLnkRows[0].getAttribute("EdocId").toString();
                    }
                    
                    System.out.println("additionalEdocPath =" + additionalEdocPath);
                    try {

//                            if (sfrrRow.getAttribute("AdditionalDocEdocId") != null) {
//                                try {
//                                    inputPdfList.add(new URL(null,additionalEdocPath,new sun.net.www.protocol.https.Handler()).openStream());
//                                } catch (Exception e) {
//                                    //System.out.println("inside additionalEdocPath exception :: " + e.getMessage());
//                                }
//                            }                                              
//                        String folderPath = "
                        //WIP";
//                        String folderPath = "/tmp/IRI_SEAFARER_REBUILD/";  
//                        File folder = new File(folderPath);
//                        boolean folderExists = folder.exists();
//                                                
//                        if(!folderExists)
//                            createDocumentPreviewFolderWithPerms(folderPath);
//
//                        String fileName =
//                            folderPath + "/mergedfile_"+getUserId()+".pdf";
//                        
//                        String fileName = "/tmp/IRI_SEAFARER_REBUILD/mergedfile_"+getUserId()+".pdf";
//                        OutputStream outputStream = new FileOutputStream(fileName);
//                        mergePdfFiles(inputPdfList, outputStream);

                        return (additionalEdocPath);

                    } catch (Exception e) {
                        AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while generating additional documents." +
                                                         " Please contact your System Administrator." , 
                                                         "", FacesMessage.SEVERITY_ERROR);
                    }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while generating aditional documents." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }                
        return null;
    }

    /**
     * Sends email notification for any deficient document,
     *  or TC hold of any seafarer in the given batch.
     * @return String returns Success-Y/ Error-N.
     **/
    public String sendDeficientDocumentNotification()
    {
        String retVal = "Y";
        try 
        {
            Row sfrrRow = this.getRmiSeafarerView1().getCurrentRow();
            
            if (sfrrRow != null && sfrrRow.getAttribute("EsiBatchId") != null)
            {
                Connection con = null;
                CallableStatement st = null;
                PreparedStatement ps = null;
                DBTransaction dbTransaction = null;
               
               try 
               {
                        dbTransaction = (DBTransaction) this.getTransaction();
                        ps = dbTransaction.createPreparedStatement("select * from dual", 0);
                        ps.execute();
                        con = ps.getConnection();
                        st = con.prepareCall("call RMI_SICD_PUB.send_notice(?,?)");
                        st.setInt(1, Integer.parseInt(sfrrRow.getAttribute("EsiBatchId").toString()));
                        st.setInt(2, Integer.parseInt(sfrrRow.getAttribute("EsiId").toString()));
                        st.execute();
                   
//                        System.out.println("EsiBatchId :: "+sfrrRow.getAttribute("EsiBatchId"));
                   
                        this.getRmiSeafarerView1().executeQuery();
                        this.getRmiSeafarerView1().setCurrentRow(sfrrRow);
                    }
                    catch (Exception e) {
                        e.printStackTrace();
                            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while sending email notification." +
                                                                   " Please contact your System Administrator.", "",
                                                                   FacesMessage.SEVERITY_ERROR);
                    } finally {
                        try {
                            if (st != null) {
                                st.close();
                            }
                            if (ps != null) {
                                ps.close();
                            }
                        } catch (SQLException sqle) {
                            sqle.printStackTrace();
                            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while sending email notification." +
                                                                   " Please contact your System Administrator.", "",
                                                                   FacesMessage.SEVERITY_ERROR);
                        }
                    }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while sending email notification." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return retVal;
    }
    
    /**
     * Method validates if either seafarer is Approved or TC is approved.
     * @return String returns Y if any of the both is true else N.
     **/
    public String validateSeafarersDeficientDocument()
    {
        try 
        {
            ViewObjectImpl sfrrVo = this.getRmiSeafarerView1();
            String seafarerWcStatus = null;

//            RowSetIterator sfrrVoRsi = sfrrVo.createRowSetIterator(null);
//            while (sfrrVoRsi.hasNext()) {
//            }
//            sfrrVoRsi.closeRowSetIterator();
            
                Row r = sfrrVo.getCurrentRow();
                if (r != null && r.getAttribute("SeafarerId") != null) {
                    seafarerWcStatus = getSeafarerTcStatus((Integer) r.getAttribute("SeafarerId"));

                    if (r.getAttribute("SeafarerGrdStatus") != null &&
                        r.getAttribute("SeafarerGrdStatus").toString().trim().equalsIgnoreCase("Rejected"))
                    {
                        return "Y";
                    }
                    else if (seafarerWcStatus != null &&
                             !(seafarerWcStatus.trim().equalsIgnoreCase("Approved") ||
                               seafarerWcStatus.trim().equalsIgnoreCase("Provisional") ||
                               seafarerWcStatus.trim().equalsIgnoreCase("Legal Review") ||
                               seafarerWcStatus.trim().equalsIgnoreCase("Senior Legal Review")))
                    {
                        return "Y";
                    }
                }            
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while validating Deficient document." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        
        return "N";
    }
    
    /**
     * Method validates if all seafarer's TC is Legal Review or not.
     * @return String returns Y if any of any seafarer TC status is Legal Review is true else N.
     **/
    public String validateSeafarerLegalReview()
    {
        try 
        {
            ViewObjectImpl sfrrVo = this.getRmiSeafarerView1();
            RowSetIterator sfrrVoRsi = sfrrVo.createRowSetIterator(null);
            String seafarerWcStatus = null;

            while (sfrrVoRsi.hasNext()) {
                Row r = sfrrVoRsi.next();

                if (r != null && r.getAttribute("SeafarerId") != null) {
                    seafarerWcStatus = getSeafarerTcStatus((Integer) r.getAttribute("SeafarerId"));

                    if (seafarerWcStatus != null &&
                        !(seafarerWcStatus.trim().equalsIgnoreCase("Approved") ||
                          seafarerWcStatus.trim().equalsIgnoreCase("Provisional") ||
                          seafarerWcStatus.trim().equalsIgnoreCase("Legal Review") ||
                          seafarerWcStatus.trim().equalsIgnoreCase("Senior Legal Review")))
                        return "Y";
                }
            }
            sfrrVoRsi.closeRowSetIterator();
            
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while validating Deficient document." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        
        return "N";
    }
    
    /**
     * Method returns seafarer TC status.
     * @param seafarerId pass seafarer ID for which TC status if required.
     * @return String returns seafarer TC status.
     **/
    public String getSeafarerTcStatus(Integer seafarerId)
    {
        if(seafarerId != null)
        {
            Connection con = null;
            CallableStatement st = null;
            PreparedStatement ps = null;
            DBTransaction dbTransaction = null;
            String seafarerWcStatus = null;
            
            try 
            {
                dbTransaction = (DBTransaction) this.getTransaction();
                ps = dbTransaction.createPreparedStatement("select * from dual", 0);
                ps.execute();
                con = ps.getConnection();
                st = con.prepareCall("{? = call RMI_SICD_PUB.get_seafarer_wc_status(?)}");
                st.registerOutParameter(1, Types.VARCHAR);                
                st.setInt(2, seafarerId);
                st.execute();
                
                if(st.getString(1) != null)
                {
                    String[] arrSplit = st.getString(1).split(",");
                    if (arrSplit.length > 1)
                        seafarerWcStatus = arrSplit[0];
                    
                    return seafarerWcStatus;
                }
                
                return st.getString(1);
            } catch (Exception e) {
                            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching TC details." +
                                                             " Please contact your System Administrator." ,
                                                             "", FacesMessage.SEVERITY_ERROR);
            }
        }
        return "Not Available";
    }
    
    /**
     * Method validates if notes are added for each seafarer before sending Deficient notification.
     * @return String returns N if any seafarer TC notes are not added true else Y.
     **/
    public String validateLegalNotes()
    {
        try 
        {
            ViewObjectImpl sfrrVo = this.getRmiSeafarerView1();
            String seafarerWcStatus = null;
            
                Row r = sfrrVo.getCurrentRow();

                if (r != null && r.getAttribute("SeafarerId") != null) {
                    seafarerWcStatus = getSeafarerTcStatus((Integer) r.getAttribute("SeafarerId"));

//                    System.out.println("seafarerWcStatus in validateLegalNotes :: "+seafarerWcStatus);
                    
                    if (seafarerWcStatus != null &&
                        (seafarerWcStatus.trim().equalsIgnoreCase("Legal Review") || seafarerWcStatus.trim().equalsIgnoreCase("Senior Legal Review"))
                        && !(r.getAttribute("Notes") != null && r.getAttribute("Notes").toString().length() > 0))
                    {
                        return "N";
                    }
                }
            
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while validating Deficient document." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        
        return "Y";   
    }

    /**
     * Sends email notification for any deficient document reported by QA,
     *  of any seafarer in the given batch.
     * @return String returns Success-Y/ Error-N.
     **/
    public String sendDeficientDocumentNotificationQa()
    {
        String retVal = "Y";
        try 
        {
            Row sfrrRow = this.getRmiSeafarerView1().getCurrentRow();
            
            if (sfrrRow != null && sfrrRow.getAttribute("EsiBatchId") != null)
            {
                Connection con = null;
                CallableStatement st = null;
                PreparedStatement ps = null;
                DBTransaction dbTransaction = null;
               try 
               {
                        dbTransaction = (DBTransaction) this.getTransaction();
                        dbTransaction.postChanges();
                        ps = dbTransaction.createPreparedStatement("select * from dual", 0);
                        ps.execute();
                        con = ps.getConnection();
                        st = con.prepareCall("call RMI_SICD_PUB.send_notice_verify(?,?,?)");
                        st.setInt(1, Integer.parseInt(sfrrRow.getAttribute("EsiBatchId").toString()));
                        st.setInt(2, Integer.parseInt(sfrrRow.getAttribute("EsiId").toString()));
                        st.setInt(3, getUserId());
                        st.execute();                   

                        this.getRmiSeafarerView1().executeQuery();
                        this.getRmiSeafarerView1().setCurrentRow(sfrrRow);                   
                    }
                    catch (Exception e) {
                        e.printStackTrace();
                        AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while sending email notification." +
                                                                   " Please contact your System Administrator.", "",
                                                                   FacesMessage.SEVERITY_ERROR);
                    } finally {
                        try {
                            if (st != null) {
                                st.close();
                            }
                            if (ps != null) {
                                ps.close();
                            }
                        } catch (SQLException sqle) {
                            sqle.printStackTrace();
                            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while sending email notification." +
                                                                   " Please contact your System Administrator.", "",
                                                                   FacesMessage.SEVERITY_ERROR);
                        }
                    }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while sending email notification." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return retVal;
    }
    
    
    /**
     * Method verifies seafarer data based on some checks done by QA Processor.
     **/
    public String verifySeafarerData()
    {
        String retVal = null;
        try 
        {
            Row seafarer;
            seafarer = this.getRmiSeafarerView1().getCurrentRow();
            Row batchRow = this.getRmiBatchView2().getCurrentRow();
            
            if (seafarer != null && batchRow != null) 
            {
                this.getDBTransaction().postChanges();
                try {
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.verify_seafarer_data(?,?,?,?,?,?)", new Object[] {
                                                     seafarer.getAttribute("SeafarerId"),
                                                     seafarer.getAttribute("EsiBatchId"),
                                                     seafarer.getAttribute("EsiId"),
                                                     getUserId(),
                                                     batchRow.getAttribute("OeHeaderId"),
                                                     "QA"
                    });

                    this.getDBTransaction().commit();
                    
                    if (null != retVal && retVal.equalsIgnoreCase("Y"))
                    {
                        this.getRmiSeafarerView1().executeQuery();
                        this.getRmiSeafarerView1().setCurrentRow(seafarer);
                    }
                    else
                    {
                        this.getDBTransaction().rollback();                       
                    }
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage(e.getMessage(), null, FacesMessage.SEVERITY_ERROR);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while verifying seafarer." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
       return retVal; 
    }    
    
    /**
     * Method validates if any document/certificate is not verified before verifying seafarer data.
     * @return String returns the document name if found else returns Y.
     **/
    public String validateVerifySeafarerData()
    {
        try 
        {
            ViewObjectImpl sfrrVo = this.getRmiSeafarerView1();
            Row sfrrRow = sfrrVo.getCurrentRow();

            if (sfrrRow != null && sfrrRow.getAttribute("EsiId") != null) 
            {
                if ((sfrrRow.getAttribute("DataVerifiedInfo") == null) || 
                    (sfrrRow.getAttribute("DataVerifiedInfo") != null && (sfrrRow.getAttribute("DataVerifiedInfo").toString().equalsIgnoreCase("No")))) {
                    return "Basic Information => Data Verified";
                }           
                if ((sfrrRow.getAttribute("PhotoVerified") == null) || 
                    (sfrrRow.getAttribute("PhotoVerified") != null && sfrrRow.getAttribute("PhotoVerified").toString().equalsIgnoreCase("No"))) {
                    return "Uploaded Documents => Photo Uploaded";
                }
                if ((sfrrRow.getAttribute("IdentityDocVerified") == null) || 
                    (sfrrRow.getAttribute("IdentityDocVerified") != null && sfrrRow.getAttribute("IdentityDocVerified").toString().equalsIgnoreCase("No"))) {
                    return "Uploaded Documents => Identity Document";
                }
                if ((sfrrRow.getAttribute("PhysicalVerified") == null) || 
                    (sfrrRow.getAttribute("PhysicalVerified") != null && sfrrRow.getAttribute("PhysicalVerified").toString().equalsIgnoreCase("No"))) {
                    return "Uploaded Documents => Medical Examination Report";
                }
                if ((sfrrRow.getAttribute("SeaserviceVerified") == null) || 
                    (sfrrRow.getAttribute("SeaserviceVerified") != null && sfrrRow.getAttribute("SeaserviceVerified").toString().equalsIgnoreCase("No"))) {
                    return "Uploaded Documents => Sea Service Transcript";
                }
                if ((sfrrRow.getAttribute("ApplicationVerified") == null) || 
                    (sfrrRow.getAttribute("ApplicationVerified") != null && sfrrRow.getAttribute("ApplicationVerified").toString().equalsIgnoreCase("No"))) {
                    return "Uploaded Documents => Application";
                }
                if ((sfrrRow.getAttribute("AffidavitVerified") == null) || 
                    (sfrrRow.getAttribute("AffidavitVerified") != null && sfrrRow.getAttribute("AffidavitVerified").toString().equalsIgnoreCase("No"))) {
                    return "Uploaded Documents => Affidavit";
                }
                if ((sfrrRow.getAttribute("SatVerified") == null) || 
                    (sfrrRow.getAttribute("SatVerified") != null && sfrrRow.getAttribute("SatVerified").toString().equalsIgnoreCase("No"))) {
                    return "Uploaded Documents => Security Awareness";
                }
                if ((sfrrRow.getAttribute("ConVerified") == null) || 
                    (sfrrRow.getAttribute("ConVerified") != null && sfrrRow.getAttribute("ConVerified").toString().equalsIgnoreCase("No"))) {
                    return "Uploaded Documents => Data Privacy Consent";
                }
                if ((sfrrRow.getAttribute("BookVerified") == null) || 
                    (sfrrRow.getAttribute("BookVerified") != null && sfrrRow.getAttribute("BookVerified").toString().equalsIgnoreCase("No"))) {
                    return "SQC's Requested => Seafarer Book Verified";
                } 
                if ((sfrrRow.getAttribute("IdCardVerified") == null) || 
                    (sfrrRow.getAttribute("IdCardVerified") != null && sfrrRow.getAttribute("IdCardVerified").toString().equalsIgnoreCase("No"))) {
                    return "SQC's Requested => Seafarer ID Card Verified";
                } 
            }                 

            ViewObjectImpl ocDocVo = this.getRmiSeafarerDocsOcView1();
            RowSetIterator ocDocRsi = ocDocVo.createRowSetIterator(null);

            while (ocDocRsi.hasNext()) {
                Row r = ocDocRsi.next();
                if (r != null) {
                    if ((r.getAttribute("DataVerified") == null) || 
                        (r.getAttribute("DataVerified") != null && r.getAttribute("DataVerified").toString().equalsIgnoreCase("No"))) {
                        return "OC's Requested => Data Verified";
                    }
                }
            }             
            
            ViewObjectImpl sqcDocVo = this.getRmiSeafarerDocsSqcView1();
            RowSetIterator sqcDocRsi = sqcDocVo.createRowSetIterator(null);

            while (sqcDocRsi.hasNext()) {
                Row r = sqcDocRsi.next();
                if (r != null) {
                    if ((r.getAttribute("DataVerified1") == null) || 
                        (r.getAttribute("DataVerified1") != null && r.getAttribute("DataVerified1").toString().equalsIgnoreCase("No"))) {
                        return "SQC's Requested => Data Verified";
                    }
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while verifying seafarer data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        
        return "Y";    
    }

    /**
     * Method gives print command to the printer mapped with user,
     *  to print the order details on Search Order screen.
     * @return String returns success or error.
     **/
    public String printSearchOrder()
    {
        try 
        {
            String retVal = null;
            Row orderHeaderRow = this.getOrderHeaderView1().getCurrentRow();

            if (orderHeaderRow != null && orderHeaderRow.getAttribute("HeaderId") != null) 
            {
                try {
//                        System.out.println("PrintReportRequestSet :: "+orderHeaderRow.getAttribute("PrintReportRequestSet"));
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.print_order(?,?,?,?)", new Object[] {
                                                     orderHeaderRow.getAttribute("HeaderId"),
                                                     ((orderHeaderRow.getAttribute("PrintReportRequestSet") != null)
                                                         ? orderHeaderRow.getAttribute("PrintReportRequestSet")
                                                         : "SICD010"),
                                                     null, getUserId()
                    });
                } catch (Exception e) {
                    e.printStackTrace();
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while printing order." +
                                                            " Please contact your System Administrator.",
                                                            "", FacesMessage.SEVERITY_ERROR);
                }
            }
            
            if (retVal != null && retVal.length() > 0)
                return retVal;
            else
                return "N";
        } catch (Exception nfe) {
            nfe.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while printing order." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }

    /**
     * Method gives print command to the printer mapped with user to print the Seafarer Document details.
     * @return String returns success or error.
     **/
    public String printSeafarerDocument()
    {
        try 
        {
            String retVal = null;
            Row sicdOcRow = this.getOfficerCertificatesView1().getCurrentRow();
            Row sicdSeafarerRow = this.getSicdSeafarerView1().getCurrentRow();

            if (sicdOcRow != null && sicdSeafarerRow != null && sicdOcRow.getAttribute("HeaderId") != null) 
            {
                try {
//                        System.out.println("TransPrintRequestSets :: "+sicdSeafarerRow.getAttribute("TransPrintRequestSets"));
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.print_order(?,?,?,?)", new Object[] {
                                                     sicdOcRow.getAttribute("HeaderId"),
                                                     ((sicdSeafarerRow.getAttribute("TransPrintRequestSets") != null)
                                                         ? sicdSeafarerRow.getAttribute("TransPrintRequestSets")
                                                         : "SICD010"),
                                                     null, getUserId()
                    });
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while printing document." +
                                                            " Please contact your System Administrator.",
                                                            "", FacesMessage.SEVERITY_ERROR);
                }
            }

            if (retVal != null && retVal.length() > 0)
                return retVal;
            else
                return "N";
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while printing document." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }

    /**
     * Method resets print status of seleted Order/Order Line from Search Order screen.
     * @return String returns success or error.
     **/
    public String resetOrderPrintStatus(String resetFor)
    {
        try 
        {
            String retVal = null;            
            Row orderRow = this.getOrderHeaderView1().getCurrentRow();
            
            if((resetFor != null) && (resetFor.equalsIgnoreCase("L")))
                orderRow = this.getOrderLinesView1().getCurrentRow();

            if (orderRow != null && orderRow.getAttribute("HeaderId") != null) 
            {
                try {
//                        System.out.println("HeaderId :: "+orderRow.getAttribute("HeaderId"));
                    
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.change_print_status(?,?)", new Object[] {
                                                     orderRow.getAttribute("HeaderId"),
                                                     ((resetFor != null) && (resetFor.equalsIgnoreCase("L"))) 
                                                        ? orderRow.getAttribute("LineId") : null
                    });
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while resetting order print status." +
                                                            " Please contact your System Administrator.",
                                                            "", FacesMessage.SEVERITY_ERROR);
                }
            }

            this.getDBTransaction().commit();
            this.getOrderLinesView1().executeQuery();

            if (retVal != null && retVal.length() > 0)
                return retVal;
            else
                return "N";
        } catch (Exception nfe) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while resetting order print status." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    
    /**
     * Method rejects selected CRA document for the selected seafarer.
     * @return String returns success/error as Y/N.
     **/
    public String rejectCra()
    {
        try
        {
                Row r = this.getRmiSeafarerDocsOcView1().getCurrentRow();
                
                if(r != null && r.getAttribute("CraRequired") != null && 
                    (r.getAttribute("CraRequired").toString().equalsIgnoreCase("Y") ||
                    r.getAttribute("CraRequired").toString().equalsIgnoreCase("true"))
                    && !(r.getAttribute("CraApprovedFlag") != null))
                {
                    try 
                    {
                        String retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.reject_cra_doc(?,?,?,?,?)", 
                                                              new Object[]{"Y", 
                                                                           r.getAttribute("EsdiId"), 
                                                                           null,
                                                                           r.getAttribute("EsiId"),
                                                                           getUserId()});
//                        System.out.println("retVal :: "+retVal);
                        
                           if( retVal != null && retVal.equalsIgnoreCase("Y"))
                           {
                               this.getDBTransaction().commit();
                               this.getRmiSeafarerDocsOcView1().executeQuery();
                           }
                    } catch (Exception e) {
                        AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while approving CRA." +
                                                         " Please contact your System Administrator." , 
                                                         "", FacesMessage.SEVERITY_ERROR);
                    }
                }            
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while approving CRA." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }  
            
        return "N";
    }
    
    /**
     * Method concat and sets the multiple selected reasons while marking document as Hold.
     * @return copyFor pass type of document for which reason is selected, eg. Photo/ID/Book/Consent etc.
     **/
    public void copySelectedReasons(String copyFor)
    {
        try 
        {
            if (copyFor != null) {
                Row sfrrRow = this.getRmiSeafarerView1().getCurrentRow();

                if (sfrrRow != null) {
                    StringBuilder descSummary = new StringBuilder("");
                    ViewObjectImpl multiReasonVo = this.getMultipleHoldReasonsView1();
                    Row[] multiReasonRows = multiReasonVo.getFilteredRows("TransSelectReason", "Y");

                    if (multiReasonRows.length > 0) {
                        for (Row r : multiReasonRows) {
                            if (r != null && r.getAttribute("TransSelectReason") != null &&
                                r.getAttribute("Code") != null && r.getAttribute("Description") != null) {
//                                codeSummary.append("" + r.getAttribute("Code") + ",");
                                descSummary.append("" + r.getAttribute("DisplayValue") + " - " + r.getAttribute("Description"));
                                descSummary.append("" + System.getProperty("line.separator"));
                            }
                        }

                        if (descSummary != null && descSummary.length() > 1) 
                        {
                            if (copyFor.equalsIgnoreCase("photo")) {
                                sfrrRow.setAttribute("PhotoGrdComnt", descSummary);
                            }
                            else if (copyFor.equalsIgnoreCase("identity")) {
                                sfrrRow.setAttribute("IdentityDocGrdComnt", descSummary);
                            }
                            else if (copyFor.equalsIgnoreCase("physical")) {
                                sfrrRow.setAttribute("PhysicalGrdComnt", descSummary);
                            }
                            else if (copyFor.equalsIgnoreCase("seaservice")) {
                                sfrrRow.setAttribute("SeaserviceGrdComnt", descSummary);
                            }
                            else if (copyFor.equalsIgnoreCase("application")) {
                                sfrrRow.setAttribute("ApplicationGrdComnt", descSummary);
                            }
                            else if (copyFor.equalsIgnoreCase("affidavit")) {
                                sfrrRow.setAttribute("AffidavitGrdComnt", descSummary);
                            }
                            else if (copyFor.equalsIgnoreCase("security")) {
                                sfrrRow.setAttribute("SatGrdComnt", descSummary);
                            }
                            else if (copyFor.equalsIgnoreCase("consent")) {
                                sfrrRow.setAttribute("ConGrdComnt", descSummary);
                            }
                            else if (copyFor.equalsIgnoreCase("book")) {
                                sfrrRow.setAttribute("BookGrdComnt", descSummary);
                            }
                            else if (copyFor.equalsIgnoreCase("idcard")) {
                                sfrrRow.setAttribute("IdCardGrdCmnt", descSummary);
                            }
                            else if (copyFor.equalsIgnoreCase("oc")) {
                                if(this.getRmiSeafarerDocsOcView1().getCurrentRow() != null)
                                {
                                    this.getRmiSeafarerDocsOcView1().getCurrentRow().setAttribute("OcGradingComments", descSummary);
                                }
                            }
                            else if (copyFor.equalsIgnoreCase("sqc")) {
                                if(this.getRmiSeafarerDocsSqcView1().getCurrentRow() != null)
                                {
                                    this.getRmiSeafarerDocsSqcView1().getCurrentRow().setAttribute("SqcGradingComments", descSummary);
                                }
                            }
                        }
                    } else
                        AdfUtils.addFormattedFacesErrorMessage("Please select atleast 1 reason !", "",
                                                               FacesMessage.SEVERITY_ERROR);
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while adding hold reasons." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method resets all the multiple selected reasons while marking document as Hold.
     **/
    public void resetSelectedReasons()
    {
        try 
        {
            this.getMultipleHoldReasonsView1().executeQuery();
            
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching hold comments." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method validates if any customer/address is blank before updating batch.
     * @return String returns the attribute name if found else returns Y.
     **/
    public String validateSaveBatch()
    {
        try 
        {
            ViewObjectImpl batchVo = this.getRmiBatchView2();
            Row batchRow = batchVo.getCurrentRow();

//            if (sfrrRow != null && sfrrRow.getAttribute("EsiId") != null) {
//                if (sfrrRow.getAttribute("PhotoGrdStatus") != null &&
//                    (sfrrRow.getAttribute("PhotoGrdStatus").toString().equalsIgnoreCase("Hold"))) {
//                    return "Photo Uploaded => Uploaded Documents";
//                }
//                if (sfrrRow.getAttribute("IdentityDocGrdStatus") != null &&
//                    (sfrrRow.getAttribute("IdentityDocGrdStatus").toString().equalsIgnoreCase("Hold"))) {
//                    return "Identity Document => Uploaded Documents";
//                }
//                if (sfrrRow.getAttribute("PhysicalGrdStatus") != null &&
//                    (sfrrRow.getAttribute("PhysicalGrdStatus").toString().equalsIgnoreCase("Hold"))) {
//                    return "Medical Examination Report => Uploaded Documents";
//                }
//                if (sfrrRow.getAttribute("SeaserviceGrdStatus") != null &&
//                    (sfrrRow.getAttribute("SeaserviceGrdStatus").toString().equalsIgnoreCase("Hold"))) {
//                    return "Sea Service Transcript => Uploaded Documents";
//                }
//                if (sfrrRow.getAttribute("ApplicationGrdStatus") != null &&
//                    (sfrrRow.getAttribute("ApplicationGrdStatus").toString().equalsIgnoreCase("Hold"))) {
//                    return "Attestation => Uploaded Documents";
//                }
//                if (sfrrRow.getAttribute("AffidavitGrdStatus") != null &&
//                    (sfrrRow.getAttribute("AffidavitGrdStatus").toString().equalsIgnoreCase("Hold"))) {
//                    return "Affidavit => Uploaded Documents";
//                }
//            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while approving seafarer." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        
        return "Y";    
    }
    
    /**
     * Method validates if both seafarer and TC are Approved or not.
     * @return String returns Y if both is true else N.
     **/
    public String validateSendAcknowledgement()
    {
        try 
        {
            ViewObjectImpl sfrrVo = this.getRmiSeafarerView1();
            String seafarerWcStatus = null;
                Row r = sfrrVo.getCurrentRow();

                if (r != null && r.getAttribute("SeafarerId") != null) 
                {
                    seafarerWcStatus = getSeafarerTcStatus((Integer) r.getAttribute("SeafarerId"));

                    if (r.getAttribute("SeafarerGrdStatus") != null && seafarerWcStatus != null)
                    {
                        if(r.getAttribute("SeafarerGrdStatus").toString().equalsIgnoreCase("Approved")
                            && (seafarerWcStatus.equalsIgnoreCase("Approved") || seafarerWcStatus.equalsIgnoreCase("Provisional")))
                        return "Y";
                    }
                }
            
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while validating Send Acknowledgement." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        
        return "N";
    }
    
    public void callProcessOrderHeader()
    {
        try {
            Row batchRow = (this.getRmiBatchView2().getCurrentRow() != null)
                            ? this.getRmiBatchView2().getCurrentRow()
                            : this.getRmiBatchView2().first();
            String retVal = null;

            if (batchRow != null && batchRow.getAttribute("OeHeaderId") != null) {
                try {
                    Integer batch_id = Integer.parseInt(batchRow.getAttribute("EsiBatchId").toString());
                    this.getDBTransaction().postChanges();
                    String expeditedSrc = (ADFContext.getCurrent().getPageFlowScope().get("P_EXPEDITED_SRC") != null)
                                         ? ADFContext.getCurrent().getPageFlowScope().get("P_EXPEDITED_SRC").toString()
                                         : null;
//                    System.out.println("P_EXPEDITED_SRC :: "+ADFContext.getCurrent().getPageFlowScope().get("P_EXPEDITED_SRC"));
//                    System.out.println("expeditedSrc :: "+expeditedSrc);
//                    System.out.println("ExpeditedProcessing :: "+batchRow.getAttribute("ExpeditedProcessing"));
                    
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.update_order_header(?,?,?)", new Object[] {
                                                     batch_id, getUserId(), (expeditedSrc != null) ? batchRow.getAttribute("ExpeditedProcessing") : null
                    });
                    
                    ADFContext.getCurrent().getPageFlowScope().put("P_EXPEDITED_SRC", null);
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("There has been some error(s) while processing this order : ",
                                                           e.getMessage(), FacesMessage.SEVERITY_ERROR);
                }
            } else {
//                AdfUtils.addFormattedFacesErrorMessage("Work Order has not been generated for this batch. ", "",
//                                                       FacesMessage.SEVERITY_ERROR);
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while processing order." +
                                                   " Please contact your System Administrator.", "",
                                                   FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method to fetch the vessel details based on the imo number and set details to Current row of the SeafarerIfaceView.
     * @param imo Imo Number entered by the user.
     */
    public void imoValueChange(Integer imo) {

        try {
            ViewObject seafarerVO = getRmiSeafarerView1();
            Row currentRow = seafarerVO.getCurrentRow();
            if (imo != null) {

                ViewObject vesselVO = getVesselValuesView();
                vesselVO.setNamedWhereClauseParam("pImoNumber", imo);
                vesselVO.setNamedWhereClauseParam("pOfficialNumber", null);
                vesselVO.setNamedWhereClauseParam("pVesselPk", null);
                vesselVO.executeQuery();
                Row row = vesselVO.first();

                if (row != null) {

                    currentRow.setAttribute("VesselPk", row.getAttribute("VesselPk"));
                    currentRow.setAttribute("TransVesselOfficialNumber", row.getAttribute("OfficialNumber"));

                } else {
                    currentRow.setAttribute("VesselPk", null);
                }
            } else {
                currentRow.setAttribute("VesselPk", null);
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while submitting new imo number." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
    }

    /**
     * Method to fetch the vessel details based on the official number and set details to Current row of the SeafarerIfaceView.
     * @param off Official Number entered by the user.
     */
    public void offValueChange(Integer off) {

        try {
            ViewObject seafarerVO = getRmiSeafarerView1();
            Row currentRow = seafarerVO.getCurrentRow();
            if (off != null) {

                ViewObject vesselVO = getVesselValuesView();
                vesselVO.setNamedWhereClauseParam("pOfficialNumber", off);
                vesselVO.setNamedWhereClauseParam("pVesselPk", null);
                vesselVO.setNamedWhereClauseParam("pImoNumber", null);
                vesselVO.executeQuery();
                Row row = vesselVO.first();
                if (row != null) {
                    currentRow.setAttribute("VesselPk", row.getAttribute("VesselPk"));
                    currentRow.setAttribute("tranVesselNo", row.getAttribute("ImoNumber"));
                } else {
                    currentRow.setAttribute("VesselPk", null);
                }
            } else {
                currentRow.setAttribute("VesselPk", null);
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while submitting new official number." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
    }

    /**
     * Method to send acknowledgement to agent.
     * call rmi_sicd_adf_pub.send_ack db function.
     */
    public void sendAcknowledgement() 
    {
        ViewObjectImpl sfrrVo = this.getRmiSeafarerView1();
        Row row = sfrrVo.getCurrentRow();
        Integer batch_id = Integer.parseInt(row.getAttribute("EsiBatchId").toString());
        Integer seafarer_id = Integer.parseInt(row.getAttribute("SeafarerId").toString());
        try {
            CallableStatement st = null;
            String sql = "BEGIN RMI_SICD_PUB.send_ack(?,?);END;";
            st = getDBTransaction().createCallableStatement(sql, 0);
            st.setObject(1, batch_id); //MAIL SERVER
            st.setObject(2, seafarer_id);
            //
            st.executeUpdate();

        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while sending acknowledgement." +
                                                   " Please contact your System Administrator.", "",
                                                   FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     *  Method filters order hold details. 
     **/
    public void filterOrderHeaderHolds()
    {
        try 
        {
           Row orderHeaderRow = this.getOrderHeaderView1().getCurrentRow();

            if (orderHeaderRow != null && orderHeaderRow.getAttribute("HeaderId") != null) 
            {
                ViewObjectImpl orderHoldView = this.getOrderHeaderHoldsView1();
                orderHoldView.setNamedWhereClauseParam("pHeaderId", orderHeaderRow.getAttribute("HeaderId"));
                orderHoldView.executeQuery();
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching hold details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }               
    }
    
    /**
     * Method validates if Book number is assigned not before sending the batch to Shipping queue for further processing.
     * @return String returns success or error.
     **/
    public String checkSendToShipping()
    {
        try 
        {
            Row bookHeaderRow = (this.getProcessBookHeaderView1().getCurrentRow() != null)
                            ? this.getProcessBookHeaderView1().getCurrentRow()
                            : this.getProcessBookHeaderView1().first();
            String retVal = null;

            if (bookHeaderRow != null && bookHeaderRow.getAttribute("HeaderId") != null) {
                try {
                    this.getDBTransaction().postChanges();
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.rmi_chk_send_to_shipping(?)", new Object[] {
                                                     bookHeaderRow.getAttribute("HeaderId") });
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("There has been an error calling rmi_chk_send_to_shipping function : ",
                                                  e.getMessage(), FacesMessage.SEVERITY_ERROR);
                }
            }

            if (retVal != null && retVal.length() > 0)
                return retVal;
            else
                return "N";
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while processing this batch." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    
    /**
     * Method validates if End date is on/after Start date or not.
     * @param endDate pass endDate which is to be validated.
     * @return String returns Y-success or N-error.
     **/
    public String validateExpDate(oracle.jbo.domain.Date endDate)
    {
        try {
            ViewObject sqcVO = getOfficerCertificatesView1();
            Row row = sqcVO.getCurrentRow();
            java.sql.Date stSqlDate = null;
            if (row.getAttribute("ExpirationDate") != null) {
                oracle.jbo.domain.Date startDate = new oracle.jbo.domain.Date((java.sql.Timestamp) row.getAttribute("ExpirationDate"));
                stSqlDate = startDate.dateValue();
                if (endDate.dateValue().before(stSqlDate)) {
                    return "true";
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while validating date." +
                                          " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
        }
        return "false";
    }
    
    /**
     * Method creates a new line of SQC by setting default values.
     **/
    public void addSqcLine()
    {
        try 
        {
            ViewObject sqcVo = getRmiSeafarerDocsSqcView1();
            Row createRow = sqcVo.createRow();
            createRow.setAttribute("CreatedBy", getUserId());
            createRow.setAttribute("AddedByRole", "EVALUATOR");
            createRow.setAttribute("GradeType", "SQC");
            createRow.setAttribute("GradingStatus3", "Pending");
            createRow.setAttribute("TransDisableDeleteSqcLine", "Y");
            sqcVo.insertRow(createRow);
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while adding new line." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }   
    }
    
    /**
     * Method saves the new SQC line(s) created and process order.
     **/
    public void saveSqcLine()
    {
        try 
        {
            Row batchRow = this.getRmiBatchView2().getCurrentRow();
            ViewObjectImpl sfrrVo = this.getRmiSeafarerView1();
            Row sfrrRow = sfrrVo.getCurrentRow();

            if ((batchRow != null && batchRow.getAttribute("OeHeaderId") != null) &&
                (sfrrRow != null && sfrrRow.getAttribute("EsiId") != null)) {
                ViewObjectImpl sfrrDocsVo = this.getSeafarerDocsIfaceView1();
                sfrrDocsVo.setNamedWhereClauseParam("pEsiId", sfrrRow.getAttribute("EsiId"));
                sfrrDocsVo.executeQuery();

                this.getDBTransaction().commit();

                RowSetIterator docsRsi = this.getRmiSeafarerDocsSqcView1().createRowSetIterator(null);

                while (docsRsi.hasNext()) {
                    Row r = docsRsi.next();
                       r.setAttribute("TransDisableDeleteSqcLine", null);
                    if (r.getAttribute("EsdiId") != null) {
                        Row[] fr = sfrrDocsVo.getFilteredRows("EsdiId", r.getAttribute("EsdiId"));
                        String retVal = null;
                        
                        System.out.println("EsdiId :: "+r.getAttribute("EsdiId"));
                        System.out.println("fr.length :: "+fr.length);

                        if (!(fr.length > 0)) {
                            
                            if(sfrrRow.getAttribute("IssueType3") != null && !(sfrrRow.getAttribute("IssueType3").toString().equalsIgnoreCase("New")))
                            {
                                retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.update_issue_type(?)", new Object[] {
                                                                 r.getAttribute("EsdiId") });
                            }
                            retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.create_order_line(?,?)", new Object[] {
                                                             r.getAttribute("EsdiId"),
                                                             batchRow.getAttribute("OeHeaderId")
                            });                            

                            if (retVal != null && retVal.equalsIgnoreCase("n")) {
                                AdfUtils.addFormattedFacesErrorMessage("Failed to create Order Line for COC Number :: ." +
                                                              r.getAttribute("CocNumber"), "",
                                                              FacesMessage.SEVERITY_ERROR);
                                return;
                            }
                            else
                                processOrder();                            
                        }
                    }
                }
                updateCancelLine();
                this.getDBTransaction().commit();
                docsRsi.closeRowSetIterator();
                AdfUtils.addFormattedFacesErrorMessage("Record Saved Successfully !", "", FacesMessage.SEVERITY_INFO);
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while saving lines details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }

    /**
     * Method resets print status of seleted Order/Order Line from Edit Documents screen.
     * @return String returns success or error.
     **/
    public String resetOrderPrintStatusSicd(String resetFor)
    {
        try 
        {
            String retVal = null;            
            Row sicdDocRow = this.getOfficerCertificatesView1().getCurrentRow();

            if (sicdDocRow != null && sicdDocRow.getAttribute("HeaderId") != null) 
            {
                try {
                    
//                    System.out.println("HeaderId :: "+sicdDocRow.getAttribute("HeaderId"));
                    
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.change_print_status(?,?)", new Object[] {
                                                     sicdDocRow.getAttribute("HeaderId"),
                                                     ((resetFor != null) && (resetFor.equalsIgnoreCase("L"))) 
                                                        ? sicdDocRow.getAttribute("LineId") : null
                    });
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while resetting order print status." +
                                                            " Please contact your System Administrator.",
                                                            "", FacesMessage.SEVERITY_ERROR);
                }
            }

            if (retVal != null && retVal.length() > 0)
                return retVal;
            else
                return "N";
            
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while resetting order print status." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    
    /**
     *  Method executes all views in sequence to refresh the data on page.
     */
    public void refreshSicdOcSqcViews()
    {
        try 
        {
            this.getOfficerCertificatesView1().executeQuery();
            this.getBooksView1();
            this.getSpecialQualificationsView1();
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while refreshing data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method to upload document and entering data into DocumentScanningLog table.
     * call iri_edocs_pkg.GET_CATEGORY_ID db function.
     * call another method callProceduregetFileName to get the file name.
     * @return returns path of the file returned by the method.
     */
    public String uploadPhoto(String param1, String param2, String param3, String fileName, String rejected) {
        String path = null;
        String retVal = null;
        try
        {            
            ADFContext.getCurrent().getPageFlowScope().put("P_SEAFARER_PHOTO_EDOC", null);
            
            ViewObject seaVo = getEditSeafarersView1();
            Row seafarerRow = seaVo.getCurrentRow();
            Integer seafarerId = Integer.parseInt(seafarerRow.getAttribute("SeafarerId").toString());
            Object stat = callStoredFunction(Types.INTEGER, "iri_edocs_pkg.GET_CATEGORY_ID(?,?,?)", new Object[] {
                                             param1, param2, param3
            });
            String seafa = seafarerId.toString();
            String catg = stat.toString();
             
            printTmpLogs("fileName in am :: "+fileName);
            
            String[] ret = callProceduregetFileName(fileName, seafa, catg);
            path = ret[0];
             
            printTmpLogs("path before update_seafarer_photo in am :: "+path);
            
            Integer edoc = Integer.parseInt(ret[1].toString());
            
            ADFContext.getCurrent().getPageFlowScope().put("P_SEAFARER_PHOTO_EDOC",edoc);
            
            this.getTransaction().commit();
            
    //            ViewObject link = getGetDocumentLinkView1();
    //            link.setNamedWhereClauseParam("pEdocId", edoc);
    //            link.executeQuery();
    //            Row frow = link.first();
    //            seafarerRow.setAttribute("Photo", frow.getAttribute("DocPath").toString());
    //            seaVo.executeQuery();
            
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage(e.getMessage(), "",
                                                   FacesMessage.SEVERITY_ERROR);
    //            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while uploading document." +
    //                                                   " Please contact your System Administrator.", "",
    //                                                   FacesMessage.SEVERITY_ERROR);
        }
         
        printTmpLogs("path before return in am :: "+path);
        
        return path;
    }
    
    public String updateSeafarerPhoto(Integer edocId, Integer seafarerId)
    {
        String retVal = null;
        
        Integer edocID = (edocId != null) ? edocId 
                        : (Integer) ADFContext.getCurrent().getPageFlowScope().get("P_SEAFARER_PHOTO_EDOC");
        
        ViewObject seafarerVo = getEditSeafarersView1();
        Row seafarerRow = seafarerVo.getCurrentRow();
        
        Integer seafarerID = null;
            
        if(seafarerId != null)
            seafarerID = seafarerId;
        else
        {
            if(seafarerRow != null && seafarerRow.getAttribute("SeafarerId") != null)
                seafarerID = Integer.parseInt(seafarerRow.getAttribute("SeafarerId").toString());
        }
        
        printTmpLogs("edocId before update_seafarer_photo in am :: "+edocID);                     
        printTmpLogs("seafarerId before update_seafarer_photo in am :: "+seafarerID);
        
        if(edocID != null && seafarerID != null)
        {        
            retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.update_seafarer_photo(?,?,?)", new Object[] {
                                             edocID,
                                             seafarerID,
                                             getUserId()
            });
        }
         
        printTmpLogs("retVal in am :: "+retVal);
        
        ADFContext.getCurrent().getPageFlowScope().put("P_SEAFARER_PHOTO_EDOC", null);
        
        return retVal;
    }
    
    /**
     *  Method validates for duplicate Capacity for same DocumentId.
     *  @param capacityName pass selected Capacity Name which is to be validated.
     *  @return String returns Y if found duplicate, else N.
     */
    public String validateDuplicateOcCapacity(String capacityName)
    {
        String retVal = "N";
        
        try 
        {
            if (capacityName != null) 
            {
                Integer positionId = getCapacityIdByName(capacityName).intValue();
                ViewObjectImpl ocCapacityVo = this.getOcDetailsCapacitiesView1();
                Row ocCapacityRow = ocCapacityVo.getCurrentRow();

                if (ocCapacityRow != null && positionId != null) 
                {
                    RowSetIterator ocCapacityRsi = ocCapacityVo.createRowSetIterator(null);

                    while (ocCapacityRsi.hasNext()) {
                        Row r = ocCapacityRsi.next();

                        if (r != null && r.getAttribute("PositionId") != null) 
                        {
                            if ((((BigDecimal) r.getAttribute("PositionId")).intValue() == positionId)
                                && ((BigDecimal) ocCapacityRow.getAttribute("DocumentId")).intValue() == ((BigDecimal) r.getAttribute("DocumentId")).intValue()
                                && (r != ocCapacityRow))
                            {
                                return "Y";
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while validating Capacity." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        
        return retVal;
    }
    
    /**
     *  Method fetches PositionId for passed Capacity name.
     *  @param capacityName pass selected Capacity Name.
     *  @return BigDecimal returns PositionId id if Capacity matches.
     */
    public BigDecimal getCapacityIdByName(String capacityName)
    {
        try 
        {
            if (capacityName != null) 
            {
                ViewObjectImpl capVo = this.getOcDetailsCapacitiesLovView1();
                Row[] frRows = capVo.getFilteredRows("LCpctCapacityName", capacityName);

                if (frRows.length > 0 && frRows[0].getAttribute("PositionId") != null) {
                    return (BigDecimal) frRows[0].getAttribute("PositionId");
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching Capacity." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return new BigDecimal(-1);    
    }
    
    /**
     *  Method fetches QualificationId for passed Function name.
     *  @param functionName pass selected Function Name.
     *  @return BigDecimal returns QualificationId id if Function matches.
     */
    public Integer getFunctionIdByName(String functionName)
    {
        try 
        {
            if (functionName != null) 
            {
                ViewObjectImpl capVo = this.getOcDetailsFunctionsLovView1();
                Row[] frRows = capVo.getFilteredRows("LFnctFunctionName", functionName);

                if (frRows.length > 0 && frRows[0].getAttribute("QualificationId") != null) {
                    return (Integer) frRows[0].getAttribute("QualificationId");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching Function." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return -1;    
    }
    
    /**
     *  Method validates for duplicate Capacity for same DocumentId.
     *  @param capacityName pass selected Capacity Name which is to be validated.
     *  @return String returns Y if found duplicate, else N.
     */
    public String validateDuplicateOcFunction(String functionName)
    {
        String retVal = "N";
        
        try 
        {
            if (functionName != null) 
            {
                Integer qualificationId = getFunctionIdByName(functionName);
                ViewObjectImpl ocFunctionVo = this.getOcDetailsFunctionsView1();
                Row ocFunctionRow = ocFunctionVo.getCurrentRow();

                if (ocFunctionRow != null && qualificationId != null) 
                {
                    RowSetIterator ocFunctionRsi = ocFunctionVo.createRowSetIterator(null);

                    while (ocFunctionRsi.hasNext()) {
                        Row r = ocFunctionRsi.next();

                        if (r != null && r.getAttribute("QualificationId") != null) 
                        {
                            if ((((Integer) r.getAttribute("QualificationId")) == qualificationId)
                                && ((BigDecimal) ocFunctionRow.getAttribute("DocumentId")).intValue() == ((BigDecimal) r.getAttribute("DocumentId")).intValue()
                                && (r != ocFunctionRow))
                            {
                                return "Y";
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while validating Function." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        
        return retVal;
    }

    /**
     * Method resets print status of seleted Seafarer/Seafarer Document from Edit Document screen.
     * @return String returns success or error.
     **/
    public String resetDocumentPrintStatus(String resetFor, String docType)
    {
        try 
        {
            String retVal = null;
            
            Row sicdDocRow = this.getOfficerCertificatesView1().getCurrentRow();
            
            if(docType != null && docType.equalsIgnoreCase("BOOK"))
                sicdDocRow = this.getBooksView1().getCurrentRow();            
            if(docType != null && docType.equalsIgnoreCase("SQC"))
                sicdDocRow = this.getSpecialQualificationsView1().getCurrentRow();

            if (sicdDocRow != null && sicdDocRow.getAttribute("DocumentId") != null) 
            {
                try {
                    
//                    System.out.println("DocumentId :: "+sicdDocRow.getAttribute("DocumentId"));
                    
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.reset_document_print_status(?,?)", new Object[] {
                                                     sicdDocRow.getAttribute("SeafarerId"),
                                                     ((resetFor != null) && (resetFor.equalsIgnoreCase("L"))) 
                                                        ? sicdDocRow.getAttribute("DocumentId") : null
                    });
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while resetting document print status." +
                                                            " Please contact your System Administrator.",
                                                            "", FacesMessage.SEVERITY_ERROR);
                }
            }

            if (retVal != null && retVal.length() > 0)
                return retVal;
            else
                return "N";
        } catch (Exception nfe) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while resetting document print status." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    
    public String findOrdersWithParams()
    {
        try 
        {
            Row dualOrderRow = this.getDualEnterOrdersView1().getCurrentRow();

            if (dualOrderRow != null) 
            {
                System.out.println("TransCreatedByUserId :: "+dualOrderRow.getAttribute("TransCreatedByUserId"));  
                System.out.println("TransCustomerId :: "+dualOrderRow.getAttribute("TransCustomerId"));   
                System.out.println("TransCustomerNumber :: "+dualOrderRow.getAttribute("TransCustomerNumber"));   
                System.out.println("TransPoNumber :: "+dualOrderRow.getAttribute("TransPoNumber"));   
                System.out.println("TransOrderDateFrom :: "+dualOrderRow.getAttribute("TransOrderDateFrom"));   
                System.out.println("TransHoldId :: "+dualOrderRow.getAttribute("TransHoldId"));   
                System.out.println("TransIncludeCancelledLines :: "+dualOrderRow.getAttribute("TransIncludeCancelledLines"));   
                System.out.println("TransIncludeCancelledOrders :: "+dualOrderRow.getAttribute("TransIncludeCancelledOrders"));   
                System.out.println("TransIncludeClosedLines :: "+dualOrderRow.getAttribute("TransIncludeClosedLines"));   
                System.out.println("TransIncludeClosedOrders :: "+dualOrderRow.getAttribute("TransIncludeClosedOrders"));   
                System.out.println("TransInternalItemCode :: "+dualOrderRow.getAttribute("TransInternalItemCode"));   
                System.out.println("TransInvoiceToLocationSiteId :: "+dualOrderRow.getAttribute("TransInvoiceToLocationSiteId"));   
                System.out.println("TransFreightTerms :: "+dualOrderRow.getAttribute("TransFreightTerms"));   
                System.out.println("TransInvoiceToLocationLineSiteId :: "+dualOrderRow.getAttribute("TransInvoiceToLocationLineSiteId"));   
                System.out.println("TransShipToLocationLineSiteId :: "+dualOrderRow.getAttribute("TransShipToLocationLineSiteId"));   
                System.out.println("TransOrderNumber :: "+dualOrderRow.getAttribute("TransOrderNumber"));   
                System.out.println("TransOrderSource :: "+dualOrderRow.getAttribute("TransOrderSource"));   
                System.out.println("TransStatus :: "+dualOrderRow.getAttribute("TransStatus"));   
                System.out.println("TransPromiseDateFrom :: "+dualOrderRow.getAttribute("TransPromiseDateFrom"));   
                System.out.println("TransPromiseDateTo :: "+dualOrderRow.getAttribute("TransPromiseDateTo"));   
                System.out.println("TransRequestDateFrom :: "+dualOrderRow.getAttribute("TransRequestDateFrom"));   
                System.out.println("TransRequestDateTo :: "+dualOrderRow.getAttribute("TransRequestDateTo"));   
                System.out.println("TransSalesrepId :: "+dualOrderRow.getAttribute("TransSalesrepId"));   
                System.out.println("TransScheduleArrivalDateFrom :: "+dualOrderRow.getAttribute("TransScheduleArrivalDateFrom"));   
                System.out.println("TransScheduleArrivalDateTo :: "+dualOrderRow.getAttribute("TransScheduleArrivalDateTo"));   
                System.out.println("TransScheduleShipDateFrom :: "+dualOrderRow.getAttribute("TransScheduleShipDateFrom"));   
                System.out.println("TransScheduleShipDateTo :: "+dualOrderRow.getAttribute("TransScheduleShipDateTo"));   
                System.out.println("TransShipToLocationSiteId :: "+dualOrderRow.getAttribute("TransShipToLocationSiteId"));   
                System.out.println("TransShippingMethod :: "+dualOrderRow.getAttribute("TransShippingMethod"));   
                System.out.println("TransOrderDateTo :: "+dualOrderRow.getAttribute("TransOrderDateTo"));   
                System.out.println("TransWarehouse :: "+dualOrderRow.getAttribute("TransWarehouse"));  
                System.out.println("TransVesselName :: "+dualOrderRow.getAttribute("TransVesselName"));
                
                ViewObjectImpl findOrderVo = this.getFindOrdersView1();
                findOrderVo.setNamedWhereClauseParam("pCreatedBy", dualOrderRow.getAttribute("TransCreatedByUserId"));
                findOrderVo.setNamedWhereClauseParam("pCustomerId", dualOrderRow.getAttribute("TransCustomerId"));
                findOrderVo.setNamedWhereClauseParam("pCustomerNumber",
                                                     dualOrderRow.getAttribute("TransCustomerNumber"));
                findOrderVo.setNamedWhereClauseParam("pCustomerPoNumber", dualOrderRow.getAttribute("TransPoNumber"));
                findOrderVo.setNamedWhereClauseParam("pVesselName", dualOrderRow.getAttribute("TransVesselName"));
                
                if(dualOrderRow.getAttribute("TransOrderDateFrom") != null)
                {
                    String[] ordrFromDate = dualOrderRow.getAttribute("TransOrderDateFrom").toString().split("\\s+");
                    
                    if(ordrFromDate.length > 0 && ordrFromDate[0] != null)
                        findOrderVo.setNamedWhereClauseParam("pFromOrderDate", ordrFromDate[0]);
                }
                
                if(dualOrderRow.getAttribute("TransOrderDateTo") != null)
                {
                    String[] ordrToDate = dualOrderRow.getAttribute("TransOrderDateTo").toString().split("\\s+");
                    
                    if(ordrToDate.length > 0 && ordrToDate[0] != null)
                        findOrderVo.setNamedWhereClauseParam("pToOrderDate", ordrToDate[0]);
                }
                
                if(dualOrderRow.getAttribute("TransPromiseDateFrom") != null)
                {
                    String[] promFromDate = dualOrderRow.getAttribute("TransPromiseDateFrom").toString().split("\\s+");
                    
                    if(promFromDate.length > 0 && promFromDate[0] != null)
                        findOrderVo.setNamedWhereClauseParam("pPromiseDateFrom", promFromDate[0]);
                }
                
                if(dualOrderRow.getAttribute("TransPromiseDateTo") != null)
                {
                    String[] promToDate = dualOrderRow.getAttribute("TransPromiseDateTo").toString().split("\\s+");
                    
                    if(promToDate.length > 0 && promToDate[0] != null)
                        findOrderVo.setNamedWhereClauseParam("pPromiseDateTo", promToDate[0]);
                }
                
                if(dualOrderRow.getAttribute("TransRequestDateFrom") != null)
                {
                    String[] reqFromDate = dualOrderRow.getAttribute("TransRequestDateFrom").toString().split("\\s+");
                    
                    if(reqFromDate.length > 0 && reqFromDate[0] != null)
                        findOrderVo.setNamedWhereClauseParam("pRequestDateFrom", reqFromDate[0]);
                }
                
                if(dualOrderRow.getAttribute("TransRequestDateTo") != null)
                {
                    String[] reqToDate = dualOrderRow.getAttribute("TransRequestDateTo").toString().split("\\s+");
                    
                    if(reqToDate.length > 0 && reqToDate[0] != null)
                        findOrderVo.setNamedWhereClauseParam("pRequestDateTo", reqToDate[0]);
                }                
                
                if(dualOrderRow.getAttribute("TransScheduleArrivalDateFrom") != null)
                {
                    String[] schdArvlFromDate = dualOrderRow.getAttribute("TransScheduleArrivalDateFrom").toString().split("\\s+");
                    
                    if(schdArvlFromDate.length > 0 && schdArvlFromDate[0] != null)
                        findOrderVo.setNamedWhereClauseParam("pScheduleArrivalDateFrom", schdArvlFromDate[0]);
                }
                
                if(dualOrderRow.getAttribute("TransScheduleArrivalDateTo") != null)
                {
                    String[] schdArvlToDate = dualOrderRow.getAttribute("TransScheduleArrivalDateTo").toString().split("\\s+");
                    
                    if(schdArvlToDate.length > 0 && schdArvlToDate[0] != null)
                        findOrderVo.setNamedWhereClauseParam("pScheduleArrivalDateTo", schdArvlToDate[0]);
                }
                
                if(dualOrderRow.getAttribute("TransScheduleShipDateFrom") != null)
                {
                    String[] schdShipFromDate = dualOrderRow.getAttribute("TransScheduleShipDateFrom").toString().split("\\s+");
                    
                    if(schdShipFromDate.length > 0 && schdShipFromDate[0] != null)
                        findOrderVo.setNamedWhereClauseParam("pScheduleShipDateFrom", schdShipFromDate[0]);
                }
                
                if(dualOrderRow.getAttribute("TransScheduleShipDateTo") != null)
                {
                    String[] schdShipToDate = dualOrderRow.getAttribute("TransScheduleShipDateTo").toString().split("\\s+");
                    
                    if(schdShipToDate.length > 0 && schdShipToDate[0] != null)
                        findOrderVo.setNamedWhereClauseParam("pScheduleShipDateTo", schdShipToDate[0]);
                }
                
                findOrderVo.setNamedWhereClauseParam("pHoldId", dualOrderRow.getAttribute("TransHoldId"));
                findOrderVo.setNamedWhereClauseParam("pIncludeCancelledLines",
                                                     dualOrderRow.getAttribute("TransIncludeCancelledLines"));
                findOrderVo.setNamedWhereClauseParam("pIncludeCancelledOrders",
                                                     dualOrderRow.getAttribute("TransIncludeCancelledOrders"));
                findOrderVo.setNamedWhereClauseParam("pIncludeClosedLines",
                                                     dualOrderRow.getAttribute("TransIncludeClosedLines"));
                findOrderVo.setNamedWhereClauseParam("pIncludeClosedOrders",
                                                     dualOrderRow.getAttribute("TransIncludeClosedOrders"));
                findOrderVo.setNamedWhereClauseParam("pInternalItem",
                                                     dualOrderRow.getAttribute("TransInternalItemCode"));
                findOrderVo.setNamedWhereClauseParam("pInvoiceToLocId",
                                                     dualOrderRow.getAttribute("TransInvoiceToLocationSiteId"));
                findOrderVo.setNamedWhereClauseParam("pLineFreightTerms",
                                                     dualOrderRow.getAttribute("TransFreightTerms"));
                findOrderVo.setNamedWhereClauseParam("pLineInvoiceToLocId",
                                                     dualOrderRow.getAttribute("TransInvoiceToLocationLineSiteId"));
                findOrderVo.setNamedWhereClauseParam("pLineShipToLocId",
                                                     dualOrderRow.getAttribute("TransShipToLocationLineSiteId"));
                findOrderVo.setNamedWhereClauseParam("pOrderNumber", dualOrderRow.getAttribute("TransOrderNumber"));
                findOrderVo.setNamedWhereClauseParam("pOrderSource", dualOrderRow.getAttribute("TransOrderSource"));
                //            findOrderVo.setNamedWhereClauseParam("pOrderSourceRef", dualOrderRow.getAttribute("TransOrderNumber"));
                findOrderVo.setNamedWhereClauseParam("pOrderStatus", dualOrderRow.getAttribute("TransStatus"));
                findOrderVo.setNamedWhereClauseParam("pOrderTypeId", new Integer(1003));
                findOrderVo.setNamedWhereClauseParam("pSalesrepId", dualOrderRow.getAttribute("TransSalesrepId"));
                findOrderVo.setNamedWhereClauseParam("pShipToLocId",
                                                     dualOrderRow.getAttribute("TransShipToLocationSiteId"));
                findOrderVo.setNamedWhereClauseParam("pShippingMethod",
                                                     dualOrderRow.getAttribute("TransShippingMethod"));
                findOrderVo.setNamedWhereClauseParam("pWarehouse", dualOrderRow.getAttribute("TransWarehouse"));
                findOrderVo.executeQuery();
                
                System.out.println("filteredRows :: "+findOrderVo.getRowCount());
                
                if(findOrderVo.getRowCount() > 0)
                    return "Y";
                else
                    return "N";
            }

        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while filtering order." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return null;    
    }
    
    public void filterSelectedOrder()
    {
        try
        {
            
            ViewObjectImpl dualEoRo = this.getDualEnterOrdersView1();
            Row dualEoRow = dualEoRo.getCurrentRow();
            Row findOrderRow =
                (this.getFindOrdersView1().getCurrentRow() != null) ? this.getFindOrdersView1().getCurrentRow() :
                this.getFindOrdersView1().first();
            if (findOrderRow != null && findOrderRow.getAttribute("HeaderId") != null) {
                ViewObjectImpl eoHdrVo = this.getOrderHeaderView1();
                eoHdrVo.setNamedWhereClauseParam("pCustomer", null);
                eoHdrVo.setNamedWhereClauseParam("pCustomerPo", null);
                eoHdrVo.setNamedWhereClauseParam("pOrderNumber", null);
                eoHdrVo.setNamedWhereClauseParam("pHeaderId", findOrderRow.getAttribute("HeaderId"));
                eoHdrVo.executeQuery();
                
                if (eoHdrVo.getAllRowsInRange().length > 0 && eoHdrVo.getAllRowsInRange()[0] != null) {
                    Row eoHdrRow = eoHdrVo.getAllRowsInRange()[0];
                    
                    dualEoRow.setAttribute("TransCustomerId", eoHdrRow.getAttribute("SoldToOrgId"));
                    dualEoRow.setAttribute("TransPoNumber", eoHdrRow.getAttribute("CustPoNumber"));
                    dualEoRow.setAttribute("TransOrderNumber", eoHdrRow.getAttribute("OrderNumber"));
                    
                    Row[] batchRows = this.getRmiBatchView1().getFilteredRows("OeHeaderId", eoHdrRow.getAttribute("HeaderId"));
                    if(batchRows.length > 0 && batchRows[0].getAttribute("BatchName") != null)
                        dualEoRow.setAttribute("TransBatchName", batchRows[0].getAttribute("BatchName"));
                    
//                    ADFContext.getCurrent().getSessionScope().put("P_CUSTOMER_ID", eoHdrRow.getAttribute("SoldToOrgId"));                    
//                    ADFContext.getCurrent().getSessionScope().put("P_PO_NUMBER", eoHdrRow.getAttribute("CustPoNumber"));                    
//                    ADFContext.getCurrent().getSessionScope().put("P_ORDER_NUMBER", eoHdrRow.getAttribute("OrderNumber"));                
//                    ADFContext.getCurrent().getSessionScope().put("P_BATCH_NAME", batchRows[0].getAttribute("BatchName"));                    
                    ADFContext.getCurrent().getPageFlowScope().put("P_CUSTOMER_ID", eoHdrRow.getAttribute("SoldToOrgId"));                    
                    ADFContext.getCurrent().getPageFlowScope().put("P_PO_NUMBER", eoHdrRow.getAttribute("CustPoNumber"));                    
                    ADFContext.getCurrent().getPageFlowScope().put("P_ORDER_NUMBER", eoHdrRow.getAttribute("OrderNumber"));                
                    ADFContext.getCurrent().getPageFlowScope().put("P_BATCH_NAME", batchRows[0].getAttribute("BatchName"));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while viewing order." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }

    /**
     * Method resets print status of seleted Order/Order Line from Assign Book Number screen.
     * @return String returns success or error.
     **/
    public String resetAssignBookOrderPrintStatus(String resetFor)
    {
        try 
        {
            String retVal = null;            
            Row orderRow = this.getProcessBookHeaderView1().getCurrentRow();
            
            if((resetFor != null) && (resetFor.equalsIgnoreCase("L")))
                orderRow = (this.getProcessBookDetailsView1().getCurrentRow() != null)
                            ? this.getProcessBookDetailsView1().getCurrentRow()
                            : this.getProcessBookDetailsView1().first();

            if (orderRow != null && orderRow.getAttribute("HeaderId") != null) 
            {
                try {
//                            System.out.println("HeaderId :: "+orderRow.getAttribute("HeaderId"));
                    
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.change_print_status(?,?)", new Object[] {
                                                     orderRow.getAttribute("HeaderId"),
                                                     ((resetFor != null) && (resetFor.equalsIgnoreCase("L"))) 
                                                        ? orderRow.getAttribute("LineId") : null
                    });
                } catch (Exception e) {
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while resetting order print status." +
                                                            " Please contact your System Administrator.",
                                                            "", FacesMessage.SEVERITY_ERROR);
                }
            }

            if (retVal != null && retVal.length() > 0)
                return retVal;
            else
                return "N";
        } catch (Exception nfe) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while resetting order print status." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    

    /**
     * Method resets print status of seleted Seafarer Document from Edit Document screen.
     * @return String returns 'Y' on success and 'N' on error.
     **/
    public String printSeafarerIndividualDocument(String printFor, String docType)
    {
        try 
        {
            String retVal = null;
            String requestSet = "SICD040";
            
            Row sicdDocRow = this.getOfficerCertificatesView1().getCurrentRow();
            
            if(docType != null && docType.equalsIgnoreCase("BOOK"))
                sicdDocRow = this.getBooksView1().getCurrentRow();            
            if(docType != null && docType.equalsIgnoreCase("SQC"))
                sicdDocRow = this.getSpecialQualificationsView1().getCurrentRow();

            if (sicdDocRow != null && sicdDocRow.getAttribute("DocumentId") != null) 
            {
                try {
                    
                    if((docType != null && docType.equalsIgnoreCase("OC"))
                        && (sicdDocRow != null && sicdDocRow.getAttribute("CertificateType") != null))
                    {
                        if(sicdDocRow.getAttribute("CertificateType").equals("UA"))
                            requestSet = "SICD020";
                        else if(sicdDocRow.getAttribute("CertificateType").equals("CRA"))
                            requestSet = "SICD030";
                    }
                    else if(docType != null && docType.equalsIgnoreCase("BOOK"))
                        requestSet = "SICD050";
                    else if(docType != null && docType.equalsIgnoreCase("SQC"))
                        requestSet = "SICD060";
                    
//                    System.out.println("DocumentId :: "+sicdDocRow.getAttribute("DocumentId"));  
                    
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.print_order(?,?,?,?,?)", new Object[] {
                                                         null,
                                                         requestSet,
                                                         null, getUserId(),
                                                         sicdDocRow.getAttribute("DocumentId")
                                                    });                   
                } catch (Exception e) {
                    e.printStackTrace();
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while printing selected document." +
                                                            " Please contact your System Administrator.",
                                                            "", FacesMessage.SEVERITY_ERROR);
                }
            }

            if (retVal != null && retVal.length() > 0)
                return retVal;
            else
                return "N";
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while printing selected document." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    
    public String updateSeafarerBasicInfo()
    {
        try 
        {
            Row seafarerRow =
                ((this.getRmiSeafarerView1().getCurrentRow() != null) ? this.getRmiSeafarerView1().getCurrentRow() :
                 this.getRmiSeafarerView1().first());

            if (seafarerRow != null && seafarerRow.getAttribute("EsiBatchId") != null) {
                this.getDBTransaction().postChanges();

                try {
                    String retVal =
                        (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.rmi_update_seafarer_info(?,?,?,?,?)", new Object[] {
                                                seafarerRow.getAttribute("EsiBatchId"),
                                                null, null, //seafarerRow.getAttribute("EsiId")
                                                seafarerRow.getAttribute("SeafarerId"), getUserId()
                    });

                    if (null != retVal && retVal.equalsIgnoreCase("Y")) {
                        this.getDBTransaction().commit();
                        return retVal;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating Seafarer information." +
                                                           " Please contact System Administrator.", null,
                                                           FacesMessage.SEVERITY_ERROR);

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating Seafarer information."+
                                                   " Please contact System Administrator.", null, 
                                                   FacesMessage.SEVERITY_ERROR);
        }
        
        return "N";
    }

    /**
     * Method validates if the selected Order in on Hold or not.
     * @return String returns N-on Hold, Y-not on Hold.
     **/
    public String validateOrderPrint()
    {
        try 
        {       
            Row orderRow = (this.getProcessBookHeaderView1().getCurrentRow() != null)
                            ? this.getProcessBookHeaderView1().getCurrentRow()
                            : this.getProcessBookHeaderView1().first();

            if (orderRow != null && orderRow.getAttribute("OrderHoldFlag") != null) 
            {
                if(orderRow.getAttribute("OrderHoldFlag").toString().equalsIgnoreCase("true")
                    || orderRow.getAttribute("OrderHoldFlag").toString().equalsIgnoreCase("Y"))
                    return "N";
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception validating print order." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "Y";
    }
    
    public String[] fetchVerifyOnlineUrl(String docType)
    {
        String[] urls = new String[50];
        Row docRow = null;
        
        if (docType != null && docType.equalsIgnoreCase("U"))
            docRow = this.getOcVerificationOrdersView1().getCurrentRow();
        else
            docRow = this.getOcWaitingResponseView1().getCurrentRow();

        if (docRow != null && docRow.getAttribute("VerificationUrl") != null) 
        {
//            System.out.println("url :: "+docRow.getAttribute("VerificationUrl"));
            urls = docRow.getAttribute("VerificationUrl").toString().split("http");
        }
        
        return urls;
    }

    /**
     * Method uploads document selected by user.
     * @param param1 pass upload type eg. SICD/CONSENT/etc.
     * @param param2 pass object name/table name.
     * @param param3 pass column name.
     * @param fileName pass the file name selected by user.
     * @param docType pass certificate type i.e. OC-Officers Certificate/SQC-Special Qualifications
     * @return String returns uploaded file path on server.
     **/
    public String uploadRmiCocDocument(String param1, String param2, String param3, String fileName, String docType)
    {        
        String stat = null;
        String outFile = null;
        Integer edocId = null;
            
        try 
        {
            Row docRow;
            Row sfrrRow = this.getRmiSeafarerView1().getCurrentRow();

            if (docType != null && docType.equalsIgnoreCase("OC"))
                docRow = this.getRmiSeafarerDocsOcView1().getCurrentRow();
            else
                docRow = this.getRmiSeafarerDocsSqcView1().getCurrentRow();

            if (sfrrRow != null && docRow != null) 
            {
                System.out.println("EsiBatchId :: "+sfrrRow.getAttribute("EsiBatchId"));
                System.out.println("SeafarerId :: "+sfrrRow.getAttribute("SeafarerId"));
                System.out.println("EsiId :: "+docRow.getAttribute("EsiId"));
                System.out.println("EsdiId :: "+docRow.getAttribute("EsdiId"));
                System.out.println("UserId :: "+getUserId());
                System.out.println("fileName :: "+fileName);
            
                stat = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.upload_rmi_coc(?,?,?,?,?,?,?)", new Object[] {
                                               sfrrRow.getAttribute("EsiBatchId"),
                                               sfrrRow.getAttribute("SeafarerId"), 
                                               docRow.getAttribute("EsiId"),
                                               docRow.getAttribute("EsdiId"),
                                               param2,
                                               getUserId(),
                                               fileName
                });

                if (stat != null) {
//                    this.getDBTransaction().commit();
                    
                    System.out.println("stat :: "+stat);
                    
                    String[] splitStr = stat.split("#");
                    if(splitStr.length > 0)
                    {                        
                        edocId = (splitStr[0] != null ? Integer.parseInt(splitStr[0]) : null);
                        outFile = splitStr[1];
                        docRow.setAttribute("EdocId", edocId);
                    }

//                    if (docType != null && docType.equalsIgnoreCase("OC"))
//                        this.getRmiSeafarerDocsOcView1().executeQuery();
//                    else
//                        this.getRmiSeafarerDocsSqcView1().executeQuery();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while uploading COC document." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        
        return outFile;
    }
    
    /**
     * Method to call procedure for applying hold.
     */
    public void applyHold() 
    {
        try 
        {
            Integer hold_id = null;
            String holdComm = null;
            ViewObject ordHeader = getOrderHeaderView1();
            Row cuRow = ordHeader.getCurrentRow();
            
            if(cuRow != null && cuRow.getAttribute("HeaderId") != null)
            {
                Integer header_id = Integer.parseInt(cuRow.getAttribute("HeaderId").toString());
                ViewObject apply = getApplyHoldDualView();
                Row row = apply.getCurrentRow();
                
                if (row.getAttribute("tranHoldComments") != null && row.getAttribute("tranHoldId") != null) 
                {                    
                    hold_id = Integer.parseInt(row.getAttribute("tranHoldId").toString());
                    holdComm = row.getAttribute("tranHoldComments").toString();
                    
                //                String holdReason = row.getAttribute("tranHoldReason").toString();
                //                ViewObject hold = getGetHoldIdView();
                //                hold.setNamedWhereClauseParam("pHoldReason", holdReason);
                //                hold.executeQuery();
                //                Row frow = hold.first();
                //                if (frow != null && frow.getAttribute("HoldId") != null)
                //                    hold_id = Integer.parseInt(frow.getAttribute("HoldId").toString());
                }
                
                //            if (row.getAttribute("tranHoldComments") != null)
                //            {
                //                holdComm = row.getAttribute("tranHoldComments").toString();
                //            }
                
                CallableStatement st = null;
                String p_log = "Success";
                String sql = "BEGIN RMI_SICD_PUB.apply_order_hold(?,?,?,?,?);END;";
                st = getDBTransaction().createCallableStatement(sql, 0);
                st.setObject(1, header_id); //MAIL SERVER
                st.setObject(2, null);
                st.setObject(3, hold_id);
                st.setObject(4, holdComm);
                st.setObject(5, getUserId());
                //OUT PARAM ERROR
                //            header_id = Integer.parseInt(st.getObject(4).toString());
                st.execute();
                
                System.out.println("header_id :: "+header_id);
                System.out.println("hold_id :: "+hold_id);
                System.out.println("holdComm :: "+holdComm);
                System.out.println("getUserId() :: "+getUserId());

                this.getDBTransaction().commit();
                this.getOrderHeaderView1().executeQuery();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Method marks all documents and certificates as approved for selected seafarer.
     **/
    public void approveAllDocsCerts(String value)
    {
        try 
        {
            Row seafarerRow = this.getRmiSeafarerView1().getCurrentRow();
            ViewObjectImpl sfrrVo = this.getRmiSeafarerView1();
            Row sfrrRow = sfrrVo.getCurrentRow();
            String setValue = null;

            if (sfrrRow != null && value != null) 
            {
                setValue = ((value.equalsIgnoreCase("true") || value.equalsIgnoreCase("Y"))
                            ? "Approve"
                            : "Pending");
                
                System.out.println("setValue in Evaluator :: "+setValue);
                
                if(sfrrRow.getAttribute("PhotoGrdStatus") == null 
                   || (!(sfrrRow.getAttribute("PhotoGrdStatus").toString().equalsIgnoreCase("Cancel"))
                       && !(sfrrRow.getAttribute("PhotoGrdStatus").toString().equalsIgnoreCase("Not Applicable"))))
                    sfrrRow.setAttribute("PhotoGrdStatus", setValue);
                
                if(sfrrRow.getAttribute("IdentityDocGrdStatus") == null 
                   || (!(sfrrRow.getAttribute("IdentityDocGrdStatus").toString().equalsIgnoreCase("Cancel"))
                       && !(sfrrRow.getAttribute("IdentityDocGrdStatus").toString().equalsIgnoreCase("Not Applicable"))))
                    sfrrRow.setAttribute("IdentityDocGrdStatus", setValue);
                
                if(sfrrRow.getAttribute("PhysicalGrdStatus") == null 
                   || (!(sfrrRow.getAttribute("PhysicalGrdStatus").toString().equalsIgnoreCase("Cancel"))
                       && !(sfrrRow.getAttribute("PhysicalGrdStatus").toString().equalsIgnoreCase("Not Applicable"))))
                    sfrrRow.setAttribute("PhysicalGrdStatus", setValue);
                
                if(sfrrRow.getAttribute("SeaserviceGrdStatus") == null 
                   || (!(sfrrRow.getAttribute("SeaserviceGrdStatus").toString().equalsIgnoreCase("Cancel"))
                       && !(sfrrRow.getAttribute("SeaserviceGrdStatus").toString().equalsIgnoreCase("Not Applicable"))))
                    sfrrRow.setAttribute("SeaserviceGrdStatus", setValue);
                
                if(sfrrRow.getAttribute("ApplicationGrdStatus") == null 
                   || (!(sfrrRow.getAttribute("ApplicationGrdStatus").toString().equalsIgnoreCase("Cancel"))
                       && !(sfrrRow.getAttribute("ApplicationGrdStatus").toString().equalsIgnoreCase("Not Applicable"))))
                    sfrrRow.setAttribute("ApplicationGrdStatus", setValue);
                
                if(sfrrRow.getAttribute("AffidavitGrdStatus") == null 
                   || (!(sfrrRow.getAttribute("AffidavitGrdStatus").toString().equalsIgnoreCase("Cancel"))
                       && !(sfrrRow.getAttribute("AffidavitGrdStatus").toString().equalsIgnoreCase("Not Applicable"))))
                    sfrrRow.setAttribute("AffidavitGrdStatus", setValue);
                
                if(sfrrRow.getAttribute("SatGrdStatus") == null
                   || (!(sfrrRow.getAttribute("SatGrdStatus").toString().equalsIgnoreCase("Cancel"))
                       && !(sfrrRow.getAttribute("SatGrdStatus").toString().equalsIgnoreCase("Not Applicable"))))
                    sfrrRow.setAttribute("SatGrdStatus", setValue);
                
                if(sfrrRow.getAttribute("PhotoGrdStatus") == null 
                   || (!(sfrrRow.getAttribute("PhotoGrdStatus").toString().equalsIgnoreCase("Cancel"))
                       && !(sfrrRow.getAttribute("PhotoGrdStatus").toString().equalsIgnoreCase("Not Applicable"))))
                    sfrrRow.setAttribute("ConGrdStatus", setValue);
                
                if(sfrrRow.getAttribute("BookGrdStatus") == null 
                   || (!(sfrrRow.getAttribute("BookGrdStatus").toString().equalsIgnoreCase("Cancel"))
                       && !(sfrrRow.getAttribute("BookGrdStatus").toString().equalsIgnoreCase("Not Applicable"))))
                    sfrrRow.setAttribute("BookGrdStatus", setValue);
                
                if(sfrrRow.getAttribute("IdCardGrdStatus") == null 
                   || (!(sfrrRow.getAttribute("IdCardGrdStatus").toString().equalsIgnoreCase("Cancel"))
                       && !(sfrrRow.getAttribute("IdCardGrdStatus").toString().equalsIgnoreCase("Not Applicable"))))
                    sfrrRow.setAttribute("IdCardGrdStatus",setValue);
            }

            ViewObjectImpl ocDocVo = this.getRmiSeafarerDocsOcView1();
            RowSetIterator ocDocRsi = ocDocVo.createRowSetIterator(null);

            while (ocDocRsi.hasNext()) {
                Row r = ocDocRsi.next();
                if (r != null) {
                    if(r.getAttribute("GradingStatus") == null 
                       || (!(r.getAttribute("GradingStatus").toString().equalsIgnoreCase("Cancel"))
                           && !(r.getAttribute("GradingStatus").toString().equalsIgnoreCase("Not Applicable"))))
                        r.setAttribute("GradingStatus", setValue);
                }
            }

            ViewObjectImpl sqcDocVo = this.getRmiSeafarerDocsSqcView1();
            RowSetIterator sqcDocRsi = sqcDocVo.createRowSetIterator(null);

            while (sqcDocRsi.hasNext()) {
                Row r = sqcDocRsi.next();
                if (r != null) {
                    if(r.getAttribute("GradingStatus3") == null 
                       || (!(r.getAttribute("GradingStatus3").toString().equalsIgnoreCase("Cancel"))
                           && !(r.getAttribute("GradingStatus3").toString().equalsIgnoreCase("Not Applicable"))))
                        r.setAttribute("GradingStatus3", setValue);
                }
            }
            
            sqcDocRsi.closeRowSetIterator();
            ocDocRsi.closeRowSetIterator();
            sfrrVo.executeQuery();
            
            if(seafarerRow != null)
                this.getRmiSeafarerView1().setCurrentRow(seafarerRow);
            
        } catch (Exception e) {
            e.printStackTrace();
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while approving seafarer documents." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR);
        }  
    }

    /**
     * Method marks all documents and certificates as verified for selected seafarer.
     **/
    public void verifyAllDocsCerts(String value)
    {
        try 
        {
            Row seafarerRow = this.getRmiSeafarerView1().getCurrentRow();
            ViewObjectImpl sfrrVo = this.getRmiSeafarerView1();
            Row sfrrRow = sfrrVo.getCurrentRow();

            String setValue = null;

            if (sfrrRow != null && value != null) 
            {
                setValue = ((value.equalsIgnoreCase("true") || value.equalsIgnoreCase("Y"))
                            ? "Yes"
                            : null);
                
                System.out.println("setValue in QA Processor :: "+setValue);
                
                sfrrRow.setAttribute("DataVerifiedInfo", setValue);
                sfrrRow.setAttribute("PhotoVerified", setValue);
                sfrrRow.setAttribute("IdentityDocVerified", setValue);
                sfrrRow.setAttribute("PhysicalVerified", setValue);
                sfrrRow.setAttribute("SeaserviceVerified", setValue);
                sfrrRow.setAttribute("ApplicationVerified", setValue);
                sfrrRow.setAttribute("AffidavitVerified", setValue);
                sfrrRow.setAttribute("SatVerified", setValue);
                sfrrRow.setAttribute("ConVerified", setValue);
                sfrrRow.setAttribute("BookVerified", setValue);
                sfrrRow.setAttribute("IdCardVerified", setValue);
            }

            ViewObjectImpl ocDocVo = this.getRmiSeafarerDocsOcView1();
            RowSetIterator ocDocRsi = ocDocVo.createRowSetIterator(null);

            while (ocDocRsi.hasNext()) {
                Row r = ocDocRsi.next();
                if (r != null) {   
                    
                    System.out.println("OC DataVerified :: "+r.getAttribute("DataVerified"));                    
                    System.out.println("OC GradingStatus :: "+r.getAttribute("GradingStatus"));
                    
                    if(r.getAttribute("DataVerified") == null 
                       || (!(r.getAttribute("DataVerified").toString().equalsIgnoreCase("Cancel"))
                            && !(r.getAttribute("GradingStatus").toString().equalsIgnoreCase("Cancel"))))
                        r.setAttribute("DataVerified", setValue);
                }
            }

            ViewObjectImpl sqcDocVo = this.getRmiSeafarerDocsSqcView1();
            RowSetIterator sqcDocRsi = sqcDocVo.createRowSetIterator(null);

            while (sqcDocRsi.hasNext()) {
                Row r = sqcDocRsi.next();
                if (r != null) {
                    
                    System.out.println("SQC DataVerified1 :: "+r.getAttribute("DataVerified1"));                    
                    System.out.println("SQC GradingStatus3 :: "+r.getAttribute("GradingStatus3"));
                    
                    if(r.getAttribute("DataVerified1") == null 
                       || (!(r.getAttribute("DataVerified1").toString().equalsIgnoreCase("Cancel"))
                            && !(r.getAttribute("GradingStatus3").toString().equalsIgnoreCase("Cancel"))))
                        r.setAttribute("DataVerified1", setValue);
                }
            }
            
            sqcDocRsi.closeRowSetIterator();
            ocDocRsi.closeRowSetIterator();
            sfrrVo.executeQuery();
            
            if(seafarerRow != null)
                this.getRmiSeafarerView1().setCurrentRow(seafarerRow);
            
        } catch (Exception e) {
            e.printStackTrace();
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while verifying seafarer data." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR);
        }  
    }
    
    /**
     * Method to refresh ApplyHoldDualView.
     */
    public void refreshApplyHold() 
    {
        try 
        {
            ViewObject apply = getApplyHoldDualView();
            apply.executeQuery();
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while applying hold." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method updates the application the status by validating it's documents/certificates on Save.
     * @return returns success-Y/error-N.
     */
    public String updateApplicationStatus()
    {
        try 
        {
            Row seafarerRow = this.getRmiSeafarerView1().getCurrentRow();

            if (seafarerRow != null) {
                if (seafarerRow.getAttribute("SeafarerGrdStatus") != null) {
//                    System.out.println("SeafarerGrdStatus :: " + seafarerRow.getAttribute("SeafarerGrdStatus"));
//                    System.out.println("validateApproveSeafarer :: " + validateApproveSeafarer());
//                    System.out.println("validateHoldSeafarer :: " + validateHoldSeafarer());

                    if (seafarerRow.getAttribute("SeafarerGrdStatus").toString().equalsIgnoreCase("Approved") &&
                        !(validateApproveSeafarer().equalsIgnoreCase("Y")))
                        seafarerRow.setAttribute("SeafarerGrdStatus", "Pending");
                    if (seafarerRow.getAttribute("SeafarerGrdStatus").toString().equalsIgnoreCase("Rejected") &&
                        !(validateHoldSeafarer().equalsIgnoreCase("Y")))
                        seafarerRow.setAttribute("SeafarerGrdStatus", "Pending");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating application status." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        
        return "Y";
    }
    
    /**
     * Method filters Order Hold details and display it on View Batch form.
     **/
    public void fetchOrderHoldDetails()
    {
        try 
        {
            Row batchRow = this.getRmiBatchView2().getCurrentRow();

            if (batchRow != null && batchRow.getAttribute("OeHeaderId") != null) {
//                ViewObjectImpl holdVo = getOrderHoldDetailsView1();
//                holdVo.setNamedWhereClauseParam("pHeaderId", batchRow.getAttribute("OeHeaderId"));
//                holdVo.executeQuery();
                System.out.println("OeHeaderId :: "+batchRow.getAttribute("OeHeaderId"));
                fetchOrderHoldDetailsGeneric((Integer) batchRow.getAttribute("OeHeaderId"));
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching order hold details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     *   Method fetches new TC application url.
     *   @return String returns url in String format.
     **/
    public String createBatchVetting(Integer seafarerId) 
    {
        String url = null;
        try 
        {
            Row seafarerRow = this.getEditSeafarersView1().getCurrentRow();
            Integer vSeafarerId = null;
            
            if(seafarerId != null)
                vSeafarerId = seafarerId;
            else
            {                
                if(seafarerRow != null && seafarerRow.getAttribute("SeafarerId") != null)
                    vSeafarerId = Integer.parseInt(seafarerRow.getAttribute("SeafarerId").toString());
            }
            
//            System.out.println("vSeafarerId :: "+vSeafarerId);
            
            if(vSeafarerId != null)
            {                
                url = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.insert_party_master(?,?,?,?)", new Object[] {
                                                     "SICD_SEAFARERS",
                                                     "SEAFARER_ID",
                                                     vSeafarerId,
                                                     getUserId()
                    });
                this.getDBTransaction().commit();
            }
        } catch (Exception e) {
            e.printStackTrace();
                    AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while creating TC references." +
                                                           "Please contact your System Administrator.", "",
                                                           FacesMessage.SEVERITY_ERROR);
        }
        
        return url;
    }
    
    /**
     * Method updates seafarer verification status by validating it's documents/certificates on Save.
     * @return returns success-Y/error-N.
     */
    public String updateVerificationStatus()
    {
        try 
        {
            Row seafarerRow = this.getRmiSeafarerView1().getCurrentRow();

            if (seafarerRow != null) {
                if (seafarerRow.getAttribute("SeafarerVerified") != null) {
                        System.out.println("SeafarerVerified :: " + seafarerRow.getAttribute("SeafarerVerified"));
                        System.out.println("validateVerifySeafarerData :: " + validateVerifySeafarerData());

                    if (seafarerRow.getAttribute("SeafarerVerified").toString().equalsIgnoreCase("Yes") &&
                        !(validateVerifySeafarerData().equalsIgnoreCase("Y")))
                        seafarerRow.setAttribute("SeafarerVerified", "No");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating verification status." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        
        return "Y";
    }
    
    /**
     * Method to call procedure for applying line hold.
     */
    public void applyLineHold() 
    {
        try 
        {
            Integer hold_id = null;
            String holdComm = null;
            ViewObject ordLines = getOrderLinesView1();
            Row cuRow = ordLines.getCurrentRow();
            
            System.out.println("cuRow :: "+cuRow);            
            System.out.println("HeaderId :: "+cuRow.getAttribute("HeaderId"));            
            System.out.println("LineId :: "+cuRow.getAttribute("LineId"));
            
            if(cuRow != null && cuRow.getAttribute("HeaderId") != null && cuRow.getAttribute("LineId") != null)
            {
                Integer header_id = Integer.parseInt(cuRow.getAttribute("HeaderId").toString());
                Integer line_id = Integer.parseInt(cuRow.getAttribute("LineId").toString());
                
                hold_id = 1016;
                holdComm = "Document Print Hold";
                
                CallableStatement st = null;
                String sql = "BEGIN RMI_SICD_PUB.apply_order_hold(?,?,?,?,?);END;";
                st = getDBTransaction().createCallableStatement(sql, 0);
                st.setObject(1, header_id);
                st.setObject(2, line_id);
                st.setObject(3, hold_id);
                st.setObject(4, holdComm);
                st.setObject(5, getUserId());
                st.execute();
                
//                System.out.println("header_id :: "+header_id);                
//                System.out.println("line_id :: "+line_id);
//                System.out.println("hold_id :: "+hold_id);
//                System.out.println("holdComm :: "+holdComm);
//                System.out.println("getUserId() :: "+getUserId());

                this.getDBTransaction().commit();
                this.getOrderHeaderView1().executeQuery();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Method releases hold from the selected order line.
     * @return String returns success or error message.
     **/
    public String releaseLineHold()
    {
        try 
        {
            Row odrLinesRow = this.getOrderLinesView1().getCurrentRow();
            String[] retStat = null;

                retStat =
                    callReleaseHoldProc(((Integer) odrLinesRow.getAttribute("HeaderId")),
                                        ((Integer) odrLinesRow.getAttribute("LineId")),
                                        "MANUAL_RELEASE_MARGIN_HOLD",
                                        "Release Document Print Hold",
                                        1016);

            if (!(retStat.length > 1 && (retStat[1] != null && retStat[0].length() > 0))) {
                this.getDBTransaction().commit();
                this.getOrderHeaderView1().executeQuery();
                return retStat[1];
            } else
                return "N";
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while releasing order line hold." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return "N";
    }
    
    /**
     * Method resets search order form.
     **/
    public void refreshSearchOrder()
    {
        try 
        {
            this.getOrderHeaderView1().executeQuery();
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while refreshing order." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method filters Order Hold details and display it on Search Order form.
     **/
    public void fetchSearchOrderHoldDetails()
    {
        try 
        {
            Row orderRow = this.getOrderHeaderView1().getCurrentRow();

            if (orderRow != null && orderRow.getAttribute("HeaderId") != null) {
                System.out.println("HeaderId :: "+orderRow.getAttribute("HeaderId"));
                fetchOrderHoldDetailsGeneric((Integer) orderRow.getAttribute("HeaderId"));
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching order hold details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Generic method to filter Order Hold details and display it on Search Order form.
     * @param headerId pass Order Header ID for the selected Order.
     **/
    public void fetchOrderHoldDetailsGeneric(Integer headerId)
    {
        try 
        {
            if (headerId != null) 
            {
                System.out.println("headerId :: "+headerId);
                ViewObjectImpl holdVo = getOrderHoldDetailsView1();
                holdVo.setNamedWhereClauseParam("pHeaderId", headerId);
                holdVo.executeQuery();
//                System.out.println("hold rows :: "+holdVo.getRowCount());
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching order hold details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method filters Order Hold details and display it on Assign Book Number form.
     **/
    public void fetchAbnOrderHoldDetails()
    {
        try 
        {
            Row assignBookRow = this.getProcessBookHeaderView1().getCurrentRow();

            if (assignBookRow != null && assignBookRow.getAttribute("HeaderId") != null) {
                System.out.println("HeaderId :: "+assignBookRow.getAttribute("HeaderId"));
                fetchOrderHoldDetailsGeneric((Integer) assignBookRow.getAttribute("HeaderId"));
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching order hold details." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /** @deprecated **/
    public void setGenericTcParameters(String calledFrom)
    {
        try
        {
           if (calledFrom != null) 
           {
               Row seafarerRow = null;
               Integer esiBatchId = null;
               
               if(calledFrom.trim().equalsIgnoreCase("Grading"))
               {
                   seafarerRow = this.getRmiSeafarerView1().getCurrentRow();
                   esiBatchId = Integer.parseInt(seafarerRow.getAttribute("EsiBatchId").toString());
               }
               else
                   seafarerRow = this.getSicdSeafarerView1().getCurrentRow();
               
               if(seafarerRow != null && seafarerRow.getAttribute("SeafarerId") != null)
               {                   
                   ADFContext.getCurrent().getSessionScope().put("P_SEAFARER_ID", seafarerRow.getAttribute("SeafarerId"));
                   ADFContext.getCurrent().getSessionScope().put("P_ESI_BATCH_ID", esiBatchId);
               }
           }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while setting Generic TC parameters." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method returns Status of selected Seafarer on Edit Seafarers form.
     **/
    public String fetchSelectedSeafarerStatus()
    {
        try 
        {
            Row seafarerRow = (this.getEditSeafarersView1().getCurrentRow() != null)
                               ? this.getEditSeafarersView1().getCurrentRow()
                               : this.getEditSeafarersView1().first();

            if (seafarerRow != null && seafarerRow.getAttribute("Status") != null) 
            {
                return seafarerRow.getAttribute("Status").toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching Seafarer Status." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        
        return null;
    }
    
    /**
     * Method returns Status of selected Seafarer on Edit Seafarers form.
     * @param reason - pass selected reason for Canceling selected Order line.
     * @return String - returns status returned by procedure, i.e. Y-Success, else return message returned by procedure
     **/
    public String cancelLineOnSearchOrder(String reason)
    {
        ViewObject orderlineView = getOrderLinesView1();
        Row currentRow = orderlineView.getCurrentRow();
        Integer line_id  = Integer.parseInt(currentRow.getAttribute("LineId").toString());
        
        ViewObject orderHeaderView  = getOrderHeaderView1();
        Row row = orderHeaderView.getCurrentRow();
        Integer header_id = Integer.parseInt(row.getAttribute("HeaderId").toString());
            CallableStatement st = null;
            String status = null;
            String p_log = "S";
            try {
                String sql = "BEGIN RMI_SICD_PUB.cancel_line(?,?,?,?);END;";
                st = getDBTransaction().createCallableStatement(sql, 0);
                st.setObject(1, line_id); //MAIL SERVER
                st.setObject(2, reason);
                st.registerOutParameter(3, Types.VARCHAR); //OUT PARAM ERROR
                st.registerOutParameter(4, Types.VARCHAR);
               
                st.execute();
               
                if (st.getObject(3) != null) {
    //                    System.out.println(st.getObject(3).toString()+"------444");
                   p_log = st.getObject(3).toString();
                }
                
               if(p_log.equalsIgnoreCase("S"))
               {               
                    String  retVal1 = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.rmi_cancel_batch_line(?,?,?)", new Object[] {
                                                       header_id,line_id, getUserId()
                      });
                   this.getDBTransaction().commit();
                  String  retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.process_order_grading(?,?)", new Object[] {
                                                     header_id, getUserId()
                    }); 
                  return p_log;
                }
                if (st.getObject(4) != null) {
                    p_log = st.getObject(4).toString();
                    return p_log;
                }
               
            } catch (Exception e) {
                AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while loading Cancelling line." +
                                              " Please contact your System Administrator.", "", FacesMessage.SEVERITY_ERROR);
                            e.printStackTrace();
            } finally {
                if (st != null) {
                    try {

                        st.close();
                    } catch (SQLException e) {

                    }
                }
            } 
        return null;
    }
    
    /**
     * Method returns Status of selected Seafarer on Edit Seafarers form.
     * @return - returns status returned by function, i.e. Y-Success, else return message returned by procedure
     **/
    public String updateSeafarerDocStatus(String seafarerStatus)
    {
        String retVal = null;
        try 
        {
            Row seafarerRow = (this.getEditSeafarersView1().getCurrentRow() != null)
                                   ? this.getEditSeafarersView1().getCurrentRow()
                                   : this.getEditSeafarersView1().first();
            
             if (seafarerRow != null && seafarerRow.getAttribute("SeafarerId") != null
                        && seafarerRow.getAttribute("Status") != null) 
             {
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.rmi_change_seafarer_status(?,?,?)", new Object[] {
                                                     seafarerRow.getAttribute("SeafarerId"),
                                                     seafarerRow.getAttribute("Status"),
                                                     getUserId()
                    });
//                    System.out.println("SeafarerId :: "+seafarerRow.getAttribute("SeafarerId"));
//                    System.out.println("Status :: "+seafarerRow.getAttribute("Status"));
//                    System.out.println("retVal :: "+retVal);
             }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating Seafarer Status." +
                                                 " Please contact your System Administrator." , 
                                                 "", FacesMessage.SEVERITY_ERROR);
        }
        
        return retVal;
    }
    
    /**
     * Method fetches and displays Seafarer Notes while changing status.
     **/
    public void filterSeafarerShortText()
    {
        try 
        {
            Row seafarerRow = this.getEditSeafarersView1().getCurrentRow();

            if (seafarerRow != null && seafarerRow.getAttribute("SeafarerId") != null) {
                ViewObjectImpl shortTextVo = this.getSeafarerShortTextView1();
                shortTextVo.setNamedWhereClauseParam("pSeafarerId", seafarerRow.getAttribute("SeafarerId").toString());
                shortTextVo.executeQuery();
                
                Row[] shortTextRow = shortTextVo.getAllRowsInRange();
                
                if(shortTextRow.length > 0)
                {
                    Row r = shortTextRow[0];
                    
                    if(r != null && r.getAttribute("MediaId") != null && r.getAttribute("AttachmentText") != null)
                    {
                        this.getEditSeafarersView1().getCurrentRow().setAttribute("TransMediaId", r.getAttribute("MediaId"));
                        this.getEditSeafarersView1().getCurrentRow().setAttribute("TransShortText", r.getAttribute("AttachmentText"));
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching Seafarer Notes." +
                                                 " Please contact your System Administrator." , 
                                                 "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    /**
     * Method updates Seafarer Notes/Short text.
     * @return String returns Y-Success else error message.
     **/
    public String updateSeafarerShortText()
    {
        String retVal = null;
        try 
        {
            Row seafarerRow = this.getEditSeafarersView1().getCurrentRow();
            
            System.out.println("MediaId :: "+seafarerRow.getAttribute("TransMediaId"));
            System.out.println("SeafarerId :: "+seafarerRow.getAttribute("SeafarerId"));
            System.out.println("AttachmentText :: "+seafarerRow.getAttribute("TransShortText"));
            
            if (seafarerRow != null && seafarerRow.getAttribute("SeafarerId") != null && seafarerRow.getAttribute("TransShortText") != null)
            {                    
                    retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.RMI_UPD_SEAFARER_SHORT_TEXT(?,?,?,?)", new Object[] {
                                                     Integer.parseInt(seafarerRow.getAttribute("SeafarerId").toString()),
                                                     seafarerRow.getAttribute("TransMediaId"),
                                                     seafarerRow.getAttribute("TransShortText"),
                                                     getUserId()
                    });
            }
            
            System.out.println("retVal :: "+retVal);
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating Seafarer Notes." +
                                                 " Please contact your System Administrator." , 
                                                 "", FacesMessage.SEVERITY_ERROR);
        }
        
        return retVal;
    }
    
    /**
     * Method creates new Book line in Order and SICD tables.
     * @return String returns Y-Success else error message.
     **/
    
    public String createNewBookLine()
    {
        String retVal = "Y";
        
        try 
        {
            Row seafarerRow = this.getRmiSeafarerView1().getCurrentRow();
            Row batchRow = this.getRmiBatchView2().getCurrentRow();

            if (batchRow != null && batchRow.getAttribute("OeHeaderId") != null && seafarerRow != null &&
                seafarerRow.getAttribute("EsiId") != null) {
                retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.create_book_order_line(?,?)", new Object[] {
                                                 seafarerRow.getAttribute("EsiId"), batchRow.getAttribute("OeHeaderId")
                });
                
//                System.out.println("retVal :: "+retVal);
                
                this.getDBTransaction().commit();

                if (retVal != null && retVal.contains("2")) {
                    AdfUtils.addFormattedFacesErrorMessage("Book already exists in Order.", "",
                                                           FacesMessage.SEVERITY_ERROR);
                    return null;
                } 
//                else
//                    processOrder();
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while Creating new book " +
                                                        " Please contact your System Administrator." , 
                                                      "", FacesMessage.SEVERITY_ERROR);
        }
        
        return retVal;
    }
    
    /**
     * Method maintains flag if user has changed Issue type manually or not.
     * @return String returns Y-Success else error message.
     **/
    
    public String updateIssueTypeManually(String updateFor)
    {
        try 
        {
            System.out.println("updateFor :: "+updateFor);
            
            if (updateFor != null) {
                Row row = null;

                if (updateFor.equalsIgnoreCase("Book") || updateFor.equalsIgnoreCase("IDCard")) {
                    row =
                        (this.getRmiSeafarerView1().getCurrentRow() != null) ?
                        this.getRmiSeafarerView1().getCurrentRow() : this.getRmiSeafarerView1().first();
                    if (updateFor.equalsIgnoreCase("Book") && row != null) {
                        System.out.println("updateFor Book :: " + updateFor);
                        row.setAttribute("BookIssueTypeUpd", "Y");
                        row.setAttribute("BookIssueTypeUpdDt", new java.sql.Timestamp(System.currentTimeMillis()));
                    } else if (updateFor.equalsIgnoreCase("IDCard") && row != null) {
                        System.out.println("updateFor IDCard :: " + updateFor);
                        row.setAttribute("IdcardIssueTypeUpd", "Y");
                        row.setAttribute("IdcardIssueTypeUpdDt", new java.sql.Timestamp(System.currentTimeMillis()));
                    }

                } else if (updateFor.equalsIgnoreCase("OC")) {
                    row =
                        (this.getRmiSeafarerDocsOcView1().getCurrentRow() != null) ?
                        this.getRmiSeafarerDocsOcView1().getCurrentRow() : this.getRmiSeafarerDocsOcView1().first();

                    if (updateFor.equalsIgnoreCase("OC") && row != null) {
                        System.out.println("updateFor OC :: " + updateFor);
                        row.setAttribute("OcDocIssueTypeUpd", "Y");
                        row.setAttribute("OcDocIssueTypeUpdDt", new java.sql.Timestamp(System.currentTimeMillis()));
                    }
                } else if (updateFor.equalsIgnoreCase("SQC")) {
                    row =
                        (this.getRmiSeafarerDocsSqcView1().getCurrentRow() != null) ?
                        this.getRmiSeafarerDocsSqcView1().getCurrentRow() : this.getRmiSeafarerDocsSqcView1().first();

                    if (updateFor.equalsIgnoreCase("SQC") && row != null) {
                        System.out.println("updateFor SQC :: " + updateFor);
                        row.setAttribute("SqcDocIssueTypeUpd", "Y");
                        row.setAttribute("SqcDocIssueTypeUpdDt", new java.sql.Timestamp(System.currentTimeMillis()));
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while updating "+" Issue type." +
                                                        " Please contact your System Administrator." , 
                                                      "", FacesMessage.SEVERITY_ERROR);
        }
        
        return "Y";
    }
    
    /**
     * Method replaces Seafarer and all it's docs whichever is selected by user.
     * @return String returns Y-Success else error message.
     **/
    
    public String updateSeafarerId()
    {
        String retVal = null;
        BigDecimal requestId = null;
        Row vwBatchRow = this.getRmiBatchView2().getCurrentRow();
        Row vwSfrrRow = this.getRmiSeafarerView1().getCurrentRow();
        Integer esiId = null;

        System.out.println("vwBatchRow :: "+vwBatchRow);
        System.out.println("vwSfrrRow :: "+vwSfrrRow);

            if (vwSfrrRow != null && vwSfrrRow.getAttribute("TransUpdateSeafarerId") != null && vwSfrrRow.getAttribute("EsiId") != null) 
            {
                esiId = Integer.parseInt(vwSfrrRow.getAttribute("EsiId").toString());
                
                System.out.println("EsiId :: "+vwSfrrRow.getAttribute("EsiId"));
                System.out.println("esiId :: "+esiId);
                System.out.println("TransUpdateSeafarerId :: "+vwSfrrRow.getAttribute("TransUpdateSeafarerId"));
                System.out.println("SeafarerId :: "+vwSfrrRow.getAttribute("SeafarerId"));
                
                Integer seafarerId = (Integer) vwSfrrRow.getAttribute("TransUpdateSeafarerId");
                
                ViewObjectImpl sicdSfrrVo = this.getSicdSeafarersQueryView2();
                sicdSfrrVo.setNamedWhereClauseParam("pSeafarerId", seafarerId);
                sicdSfrrVo.executeQuery();
                
                Row[] sfrrRows = sicdSfrrVo.getAllRowsInRange();

                System.out.println("sfrrRows.length :: "+sfrrRows.length);
                
                if(sfrrRows.length > 0)
                {
                    if ((vwBatchRow != null && vwBatchRow.getAttribute("OeHeaderId") != null) &&
                        (vwSfrrRow != null && esiId != null)) 
                    {
                        System.out.println("OeHeaderId :: "+vwBatchRow.getAttribute("OeHeaderId"));
                
                        try {
                            retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.update_selected_seafarer(?,?,?,?)", new Object[] {
                                                             esiId,
                                                             vwBatchRow.getAttribute("OeHeaderId"), seafarerId,
                                                             getUserId()
                            });
                            
                            this.getDBTransaction().commit();
                            System.out.println("update_selected_seafarer :: "+retVal);

                            requestId = (BigDecimal) callDbFunction(Types.NUMERIC, "RMI_SICD_PUB.rmi_submit_ows_request(?,?,?)", new Object[] {
                                                             seafarerId,
                                                             esiId,
                                                             getUserId()
                            });
                            
                            System.out.println("rmi_submit_ows_request :: "+requestId.intValue());
                            
                            if(requestId != null)
                            {
                                vwSfrrRow.setAttribute("TransConcRequestId", requestId.intValue());
                                ADFContext.getCurrent().getSessionScope().put("P_CONC_REQUEST_ID", requestId.intValue());
                                
                                ViewObjectImpl concReqStatusVo = this.getConcRequestStatusView1();
                                concReqStatusVo.setNamedWhereClauseParam("pRequestId", requestId.intValue());
                                concReqStatusVo.executeQuery();
                                
                                Row[] concReqStatusRows = concReqStatusVo.getAllRowsInRange();
                                
                                if(concReqStatusRows.length> 0)
                                {
                                    Row r = concReqStatusRows[0];
                                    
                                    if ("P".equals(r.getAttribute("PhaseCode").toString()))
                                        ADFContext.getCurrent().getSessionScope().put("P_COLOR_CODE", "background:#95f995 !important;color:black;");
                            //                                        vwSfrrRow.setAttribute("TransColorCode", "background:#95f995 !important;color:black;");
                                    else if (!"CDX".contains(r.getAttribute("PhaseCode").toString()))
                                        ADFContext.getCurrent().getSessionScope().put("P_COLOR_CODE", "background:#95f995 !important;color:black;");
                            //                                        vwSfrrRow.setAttribute("TransColorCode", "background:#95f995 !important;color:black;");
                                    else if ("E".equals(r.getAttribute("StatusCode").toString()))
                                        ADFContext.getCurrent().getSessionScope().put("P_COLOR_CODE", "background:#f7a1a1 !important;color:black;");
                            //                                        vwSfrrRow.setAttribute("TransColorCode", "background:#f7a1a1 !important;color:black;");
                                    else
                                        ADFContext.getCurrent().getSessionScope().put("P_COLOR_CODE", null);
                            //                                        vwSfrrRow.setAttribute("TransColorCode", "");
                                }
                            }                            
                            
                        } catch (Exception e) {
                            e.printStackTrace();
                    //                        AdfUtils.addFormattedFacesErrorMessage("There has been an error while updating Seafarer details : ",
                    //                                                      e.getMessage(), FacesMessage.SEVERITY_ERROR);
                            return null;
                        }
                    }
                    
                    System.out.println("retVal :: "+retVal);

                    if (retVal != null && !(retVal.equalsIgnoreCase("Y"))) {
                        AdfUtils.addFormattedFacesErrorMessage("There has been an error while updating Seafarer ID.", "",
                                                      FacesMessage.SEVERITY_ERROR);
                    }
                    else
                    {
                        this.getDBTransaction().commit();
                        this.getRmiSeafarerView1().executeQuery();
                        this.getRmiSeafarerView1().setCurrentRow(vwSfrrRow);
                        AdfUtils.addFormattedFacesErrorMessage("Seafarer ID Updated Successfully.", "",
                                                          FacesMessage.SEVERITY_INFO);
                    }
                }
                else
                {
                    ADFContext.getCurrent().getPageFlowScope().put("P_UPDATE_SEAFARER", "Y");
                    filterSearchSeafarerVO();
                    return "searchSeafarer";
                    
//                    try {                    
//                        retVal = (String) callDbFunction(Types.VARCHAR, "RMI_SICD_PUB.validate_seafarer_grading(?,?,?,?,?,?,?)", new Object[] {
//                                                         seafarerId,
//                                                         vwSfrrRow.getAttribute("LastName"),
//                                                         vwSfrrRow.getAttribute("FirstName"),
//                                                         vwSfrrRow.getAttribute("BirthDate"),
//                                                         vwSfrrRow.getAttribute("EsiBatchId"),
//                                                         vwSfrrRow.getAttribute("Nationality"),
//                                                         vwSfrrRow.getAttribute("EsiId")
//                        });
//                    } catch (Exception e) {
//                        e.printStackTrace();
//                        AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while validating seafarer details." +
//                                                         " Please contact your System Administrator." , 
//                                                         "", FacesMessage.SEVERITY_ERROR);
//                    }
//                    
//                    System.out.println("retVal :: "+retVal);
//                    
//                    if(retVal != null && !(retVal.equalsIgnoreCase("Y")))
//                    {
//                        filterSearchSeafarerVO();
//                        return "searchSeafarer";
//                    }
                    
//                    AdfUtils.addFormattedFacesErrorMessage("No Records found for given Seafarer ID.", "",
//                                                      FacesMessage.SEVERITY_WARN);
                }
            }
            
        return null;
    }
    
    public void additionalFilterSearch()
    {
        try 
        {            
            Row dualRow = this.getDualEditSeafarersView1().getCurrentRow();

            if (dualRow != null) {
//                System.out.println("TransSeafarerIdFilter :: " + dualRow.getAttribute("TransSeafarerIdFilter"));
//                System.out.println("TransLastNameFilter :: " + dualRow.getAttribute("TransLastNameFilter"));
//                System.out.println("TransFirstNameFilter :: " + dualRow.getAttribute("TransFirstNameFilter"));
//                System.out.println("TransBirthDateFilter :: " + dualRow.getAttribute("TransBirthDateFilter"));
//                System.out.println("TransCitizenshipFilter :: " + dualRow.getAttribute("TransCitizenshipFilter"));
//                System.out.println("TransBirthPlaceFilter :: " + dualRow.getAttribute("TransBirthPlaceFilter"));
//                System.out.println("TransDistinguishingMarksFilter :: " + dualRow.getAttribute("TransDistinguishingMarksFilter"));

                SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd");
                java.sql.Timestamp birthDate = (java.sql.Timestamp) dualRow.getAttribute("TransBirthDateFilter");
                java.util.Date date1 = null;
                String strDate1 = null;

                if (birthDate != null)
                    date1 = new java.util.Date(birthDate.getTime());

                if (date1 != null)
                    strDate1 = formatter.format(date1);

                String query =
                    "SEAFARER_ID = NVL(" + dualRow.getAttribute("TransSeafarerIdFilter") + ",SEAFARER_ID)" +
                    ((dualRow.getAttribute("TransLastNameFilter") != null)
                        ? " AND UPPER(LAST_NAME) like '%'||UPPER(NVL('" + dualRow.getAttribute("TransLastNameFilter") + "',LAST_NAME))||'%'" : "") +
                    ((dualRow.getAttribute("TransFirstNameFilter") != null) 
                        ? " AND UPPER(FIRST_NAME) like '%'||UPPER(NVL('" + dualRow.getAttribute("TransFirstNameFilter") + "',FIRST_NAME))||'%'" : "") +
                    ((dualRow.getAttribute("TransBirthDateFilter") != null && strDate1 != null) 
                        ? " AND BIRTH_DATE_CHAR = '" + strDate1.toString() + "'" : "") +
//                        ? " AND TO_CHAR((BIRTH_DATE),'yyyy-mm-dd') = TO_CHAR(TO_DATE(" + strDate1 + ",'yyyy-mm-dd'),'yyyy-mm-dd') " : "") +
                    ((dualRow.getAttribute("TransCitizenshipFilter") != null) 
                        ? " AND UPPER(CITIZENSHIP) like '%'||UPPER(NVL('" + dualRow.getAttribute("TransCitizenshipFilter") + "',CITIZENSHIP))||'%'" : "") +
                    ((dualRow.getAttribute("TransBirthPlaceFilter") != null) 
                        ? " AND UPPER(BIRTH_PLACE) like '%'||UPPER(NVL('" + dualRow.getAttribute("TransBirthPlaceFilter") + "',BIRTH_PLACE))||'%'" : "") +
                    ((dualRow.getAttribute("TransDistinguishingMarksFilter") != null) 
                        ? " AND UPPER(DISTINGUISHING_MARKS) like '%'||UPPER(NVL('" + dualRow.getAttribute("TransDistinguishingMarksFilter") + "',DISTINGUISHING_MARKS))||'%'" : "");
//                    " AND UPPER(FIRST_NAME) like '%'||UPPER(NVL('" + dualRow.getAttribute("TransFirstNameFilter") + "',FIRST_NAME))||'%'" +
//                    " AND UPPER(CITIZENSHIP) like '%'||UPPER(NVL('" + dualRow.getAttribute("TransCitizenshipFilter") + "',CITIZENSHIP))||'%'" + 
//                    " AND UPPER(BIRTH_PLACE) like '%'||UPPER(NVL('" + dualRow.getAttribute("TransBirthPlaceFilter") + "',BIRTH_PLACE))||'%'" +
//                    " AND UPPER(DISTINGUISHING_MARKS) like '%'||UPPER(NVL('" + dualRow.getAttribute("TransDistinguishingMarksFilter") + "',DISTINGUISHING_MARKS))||'%'";

                System.out.println("query :: " + query);
                
                ViewObjectImpl searchSeafarerVo = this.getSearchSeafarerView1();
                searchSeafarerVo.setWhereClause("SEAFARER_ID = NVL(" + dualRow.getAttribute("TransSeafarerIdFilter") + ",SEAFARER_ID)" + 
                                                ((dualRow.getAttribute("TransLastNameFilter") != null)
                                                    ? " AND UPPER(LAST_NAME) like '%'||UPPER(NVL('" + dualRow.getAttribute("TransLastNameFilter") + "',LAST_NAME))||'%'" : "") +
                                                ((dualRow.getAttribute("TransFirstNameFilter") != null)
                                                    ? " AND UPPER(FIRST_NAME) like '%'||UPPER(NVL('" + dualRow.getAttribute("TransFirstNameFilter") + "',FIRST_NAME))||'%'" : "") +
                                                ((dualRow.getAttribute("TransBirthDateFilter") != null && strDate1 != null) 
                                                    ? " AND BIRTH_DATE_CHAR = '" + strDate1.toString() + "'" : "") +
//                                                    ? " AND TO_CHAR((BIRTH_DATE),'yyyy-mm-dd') = TO_CHAR(TO_DATE(" + strDate1 + ",'yyyy-mm-dd'),'yyyy-mm-dd') " : "") +
                                                ((dualRow.getAttribute("TransCitizenshipFilter") != null)
                                                    ? " AND UPPER(CITIZENSHIP) like '%'||UPPER(NVL('" + dualRow.getAttribute("TransCitizenshipFilter") + "',CITIZENSHIP))||'%'" : "") +
                                                ((dualRow.getAttribute("TransBirthPlaceFilter") != null)
                                                    ? " AND UPPER(BIRTH_PLACE) like '%'||UPPER(NVL('" + dualRow.getAttribute("TransBirthPlaceFilter") + "',BIRTH_PLACE))||'%'" : "") +
                                                ((dualRow.getAttribute("TransDistinguishingMarksFilter") != null)
                                                    ? " AND UPPER(DISTINGUISHING_MARKS) like '%'||UPPER(NVL('" + dualRow.getAttribute("TransDistinguishingMarksFilter") + "',DISTINGUISHING_MARKS))||'%'" : ""));
//                                                " AND UPPER(FIRST_NAME) like '%'||UPPER(NVL('" + dualRow.getAttribute("TransFirstNameFilter") + "',FIRST_NAME))||'%'" +
//                                                " AND UPPER(CITIZENSHIP) like '%'||UPPER(NVL('" + dualRow.getAttribute("TransCitizenshipFilter") + "',CITIZENSHIP))||'%'" +
//                                                " AND UPPER(BIRTH_PLACE) like '%'||UPPER(NVL('" + dualRow.getAttribute("TransBirthPlaceFilter") + "',BIRTH_PLACE))||'%'" +
//                                                " AND UPPER(DISTINGUISHING_MARKS) like '%'||UPPER(NVL('" + dualRow.getAttribute("TransDistinguishingMarksFilter") + "',DISTINGUISHING_MARKS))||'%'");
                searchSeafarerVo.executeQuery();
//                System.out.println("searchSeafarerVo.getEstimatedRowCount :: "+searchSeafarerVo.getEstimatedRowCount());
            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while Additional Filter Search." +
                                                        " Please contact your System Administrator." , 
                                                      "", FacesMessage.SEVERITY_ERROR);
        }
    }
    
    public void additionalFilterReset()
    {
        try 
        {            
            this.getDualEditSeafarersView1().executeQuery();
            ViewObjectImpl searchSeafarerVo = this.getSearchSeafarerView1();
//                searchSeafarerVo.setWhereClause("SEAFARER_ID = NVL(" + null + ",SEAFARER_ID)" + 
//                                                " AND UPPER(LAST_NAME) like '%'||UPPER(NVL(" + null + ",LAST_NAME))||'%'" );//+
//    //                                                " AND UPPER(FIRST_NAME) like % UPPER(NVL(" + dualRow.getAttribute("TransFirstNameFilter") + ",FIRST_NAME)) %" +
//    //                                                " AND UPPER(CITIZENSHIP) like % UPPER(NVL(" + dualRow.getAttribute("TransCitizenshipFilter") + ",CITIZENSHIP)) %" +
//    //                                                " AND UPPER(BIRTH_PLACE) like % UPPER(NVL(" + dualRow.getAttribute("TransBirthPlaceFilter") + ",BIRTH_PLACE)) %" +
//    //                                                " AND UPPER(DISTINGUISHING_MARKS) like % UPPER(NVL(" + dualRow.getAttribute("TransDistinguishingMarksFilter") + ",DISTINGUISHING_MARKS)) %");
            searchSeafarerVo.setWhereClause(null);
            searchSeafarerVo.executeQuery();
            
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while Additional Filter Reset." +
                                                        " Please contact your System Administrator." , 
                                                      "", FacesMessage.SEVERITY_ERROR);
        }
    }

    /**
     * Method inserts given logs into TMP_SEAFARER_LOGS table.
     * @param logDesc pass log description which you want to print.
     * @return String returns "Y"
     **/
    public void printTmpLogs(Object logDesc)
    {
        try 
        {
            if(logDesc != null)
            {
                System.out.println("logDesc :: "+logDesc);
                Connection con = null;
                CallableStatement st = null;
                PreparedStatement ps = null;
                DBTransaction dbTransaction = null;
                try {
                    dbTransaction = (DBTransaction) this.getTransaction();
                    ps = dbTransaction.createPreparedStatement("select * from dual", 0);
                    ps.execute();
                    con = ps.getConnection();
                    st = con.prepareCall("call RMI_SICD_PUB.tmp_logs(?)");
                    st.setObject(1,logDesc.toString());
                    st.execute();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Container's getter for viewSeafarerVO1.
     * @return viewSeafarerVO1
     */
    public ViewObjectImpl getRmiSeafarerView1() {
        return (ViewObjectImpl)findViewObject("RmiSeafarerView1");
    }

    /**
     * Container's getter for BatchseafarerLK1.
     * @return BatchseafarerLK1
     */
    public ViewLinkImpl getBatchseafarerLK1() {
        return (ViewLinkImpl)findViewLink("BatchseafarerLK1");
    }

    /**
     * Container's getter for viewSeafarerDocsOcVO1.
     * @return viewSeafarerDocsOcVO1
     */
    public ViewObjectImpl getRmiSeafarerDocsOcView1() {
        return (ViewObjectImpl)findViewObject("RmiSeafarerDocsOcView1");
    }

    /**
     * Container's getter for ViewseafarerDocsOcLK1.
     * @return ViewseafarerDocsOcLK1
     */
    public ViewLinkImpl getViewseafarerDocsOcLK1() {
        return (ViewLinkImpl)findViewLink("ViewseafarerDocsOcLK1");
    }

    /**
     * Container's getter for viewSeafarerDocsSqcVO1.
     * @return viewSeafarerDocsSqcVO1
     */
    public ViewObjectImpl getRmiSeafarerDocsSqcView1() {
        return (ViewObjectImpl)findViewObject("RmiSeafarerDocsSqcView1");
    }

    /**
     * Container's getter for viewSeafarerDocsVL1.
     * @return viewSeafarerDocsVL1
     */
    public ViewLinkImpl getviewSeafarerDocsVL1() {
        return (ViewLinkImpl)findViewLink("viewSeafarerDocsVL1");
    }

    /**
     * Container's getter for GetDocumentLinkRO1.
     * @return GetDocumentLinkRO1
     */
    public ViewObjectImpl getGetDocumentLinkView1() {
        return (ViewObjectImpl)findViewObject("GetDocumentLinkView1");
    }

    /**
     * Container's getter for countriesLOV1.
     * @return countriesLOV1
     */
    public ViewObjectImpl getCountriesView1() {
        return (ViewObjectImpl) findViewObject("CountriesView1");
    }

    /**
     * Container's getter for SicdSeafarerVO1.
     * @return SicdSeafarerVO1
     */
    public ViewObjectImpl getSicdSeafarerView1() {
        return (ViewObjectImpl) findViewObject("SicdSeafarerView1");
    }

    /**
     * Container's getter for SicdSeafarerLK1.
     * @return SicdSeafarerLK1
     */
    public ViewLinkImpl getSicdSeafarerLK1() {
        return (ViewLinkImpl) findViewLink("SicdSeafarerLK1");
    }

    /**
     * Container's getter for OfficerCertificatesVO1.
     * @return OfficerCertificatesVO1
     */
    public ViewObjectImpl getOfficerCertificatesView1() {
        return (ViewObjectImpl) findViewObject("OfficerCertificatesView1");
    }

    /**
     * Container's getter for OfficerCertificateLK1.
     * @return OfficerCertificateLK1
     */
    public ViewLinkImpl getOfficerCertificateLK1() {
        return (ViewLinkImpl) findViewLink("OfficerCertificateLK1");
    }

    /**
     * Container's getter for viewGradeOcLOV1.
     * @return viewGradeOcLOV1
     */
    public ViewObjectImpl getGradeOcView1() {
        return (ViewObjectImpl) findViewObject("GradeOcView1");
    }

    /**
     * Container's getter for PreviousOCLOV1.
     * @return PreviousOCLOV1
     */
    public ViewObjectImpl getPreviousSicdOCView1() {
        return (ViewObjectImpl) findViewObject("PreviousSicdOCView1");
    }

    /**
     * Container's getter for OcDetailsCapacitiesVO1.
     * @return OcDetailsCapacitiesVO1
     */
    public ViewObjectImpl getOcDetailsCapacitiesView1() {
        return (ViewObjectImpl) findViewObject("OcDetailsCapacitiesView1");
    }

    /**
     * Container's getter for OcDetailsCapacitiesLK1.
     * @return OcDetailsCapacitiesLK1
     */
    public ViewLinkImpl getOcDetailsCapacitiesLK1() {
        return (ViewLinkImpl) findViewLink("OcDetailsCapacitiesLK1");
    }

    /**
     * Container's getter for OcDetailsFunctionsVO1.
     * @return OcDetailsFunctionsVO1
     */
    public ViewObjectImpl getOcDetailsFunctionsView1() {
        return (ViewObjectImpl) findViewObject("OcDetailsFunctionsView1");
    }

    /**
     * Container's getter for OcDetailsFunctionsLK1.
     * @return OcDetailsFunctionsLK1
     */
    public ViewLinkImpl getOcDetailsFunctionsLK1() {
        return (ViewLinkImpl) findViewLink("OcDetailsFunctionsLK1");
    }

    /**
     * Container's getter for OcDetailsCapacitiesLOV1.
     * @return OcDetailsCapacitiesLOV1
     */
    public ViewObjectImpl getOcDetailsCapacitiesLovView1() {
        return (ViewObjectImpl) findViewObject("OcDetailsCapacitiesLovView1");
    }

    /**
     * Container's getter for OcDetailsFunctionsLOV1.
     * @return OcDetailsFunctionsLOV1
     */
    public ViewObjectImpl getOcDetailsFunctionsLovView1() {
        return (ViewObjectImpl) findViewObject("OcDetailsFunctionsLovView1");
    }

    /**
     * Container's getter for OcDetailsLimitationsLOV1.
     * @return OcDetailsLimitationsLOV1
     */
    public ViewObjectImpl getOcDetailsLimitationsLovView1() {
        return (ViewObjectImpl) findViewObject("OcDetailsLimitationsLovView1");
    }

    /**
     * Container's getter for PreviousBooksLOV1.
     * @return PreviousBooksLOV1
     */
    public ViewObjectImpl getPreviousSicdBooksView1() {
        return (ViewObjectImpl) findViewObject("PreviousSicdBooksView1");
    }

    /**
     * Container's getter for BooksVO1.
     * @return BooksVO1
     */
    public ViewObjectImpl getBooksView1() {
        return (ViewObjectImpl) findViewObject("BooksView1");
    }

    /**
     * Container's getter for BooksLK1.
     * @return BooksLK1
     */
    public ViewLinkImpl getBooksLK1() {
        return (ViewLinkImpl) findViewLink("BooksLK1");
    }


    /**
     * Container's getter for PreviousSQCLOV1.
     * @return PreviousSQCLOV1
     */
    public ViewObjectImpl getPreviousSicdSQCView1() {
        return (ViewObjectImpl) findViewObject("PreviousSicdSQCView1");
    }


    /**
     * Container's getter for SpecialQualificationsVO1.
     * @return SpecialQualificationsVO1
     */
    public ViewObjectImpl getSpecialQualificationsView1() {
        return (ViewObjectImpl) findViewObject("SpecialQualificationsView1");
    }

    /**
     * Container's getter for SpecialQualificationsLK1.
     * @return SpecialQualificationsLK1
     */
    public ViewLinkImpl getSpecialQualificationsLK1() {
        return (ViewLinkImpl) findViewLink("SpecialQualificationsLK1");
    }

    /**
     * Container's getter for SqcDetailsCapacitiesVO1.
     * @return SqcDetailsCapacitiesVO1
     */
    public ViewObjectImpl getSqcDetailsCapacitiesView1() {
        return (ViewObjectImpl) findViewObject("SqcDetailsCapacitiesView1");
    }

    /**
     * Container's getter for SqcDetailsCapacitiesLK1.
     * @return SqcDetailsCapacitiesLK1
     */
    public ViewLinkImpl getSqcDetailsCapacitiesLK1() {
        return (ViewLinkImpl) findViewLink("SqcDetailsCapacitiesLK1");
    }

    /**
     * Container's getter for SqcDetailsFunctionsVO1.
     * @return SqcDetailsFunctionsVO1
     */
    public ViewObjectImpl getSqcDetailsFunctionsView1() {
        return (ViewObjectImpl) findViewObject("SqcDetailsFunctionsView1");
    }

    /**
     * Container's getter for SqcDetailsFunctionsLK1.
     * @return SqcDetailsFunctionsLK1
     */
    public ViewLinkImpl getSqcDetailsFunctionsLK1() {
        return (ViewLinkImpl) findViewLink("SqcDetailsFunctionsLK1");
    }

    /**
     * Container's getter for ViewOrderNoRO1.
     * @return ViewOrderNoRO1
     */
    public ViewObjectImpl getOrderNumberView1() {
        return (ViewObjectImpl) findViewObject("OrderNumberView1");
    }

    /**
     * Container's getter for DualRO1.
     * @return DualRO1
     */
    public ViewObjectImpl getDualView1() {
        return (ViewObjectImpl) findViewObject("DualView1");
    }

    /**
     * Container's getter for ViewOcVerificationOrdersRO1.
     * @return ViewOcVerificationOrdersRO1
     */
    public ViewObjectImpl getOcVerificationOrdersView1() {
        return (ViewObjectImpl) findViewObject("OcVerificationOrdersView1");
    }

    /**
     * Container's getter for ViewProcessingCenterRO1.
     * @return ViewProcessingCenterRO1
     */
    public ViewObjectImpl getProcessingCenterView1() {
        return (ViewObjectImpl) findViewObject("ProcessingCenterView1");
    }

    /**
     * Container's getter for SqcDetailsCapacitiesLOV1.
     * @return SqcDetailsCapacitiesLOV1
     */
    public ViewObjectImpl getSqcDetailsCapacitiesLovView1() {
        return (ViewObjectImpl) findViewObject("SqcDetailsCapacitiesLovView1");
    }

    /**
     * Container's getter for SqcDetailsFunctionsLOV1.
     * @return SqcDetailsFunctionsLOV1
     */
    public ViewObjectImpl getSqcDetailsFunctionsLovView1() {
        return (ViewObjectImpl) findViewObject("SqcDetailsFunctionsLovView1");
    }

    /**
     * Container's getter for viewGradeSqcLOV1.
     * @return viewGradeSqcLOV1
     */
    public ViewObjectImpl getGradeSqcView1() {
        return (ViewObjectImpl) findViewObject("GradeSqcView1");
    }

    /**
     * Container's getter for SicdDocumentsVO1.
     * @return SicdDocumentsVO1
     */
    public ViewObjectImpl getSicdDocumentsView1() {
        return (ViewObjectImpl) findViewObject("SicdDocumentsView1");
    }

    /**
     * Container's getter for ViewOcWaitingResponseRO1.
     * @return ViewOcWaitingResponseRO1
     */
    public ViewObjectImpl getOcWaitingResponseView1() {
        return (ViewObjectImpl) findViewObject("OcWaitingResponseView1");
    }

    /**
     * Container's getter for getViewBatchDetailsRO1.
     * @return getViewBatchDetailsRO1
     */
    public ViewObjectImpl getBatchDetailsView1() {
        return (ViewObjectImpl)findViewObject("BatchDetailsView1");
    }

    /**
     * Container's getter for ViewUserDetailsRO1.
     * @return ViewUserDetailsRO1
     */
    public ViewObjectImpl getUserDetailsView1() {
        return (ViewObjectImpl)findViewObject("UserDetailsView1");
    }

    /**
     * Container's getter for SicdSeafarerRO1.
     * @return SicdSeafarerRO1
     */
    public ViewObjectImpl getSicdSeafarersQueryView1() {
        return (ViewObjectImpl) findViewObject("SicdSeafarersQueryView1");
    }

    /**
     * Container's getter for SearchSeafarerRO1.
     * @return SearchSeafarerRO1
     */
    public ViewObjectImpl getSearchSeafarerView1() {
        return (ViewObjectImpl) findViewObject("SearchSeafarerView1");
    }

    /**
     * Container's getter for VsslInspCommRO1.
     * @return VsslInspCommRO1
     */
    public ViewObjectImpl getVsslInspCommView1() {
        return (ViewObjectImpl) findViewObject("VsslInspCommView1");
    }

    /**
     * Container's getter for AddressLOV1.
     * @return AddressLOV1
     */
    public ViewObjectImpl getAddressView1() {
        return (ViewObjectImpl) findViewObject("AddressView1");
    }

    /**
     * Container's getter for AllCustomersLOV1.
     * @return AllCustomersLOV1
     */
    public ViewObjectImpl getAllCustomersView1() {
        return (ViewObjectImpl) findViewObject("AllCustomersView1");
    }

    /**
     * Container's getter for ItemDescriptionLOV1.
     * @return ItemDescriptionLOV1
     */
    public ViewObjectImpl getItemDescriptionView1() {
        return (ViewObjectImpl) findViewObject("ItemDescriptionView1");
    }

    /**
     * Container's getter for DualEnterOrdersRO1.
     * @return DualEnterOrdersRO1
     */
    public ViewObjectImpl getDualEnterOrdersView1() {
        return (ViewObjectImpl) findViewObject("DualEnterOrdersView1");
    }

    /**
     * Container's getter for EnterOrderHeaderRO1.
     * @return EnterOrderHeaderRO1
     */
    public ViewObjectImpl getOrderHeaderView1() {
        return (ViewObjectImpl) findViewObject("OrderHeaderView1");
    }

    /**
     * Container's getter for EnterOrderLinesRO1.
     * @return EnterOrderLinesRO1
     */
    public ViewObjectImpl getOrderLinesView1() {
        return (ViewObjectImpl) findViewObject("OrderLinesView1");
    }

    /**
     * Container's getter for EnterOrderLinesLK1.
     * @return EnterOrderLinesLK1
     */
    public ViewLinkImpl getEnterOrderLinesLK1() {
        return (ViewLinkImpl) findViewLink("EnterOrderLinesLK1");
    }

    /**
     * Container's getter for EnterOrdersHoldRO1.
     * @return EnterOrdersHoldRO1
     */
    public ViewObjectImpl getOrderHoldView1() {
        return (ViewObjectImpl) findViewObject("OrderHoldView1");
}

    /**
     * Container's getter for ViewMyTasksRO1.
     * @return ViewMyTasksRO1
     */
    public ViewObjectImpl getMyTasksView1() {
        return (ViewObjectImpl)findViewObject("MyTasksView1");
    }


    /**
     * Container's getter for DualEditSeafarersRO1.
     * @return DualEditSeafarersRO1
     */
    public ViewObjectImpl getDualEditSeafarersView1() {
        return (ViewObjectImpl)findViewObject("DualEditSeafarersView1");
    }

    /**
     * Container's getter for EditSeafarersVO1.
     * @return EditSeafarersVO1
     */
    public ViewObjectImpl getEditSeafarersView1() {
        return (ViewObjectImpl)findViewObject("EditSeafarersView1");
    }


    /**
     * Container's getter for AllCustomersLOV2.
     * @return AllCustomersLOV2
     */
    public ViewObjectImpl getAllCustomersView2() {
        return (ViewObjectImpl) findViewObject("AllCustomersView2");
    }

    /**
     * Container's getter for SeafarerTCstatus1.
     * @return SeafarerTCstatus1
     */
    public ViewObjectImpl getSeafarerTCstatusView1() {
        return (ViewObjectImpl)findViewObject("SeafarerTCstatusView1");
    }


    /**
     * Container's getter for OrderStatusRO1.
     * @return OrderStatusRO1
     */
    public ViewObjectImpl getOrderStatusView1() {
        return (ViewObjectImpl) findViewObject("OrderStatusView1");
    }

    /**
     * Container's getter for ItemDescriptionLOV2.
     * @return ItemDescriptionLOV2
     */
    public ViewObjectImpl getItemDescriptionView2() {
        return (ViewObjectImpl) findViewObject("ItemDescriptionView2");
    }

    /**
     * Container's getter for BatchOrderDetailsRO1.
     * @return BatchOrderDetailsRO1
     */
    public ViewObjectImpl getBatchOrderDetailsView1() {
        return (ViewObjectImpl) findViewObject("BatchOrderDetailsView1");
    }

    /**
     * Container's getter for DefaultOcVerificationDocsRO1.
     * @return DefaultOcVerificationDocsRO1
     */
    public ViewObjectImpl getDefaultOcVerificationDocsView1() {
        return (ViewObjectImpl) findViewObject("DefaultOcVerificationDocsView1");
    }

    /**
     * Container's getter for DualSeafarerDataVerifyRO1.
     * @return DualSeafarerDataVerifyRO1
     */
    public ViewObjectImpl getDualSeafarerDataVerifyView1() {
        return (ViewObjectImpl) findViewObject("DualSeafarerDataVerifyView1");
    }

    /**
     * Container's getter for ViewSeafarerDataVerificationOrdersRO1.
     * @return ViewSeafarerDataVerificationOrdersRO1
     */
    public ViewObjectImpl getSeafarerDataVerificationOrdersView1() {
        return (ViewObjectImpl) findViewObject("SeafarerDataVerificationOrdersView1");
    }

    /**
     * Container's getter for ViewSeafarerDocsBooksVO1.
     * @return ViewSeafarerDocsBooksVO1
     */
    public ViewObjectImpl getRmiSeafarerDocsBooksView1() {
        return (ViewObjectImpl) findViewObject("RmiSeafarerDocsBooksView1");
    }

    /**
     * Container's getter for ViewSeafarerDocsBooksVL1.
     * @return ViewSeafarerDocsBooksVL1
     */
    public ViewLinkImpl getViewSeafarerDocsBooksVL1() {
        return (ViewLinkImpl) findViewLink("ViewSeafarerDocsBooksVL1");
    }

    /**
     * Container's getter for viewBatchVO1.
     * @return viewBatchVO1
     */
    public RmiBatchViewImpl getRmiBatchView1() {
        return (RmiBatchViewImpl) findViewObject("RmiBatchView1");
    }

    /**
     * Container's getter for SicdSeafarerRO2.
     * @return SicdSeafarerRO2
     */
    public ViewObjectImpl getSicdSeafarersQueryView2() {
        return (ViewObjectImpl) findViewObject("SicdSeafarersQueryView2");
    }

    /**
     * Container's getter for ExtendDateRO1.
     * @return ExtendDateRO1
     */
    public ViewObjectImpl getExtendDateView1() {
        return (ViewObjectImpl) findViewObject("ExtendDateView1");
    }

    /**
     * Container's getter for viewSeafarerVO2.
     * @return viewSeafarerVO2
     */
    public ViewObjectImpl getRmiSeafarerView2() {
        return (ViewObjectImpl) findViewObject("RmiSeafarerView2");
    }

    /**
     * Container's getter for BatchseafarerLK2.
     * @return BatchseafarerLK2
     */
    public ViewLinkImpl getBatchseafarerLK2() {
        return (ViewLinkImpl) findViewLink("BatchseafarerLK2");
    }

    /**
     * Container's getter for custAccountDeliverToLOV1.
     * @return custAccountDeliverToLOV1
     */
    public CustAccountDeliverToViewImpl getCustAccountDeliverToView1() {
        return (CustAccountDeliverToViewImpl) findViewObject("CustAccountDeliverToView1");
    }

    /**
     * Container's getter for ExsicdSeafarerDocsIfaceRO1.
     * @return ExsicdSeafarerDocsIfaceRO1
     */
    public ViewObjectImpl getSeafarerDocsIfaceView1() {
        return (ViewObjectImpl) findViewObject("SeafarerDocsIfaceView1");
    }

    /**
     * Container's getter for ProcessBookHeaderRO1.
     * @return ProcessBookHeaderRO1
     */
    public ViewObjectImpl getProcessBookHeaderView1() {
        return (ViewObjectImpl) findViewObject("ProcessBookHeaderView1");
    }

    /**
     * Container's getter for ProcessBookDetailsRO1.
     * @return ProcessBookDetailsRO1
     */
    public ViewObjectImpl getProcessBookDetailsView1() {
        return (ViewObjectImpl) findViewObject("ProcessBookDetailsView1");
    }

    /**
     * Container's getter for DualProcessBookRO1.
     * @return DualProcessBookRO1
     */
    public ViewObjectImpl getDualProcessBookView1() {
        return (ViewObjectImpl) findViewObject("DualProcessBookView1");
    }

    /**
     * Container's getter for GetDocumentLinkRO2.
     * @return GetDocumentLinkRO2
     */
    public ViewObjectImpl getGetDocumentLinkView2() {
        return (ViewObjectImpl) findViewObject("GetDocumentLinkView2");
    }

    /**
     * Container's getter for PreviousExsicdOcLOV1.
     * @return PreviousExsicdOcLOV1
     */
    public ViewObjectImpl getPreviousOcView1() {
        return (ViewObjectImpl) findViewObject("PreviousOcView1");
    }

    /**
     * Container's getter for PreviousExsicdSqcLOV1.
     * @return PreviousExsicdSqcLOV1
     */
    public ViewObjectImpl getPreviousSqcView1() {
        return (ViewObjectImpl) findViewObject("PreviousSqcView1");
    }

    /**
     * Container's getter for PreviousExsicdBookLOV1.
     * @return PreviousExsicdBookLOV1
     */
    public ViewObjectImpl getPreviousBookView1() {
        return (ViewObjectImpl) findViewObject("PreviousBookView1");
    }

    /**
     * Container's getter for AllPreviousDocsRO1.
     * @return AllPreviousDocsRO1
     */
    public ViewObjectImpl getAllPreviousDocsView1() {
        return (ViewObjectImpl) findViewObject("AllPreviousDocsView1");
    }

    /**
     * Container's getter for viewRestrictionLOV1.
     * @return viewRestrictionLOV1
     */
    public ViewObjectImpl getRestrictionsView1() {
        return (ViewObjectImpl) findViewObject("RestrictionsView1");
    }

    /**
     * Container's getter for SicdOrderErrorsRO1.
     * @return SicdOrderErrorsRO1
     */
    public ViewObjectImpl getSicdOrderErrorsView1() {
        return (ViewObjectImpl) findViewObject("SicdOrderErrorsView1");
    }

    /**
     * Container's getter for OrderHoldRO1.
     * @return OrderHoldRO1
     */
    public ViewObjectImpl getOrderHoldFlagView1() {
        return (ViewObjectImpl) findViewObject("OrderHoldFlagView1");
    }

    /**
     * Container's getter for RmiWorkflowView1.
     * @return RmiWorkflowView1
     */
    public ViewObjectImpl getRmiWorkflowView1() {
        return (ViewObjectImpl) findViewObject("RmiWorkflowView1");
    }

    /**
     * Container's getter for RmiBatchDocumentsHistoryView1.
     * @return RmiBatchDocumentsHistoryView1
     */
    public ViewObjectImpl getRmiBatchDocumentsHistoryView1() {
        return (ViewObjectImpl) findViewObject("RmiBatchDocumentsHistoryView1");
    }

    /**
     * Container's getter for CraCountView1.
     * @return CraCountView1
     */
    public ViewObjectImpl getCraCountView1() {
        return (ViewObjectImpl) findViewObject("CraCountView1");
    }

    /**
     * Container's getter for MultipleHoldReasonsView1.
     * @return MultipleHoldReasonsView1
     */
    public ViewObjectImpl getMultipleHoldReasonsView1() {
        return (ViewObjectImpl) findViewObject("MultipleHoldReasonsView1");
    }

    /**
     * Container's getter for VesselValuesView1.
     * @return VesselValuesView1
     */
    public ViewObjectImpl getVesselValuesView() {
        return (ViewObjectImpl) findViewObject("VesselValuesView");
    }

    /**
     * Container's getter for OrderHeaderHoldsView1.
     * @return OrderHeaderHoldsView1
     */
    public ViewObjectImpl getOrderHeaderHoldsView1() {
        return (ViewObjectImpl) findViewObject("OrderHeaderHoldsView1");
    }

    /**
     * Container's getter for FindOrdersView1.
     * @return FindOrdersView1
     */
    public ViewObjectImpl getFindOrdersView1() {
        return (ViewObjectImpl) findViewObject("FindOrdersView1");
    }

    /**
     * Container's getter for ApplyHoldDualView1.
     * @return ApplyHoldDualView1
     */
    public ViewObjectImpl getApplyHoldDualView() {
        return (ViewObjectImpl) findViewObject("ApplyHoldDualView");
    }

    /**
     * Container's getter for GetHoldIdView1.
     * @return GetHoldIdView1
     */
    public ViewObjectImpl getGetHoldIdView() {
        return (ViewObjectImpl) findViewObject("GetHoldIdView");
    }

    /**
     * Container's getter for OrderHoldDetailsView1.
     * @return OrderHoldDetailsView1
     */
    public ViewObjectImpl getOrderHoldDetailsView1() {
        return (ViewObjectImpl) findViewObject("OrderHoldDetailsView1");
    }

    /**
     * Container's getter for OrderLinesHoldFlagView1.
     * @return OrderLinesHoldFlagView1
     */
    public ViewObjectImpl getOrderLinesHoldFlagView1() {
        return (ViewObjectImpl) findViewObject("OrderLinesHoldFlagView1");
    }

    /**
     * Container's getter for AllGradesView1.
     * @return AllGradesView1
     */
    public ViewObjectImpl getAllGradesView1() {
        return (ViewObjectImpl) findViewObject("AllGradesView1");
    }

    /**
     * Container's getter for SeafarerShortTextView1.
     * @return SeafarerShortTextView1
     */
    public ViewObjectImpl getSeafarerShortTextView1() {
        return (ViewObjectImpl) findViewObject("SeafarerShortTextView1");
    }

    /**
     * Container's getter for ConcRequestStatusView1.
     * @return ConcRequestStatusView1
     */
    public ViewObjectImpl getConcRequestStatusView1() {
        return (ViewObjectImpl) findViewObject("ConcRequestStatusView1");
    }

    /**
     * Container's getter for PreviousIdCardView1.
     * @return PreviousIdCardView1
     */
    public ViewObjectImpl getPreviousIdCardView1() {
        return (ViewObjectImpl) findViewObject("PreviousIdCardView1");
    }
}
