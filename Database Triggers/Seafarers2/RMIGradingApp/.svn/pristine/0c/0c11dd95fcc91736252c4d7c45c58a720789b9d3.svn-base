package com.rmi.tradecompapproval.adfbc.views;

import com.rmi.tradecompapproval.adfbc.services.RMITradeCompApprovalAppModuleImpl;
import com.rmi.tradecompapproval.adfbc.entities.RmiSeafarersImpl;

import com.rmi.tradecompapproval.adfbc.utils.AdfUtils;

import java.math.BigDecimal;

import java.sql.Timestamp;

import javax.faces.application.FacesMessage;

import oracle.adf.share.ADFContext;
import oracle.adf.view.rich.context.AdfFacesContext;

import oracle.binding.OperationBinding;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.ViewObject;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 19 16:30:51 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RmiSeafarerViewRowImpl extends ViewRowImpl {


    public static final int ENTITY_VIEWSEAFAREREO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        AffidavitApvdBy,
        AffidavitApvdDate,
        AffidavitEdocId,
        AffidavitGrdComnt,
        AffidavitGrdStatus,
        ApplicationApvdBy,
        ApplicationApvdDate,
        ApplicationEdocId,
        ApplicationGrdComnt,
        ApplicationGrdStatus,
        BirthDate,
        BirthPlace,
        BookApprovedBy,
        BookApprovedDate,
        BookGrdComnt,
        BookGrdStatus,
        ConApvdBy,
        ConApvdDate,
        ConGrdComnt,
        ConGrdStatus,
        ConsentEdocId,
        CreatedBy,
        CreationDate,
        DistinguishingMarks,
        EsiBatchId,
        EsiId,
        FirstName,
        Gender,
        IdCardApprovedBy,
        IdCardApprovedDate,
        IdCardGrdCmnt,
        IdCardGrdStatus,
        IdentityDocApprovedBy,
        IdentityDocApprovedDate,
        IdentityDocEdocId,
        IdentityDocGrdComnt,
        IdentityDocGrdStatus,
        IssueType3,
        IssueTypeIdCard,
        LastName,
        LastUpdateDate,
        LastUpdateLogin,
        LastUpdatedBy,
        MiddleInitial,
        Nationality,
        Notes,
        PassportIssuingCountryCode,
        PermanentAddress,
        PhotoApprovedBy,
        PhotoApprovedDate,
        PhotoEdocId,
        PhotoGrdComnt,
        PhotoGrdStatus,
        PhysicalApprovedBy,
        PhysicalApprovedDate,
        PhysicalEdocId,
        PhysicalGrdComnt,
        PhysicalGrdStatus,
        PreviousBookDocumentId,
        PreviousIdCardDocumentId,
        ResidenceCountryCode,
        SatApvdBy,
        SatApvdDate,
        SatEdocId,
        SatGrdComnt,
        SatGrdStatus,
        SeafarerApprovedBy,
        SeafarerApprovedDate,
        SeafarerGrdComnt,
        SeafarerGrdStatus,
        SeafarerId,
        SeaserviceGrdComnt,
        SeaserviceGrdStatus,
        SeaserviceTranscriptApvdBy,
        SeaserviceTranscriptApvdDt,
        SeaserviceTranscriptEdocId,
        Status,
        VesselPk,
        WcCityListId,
        transNationality,
        tranPassportCntry,
        tranResidenceCntry,
        tranVesselNo,
        tranVesselName,
        InternalEdocId,
        tranCity,
        DataVerified3,
        TransVesselRegDate,
        TransVesselType,
        TransVesselGrossTons,
        TransVesselPropPower,
        TransVesselStatus,
        TransVesselEngineType,
        TransPreviousBook,
        TransVesselOfficialNumber,
        DataVerifiedInfo,
        TransIsPhotoHistoryAvailable,
        TransIsDocsHistoryAvailable,
        TransSeafarerStatus,
        SeafarerWfStatus,
        AdditionalDocEdocId,
        PhotoGrdHoldReason,
        AffidavitGrdHoldReason,
        ApplicationGrdHoldReason,
        BookGrdHoldReason,
        ConGrdHoldReason,
        IdCardGrdHoldReason,
        SeafarerGrdHoldReason,
        SatGrdHoldReason,
        IdentityDocGrdHoldReason,
        PhysicalGrdHoldReason,
        SeaserviceGrdHoldReason,
        ApplicationVerified,
        AffidavitVerified,
        BookVerified,
        ConVerified,
        IdCardVerified,
        IdentityDocVerified,
        PhotoVerified,
        PhysicalVerified,
        SatVerified,
        SeafarerVerified,
        SeaserviceVerified,
        ConVerifiedComnt,
        BookVerifiedComnt,
        IdCardVerifiedComnt,
        ApplicationVerifiedComnt,
        AffidavitVerifiedComnt,
        IdentityDocVerifiedComnt,
        PhotoVerifiedComnt,
        PhysicalVerifiedComnt,
        SatVerifiedComnt,
        SeaserviceVerifiedComnt,
        DataVerifiedInfoComnt,
        CraApprovalFlag,
        BookReplacementIssueType,
        TransCraDoc,
        TransBatchStatus,
        TransOcCorrected,
        TransSqcCorrected,
        TransApproveAll,
        TransVesselPropulsionCode,
        TransCompCode,
        BookIssueTypeUpd,
        BookIssueTypeUpdDt,
        IdcardIssueTypeUpd,
        IdcardIssueTypeUpdDt,
        TransTcStatus,
        TransTcStatusDate,
        TransUpdateSeafarerId,
        TransConcRequestId,
        TransColorCode,
        AckConcReqId,
        TransAckColorCode,
        ReplacementIssueType,
        TransPreviousIdCard,
        SeafarerVldtFlag,
        TransUploadedDocsCorrected,
        viewSeafarerDocsOcVO,
        viewSeafarerDocsSqcVO,
        SicdSeafarerVO,
        ViewSeafarerDocsBooksVO,
        countriesLOV1,
        ViewVesselRO1,
        GetCityNameByCityIdRO1,
        YesNoLOV1,
        IssueTypeLOV1,
        PreviousExsicdBookLOV1,
        HoldReasonView1,
        CitiesView1,
        LovReplacementUomView1,
        PreviousIdCardView1;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return RmiSeafarerViewRowImpl.AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return RmiSeafarerViewRowImpl.AttributesEnum.firstIndex() +
                   RmiSeafarerViewRowImpl.AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = RmiSeafarerViewRowImpl.AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int AFFIDAVITAPVDBY = AttributesEnum.AffidavitApvdBy.index();
    public static final int AFFIDAVITAPVDDATE = AttributesEnum.AffidavitApvdDate.index();
    public static final int AFFIDAVITEDOCID = AttributesEnum.AffidavitEdocId.index();
    public static final int AFFIDAVITGRDCOMNT = AttributesEnum.AffidavitGrdComnt.index();
    public static final int AFFIDAVITGRDSTATUS = AttributesEnum.AffidavitGrdStatus.index();
    public static final int APPLICATIONAPVDBY = AttributesEnum.ApplicationApvdBy.index();
    public static final int APPLICATIONAPVDDATE = AttributesEnum.ApplicationApvdDate.index();
    public static final int APPLICATIONEDOCID = AttributesEnum.ApplicationEdocId.index();
    public static final int APPLICATIONGRDCOMNT = AttributesEnum.ApplicationGrdComnt.index();
    public static final int APPLICATIONGRDSTATUS = AttributesEnum.ApplicationGrdStatus.index();
    public static final int BIRTHDATE = AttributesEnum.BirthDate.index();
    public static final int BIRTHPLACE = AttributesEnum.BirthPlace.index();
    public static final int BOOKAPPROVEDBY = AttributesEnum.BookApprovedBy.index();
    public static final int BOOKAPPROVEDDATE = AttributesEnum.BookApprovedDate.index();
    public static final int BOOKGRDCOMNT = AttributesEnum.BookGrdComnt.index();
    public static final int BOOKGRDSTATUS = AttributesEnum.BookGrdStatus.index();
    public static final int CONAPVDBY = AttributesEnum.ConApvdBy.index();
    public static final int CONAPVDDATE = AttributesEnum.ConApvdDate.index();
    public static final int CONGRDCOMNT = AttributesEnum.ConGrdComnt.index();
    public static final int CONGRDSTATUS = AttributesEnum.ConGrdStatus.index();
    public static final int CONSENTEDOCID = AttributesEnum.ConsentEdocId.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int DISTINGUISHINGMARKS = AttributesEnum.DistinguishingMarks.index();
    public static final int ESIBATCHID = AttributesEnum.EsiBatchId.index();
    public static final int ESIID = AttributesEnum.EsiId.index();
    public static final int FIRSTNAME = AttributesEnum.FirstName.index();
    public static final int GENDER = AttributesEnum.Gender.index();
    public static final int IDCARDAPPROVEDBY = AttributesEnum.IdCardApprovedBy.index();
    public static final int IDCARDAPPROVEDDATE = AttributesEnum.IdCardApprovedDate.index();
    public static final int IDCARDGRDCMNT = AttributesEnum.IdCardGrdCmnt.index();
    public static final int IDCARDGRDSTATUS = AttributesEnum.IdCardGrdStatus.index();
    public static final int IDENTITYDOCAPPROVEDBY = AttributesEnum.IdentityDocApprovedBy.index();
    public static final int IDENTITYDOCAPPROVEDDATE = AttributesEnum.IdentityDocApprovedDate.index();
    public static final int IDENTITYDOCEDOCID = AttributesEnum.IdentityDocEdocId.index();
    public static final int IDENTITYDOCGRDCOMNT = AttributesEnum.IdentityDocGrdComnt.index();
    public static final int IDENTITYDOCGRDSTATUS = AttributesEnum.IdentityDocGrdStatus.index();
    public static final int ISSUETYPE3 = AttributesEnum.IssueType3.index();
    public static final int ISSUETYPEIDCARD = AttributesEnum.IssueTypeIdCard.index();
    public static final int LASTNAME = AttributesEnum.LastName.index();
    public static final int LASTUPDATEDATE = AttributesEnum.LastUpdateDate.index();
    public static final int LASTUPDATELOGIN = AttributesEnum.LastUpdateLogin.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int MIDDLEINITIAL = AttributesEnum.MiddleInitial.index();
    public static final int NATIONALITY = AttributesEnum.Nationality.index();
    public static final int NOTES = AttributesEnum.Notes.index();
    public static final int PASSPORTISSUINGCOUNTRYCODE = AttributesEnum.PassportIssuingCountryCode.index();
    public static final int PERMANENTADDRESS = AttributesEnum.PermanentAddress.index();
    public static final int PHOTOAPPROVEDBY = AttributesEnum.PhotoApprovedBy.index();
    public static final int PHOTOAPPROVEDDATE = AttributesEnum.PhotoApprovedDate.index();
    public static final int PHOTOEDOCID = AttributesEnum.PhotoEdocId.index();
    public static final int PHOTOGRDCOMNT = AttributesEnum.PhotoGrdComnt.index();
    public static final int PHOTOGRDSTATUS = AttributesEnum.PhotoGrdStatus.index();
    public static final int PHYSICALAPPROVEDBY = AttributesEnum.PhysicalApprovedBy.index();
    public static final int PHYSICALAPPROVEDDATE = AttributesEnum.PhysicalApprovedDate.index();
    public static final int PHYSICALEDOCID = AttributesEnum.PhysicalEdocId.index();
    public static final int PHYSICALGRDCOMNT = AttributesEnum.PhysicalGrdComnt.index();
    public static final int PHYSICALGRDSTATUS = AttributesEnum.PhysicalGrdStatus.index();
    public static final int PREVIOUSBOOKDOCUMENTID = AttributesEnum.PreviousBookDocumentId.index();
    public static final int PREVIOUSIDCARDDOCUMENTID = AttributesEnum.PreviousIdCardDocumentId.index();
    public static final int RESIDENCECOUNTRYCODE = AttributesEnum.ResidenceCountryCode.index();
    public static final int SATAPVDBY = AttributesEnum.SatApvdBy.index();
    public static final int SATAPVDDATE = AttributesEnum.SatApvdDate.index();
    public static final int SATEDOCID = AttributesEnum.SatEdocId.index();
    public static final int SATGRDCOMNT = AttributesEnum.SatGrdComnt.index();
    public static final int SATGRDSTATUS = AttributesEnum.SatGrdStatus.index();
    public static final int SEAFARERAPPROVEDBY = AttributesEnum.SeafarerApprovedBy.index();
    public static final int SEAFARERAPPROVEDDATE = AttributesEnum.SeafarerApprovedDate.index();
    public static final int SEAFARERGRDCOMNT = AttributesEnum.SeafarerGrdComnt.index();
    public static final int SEAFARERGRDSTATUS = AttributesEnum.SeafarerGrdStatus.index();
    public static final int SEAFARERID = AttributesEnum.SeafarerId.index();
    public static final int SEASERVICEGRDCOMNT = AttributesEnum.SeaserviceGrdComnt.index();
    public static final int SEASERVICEGRDSTATUS = AttributesEnum.SeaserviceGrdStatus.index();
    public static final int SEASERVICETRANSCRIPTAPVDBY = AttributesEnum.SeaserviceTranscriptApvdBy.index();
    public static final int SEASERVICETRANSCRIPTAPVDDT = AttributesEnum.SeaserviceTranscriptApvdDt.index();
    public static final int SEASERVICETRANSCRIPTEDOCID = AttributesEnum.SeaserviceTranscriptEdocId.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int VESSELPK = AttributesEnum.VesselPk.index();
    public static final int WCCITYLISTID = AttributesEnum.WcCityListId.index();
    public static final int TRANSNATIONALITY = AttributesEnum.transNationality.index();
    public static final int TRANPASSPORTCNTRY = AttributesEnum.tranPassportCntry.index();
    public static final int TRANRESIDENCECNTRY = AttributesEnum.tranResidenceCntry.index();
    public static final int TRANVESSELNO = AttributesEnum.tranVesselNo.index();
    public static final int TRANVESSELNAME = AttributesEnum.tranVesselName.index();
    public static final int INTERNALEDOCID = AttributesEnum.InternalEdocId.index();
    public static final int TRANCITY = AttributesEnum.tranCity.index();
    public static final int DATAVERIFIED3 = AttributesEnum.DataVerified3.index();
    public static final int TRANSVESSELREGDATE = AttributesEnum.TransVesselRegDate.index();
    public static final int TRANSVESSELTYPE = AttributesEnum.TransVesselType.index();
    public static final int TRANSVESSELGROSSTONS = AttributesEnum.TransVesselGrossTons.index();
    public static final int TRANSVESSELPROPPOWER = AttributesEnum.TransVesselPropPower.index();
    public static final int TRANSVESSELSTATUS = AttributesEnum.TransVesselStatus.index();
    public static final int TRANSVESSELENGINETYPE = AttributesEnum.TransVesselEngineType.index();
    public static final int TRANSPREVIOUSBOOK = AttributesEnum.TransPreviousBook.index();
    public static final int TRANSVESSELOFFICIALNUMBER = AttributesEnum.TransVesselOfficialNumber.index();
    public static final int DATAVERIFIEDINFO = AttributesEnum.DataVerifiedInfo.index();
    public static final int TRANSISPHOTOHISTORYAVAILABLE = AttributesEnum.TransIsPhotoHistoryAvailable.index();
    public static final int TRANSISDOCSHISTORYAVAILABLE = AttributesEnum.TransIsDocsHistoryAvailable.index();
    public static final int TRANSSEAFARERSTATUS = AttributesEnum.TransSeafarerStatus.index();
    public static final int SEAFARERWFSTATUS = AttributesEnum.SeafarerWfStatus.index();
    public static final int ADDITIONALDOCEDOCID = AttributesEnum.AdditionalDocEdocId.index();
    public static final int PHOTOGRDHOLDREASON = AttributesEnum.PhotoGrdHoldReason.index();
    public static final int AFFIDAVITGRDHOLDREASON = AttributesEnum.AffidavitGrdHoldReason.index();
    public static final int APPLICATIONGRDHOLDREASON = AttributesEnum.ApplicationGrdHoldReason.index();
    public static final int BOOKGRDHOLDREASON = AttributesEnum.BookGrdHoldReason.index();
    public static final int CONGRDHOLDREASON = AttributesEnum.ConGrdHoldReason.index();
    public static final int IDCARDGRDHOLDREASON = AttributesEnum.IdCardGrdHoldReason.index();
    public static final int SEAFARERGRDHOLDREASON = AttributesEnum.SeafarerGrdHoldReason.index();
    public static final int SATGRDHOLDREASON = AttributesEnum.SatGrdHoldReason.index();
    public static final int IDENTITYDOCGRDHOLDREASON = AttributesEnum.IdentityDocGrdHoldReason.index();
    public static final int PHYSICALGRDHOLDREASON = AttributesEnum.PhysicalGrdHoldReason.index();
    public static final int SEASERVICEGRDHOLDREASON = AttributesEnum.SeaserviceGrdHoldReason.index();
    public static final int APPLICATIONVERIFIED = AttributesEnum.ApplicationVerified.index();
    public static final int AFFIDAVITVERIFIED = AttributesEnum.AffidavitVerified.index();
    public static final int BOOKVERIFIED = AttributesEnum.BookVerified.index();
    public static final int CONVERIFIED = AttributesEnum.ConVerified.index();
    public static final int IDCARDVERIFIED = AttributesEnum.IdCardVerified.index();
    public static final int IDENTITYDOCVERIFIED = AttributesEnum.IdentityDocVerified.index();
    public static final int PHOTOVERIFIED = AttributesEnum.PhotoVerified.index();
    public static final int PHYSICALVERIFIED = AttributesEnum.PhysicalVerified.index();
    public static final int SATVERIFIED = AttributesEnum.SatVerified.index();
    public static final int SEAFARERVERIFIED = AttributesEnum.SeafarerVerified.index();
    public static final int SEASERVICEVERIFIED = AttributesEnum.SeaserviceVerified.index();
    public static final int CONVERIFIEDCOMNT = AttributesEnum.ConVerifiedComnt.index();
    public static final int BOOKVERIFIEDCOMNT = AttributesEnum.BookVerifiedComnt.index();
    public static final int IDCARDVERIFIEDCOMNT = AttributesEnum.IdCardVerifiedComnt.index();
    public static final int APPLICATIONVERIFIEDCOMNT = AttributesEnum.ApplicationVerifiedComnt.index();
    public static final int AFFIDAVITVERIFIEDCOMNT = AttributesEnum.AffidavitVerifiedComnt.index();
    public static final int IDENTITYDOCVERIFIEDCOMNT = AttributesEnum.IdentityDocVerifiedComnt.index();
    public static final int PHOTOVERIFIEDCOMNT = AttributesEnum.PhotoVerifiedComnt.index();
    public static final int PHYSICALVERIFIEDCOMNT = AttributesEnum.PhysicalVerifiedComnt.index();
    public static final int SATVERIFIEDCOMNT = AttributesEnum.SatVerifiedComnt.index();
    public static final int SEASERVICEVERIFIEDCOMNT = AttributesEnum.SeaserviceVerifiedComnt.index();
    public static final int DATAVERIFIEDINFOCOMNT = AttributesEnum.DataVerifiedInfoComnt.index();
    public static final int CRAAPPROVALFLAG = AttributesEnum.CraApprovalFlag.index();
    public static final int BOOKREPLACEMENTISSUETYPE = AttributesEnum.BookReplacementIssueType.index();
    public static final int TRANSCRADOC = AttributesEnum.TransCraDoc.index();
    public static final int TRANSBATCHSTATUS = AttributesEnum.TransBatchStatus.index();
    public static final int TRANSOCCORRECTED = AttributesEnum.TransOcCorrected.index();
    public static final int TRANSSQCCORRECTED = AttributesEnum.TransSqcCorrected.index();
    public static final int TRANSAPPROVEALL = AttributesEnum.TransApproveAll.index();
    public static final int TRANSVESSELPROPULSIONCODE = AttributesEnum.TransVesselPropulsionCode.index();
    public static final int TRANSCOMPCODE = AttributesEnum.TransCompCode.index();
    public static final int BOOKISSUETYPEUPD = AttributesEnum.BookIssueTypeUpd.index();
    public static final int BOOKISSUETYPEUPDDT = AttributesEnum.BookIssueTypeUpdDt.index();
    public static final int IDCARDISSUETYPEUPD = AttributesEnum.IdcardIssueTypeUpd.index();
    public static final int IDCARDISSUETYPEUPDDT = AttributesEnum.IdcardIssueTypeUpdDt.index();
    public static final int TRANSTCSTATUS = AttributesEnum.TransTcStatus.index();
    public static final int TRANSTCSTATUSDATE = AttributesEnum.TransTcStatusDate.index();
    public static final int TRANSUPDATESEAFARERID = AttributesEnum.TransUpdateSeafarerId.index();
    public static final int TRANSCONCREQUESTID = AttributesEnum.TransConcRequestId.index();
    public static final int TRANSCOLORCODE = AttributesEnum.TransColorCode.index();
    public static final int ACKCONCREQID = AttributesEnum.AckConcReqId.index();
    public static final int TRANSACKCOLORCODE = AttributesEnum.TransAckColorCode.index();
    public static final int REPLACEMENTISSUETYPE = AttributesEnum.ReplacementIssueType.index();
    public static final int TRANSPREVIOUSIDCARD = AttributesEnum.TransPreviousIdCard.index();
    public static final int SEAFARERVLDTFLAG = AttributesEnum.SeafarerVldtFlag.index();
    public static final int TRANSUPLOADEDDOCSCORRECTED = AttributesEnum.TransUploadedDocsCorrected.index();
    public static final int VIEWSEAFARERDOCSOCVO = AttributesEnum.viewSeafarerDocsOcVO.index();
    public static final int VIEWSEAFARERDOCSSQCVO = AttributesEnum.viewSeafarerDocsSqcVO.index();
    public static final int SICDSEAFARERVO = AttributesEnum.SicdSeafarerVO.index();
    public static final int VIEWSEAFARERDOCSBOOKSVO = AttributesEnum.ViewSeafarerDocsBooksVO.index();
    public static final int COUNTRIESLOV1 = AttributesEnum.countriesLOV1.index();
    public static final int VIEWVESSELRO1 = AttributesEnum.ViewVesselRO1.index();
    public static final int GETCITYNAMEBYCITYIDRO1 = AttributesEnum.GetCityNameByCityIdRO1.index();
    public static final int YESNOLOV1 = AttributesEnum.YesNoLOV1.index();
    public static final int ISSUETYPELOV1 = AttributesEnum.IssueTypeLOV1.index();
    public static final int PREVIOUSEXSICDBOOKLOV1 = AttributesEnum.PreviousExsicdBookLOV1.index();
    public static final int HOLDREASONVIEW1 = AttributesEnum.HoldReasonView1.index();
    public static final int CITIESVIEW1 = AttributesEnum.CitiesView1.index();
    public static final int LOVREPLACEMENTUOMVIEW1 = AttributesEnum.LovReplacementUomView1.index();
    public static final int PREVIOUSIDCARDVIEW1 = AttributesEnum.PreviousIdCardView1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public RmiSeafarerViewRowImpl() {
    }

    /**
     * Gets viewSeafarerEO entity object.
     * @return the viewSeafarerEO
     */
    public RmiSeafarersImpl getviewSeafarerEO() {
        return (RmiSeafarersImpl)getEntity(ENTITY_VIEWSEAFAREREO);
    }

    /**
     * Gets the attribute value for AFFIDAVIT_APVD_BY using the alias name AffidavitApvdBy.
     * @return the AFFIDAVIT_APVD_BY
     */
    public BigDecimal getAffidavitApvdBy() {
        return (BigDecimal)getAttributeInternal(AFFIDAVITAPVDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for AFFIDAVIT_APVD_BY using the alias name AffidavitApvdBy.
     * @param value value to set the AFFIDAVIT_APVD_BY
     */
    public void setAffidavitApvdBy(BigDecimal value) {
        setAttributeInternal(AFFIDAVITAPVDBY, value);
    }

    /**
     * Gets the attribute value for AFFIDAVIT_APVD_DATE using the alias name AffidavitApvdDate.
     * @return the AFFIDAVIT_APVD_DATE
     */
    public Timestamp getAffidavitApvdDate() {
        return (Timestamp)getAttributeInternal(AFFIDAVITAPVDDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for AFFIDAVIT_APVD_DATE using the alias name AffidavitApvdDate.
     * @param value value to set the AFFIDAVIT_APVD_DATE
     */
    public void setAffidavitApvdDate(Timestamp value) {
        setAttributeInternal(AFFIDAVITAPVDDATE, value);
    }

    /**
     * Gets the attribute value for AFFIDAVIT_EDOC_ID using the alias name AffidavitEdocId.
     * @return the AFFIDAVIT_EDOC_ID
     */
    public BigDecimal getAffidavitEdocId() {
        return (BigDecimal)getAttributeInternal(AFFIDAVITEDOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for AFFIDAVIT_EDOC_ID using the alias name AffidavitEdocId.
     * @param value value to set the AFFIDAVIT_EDOC_ID
     */
    public void setAffidavitEdocId(BigDecimal value) {
        setAttributeInternal(AFFIDAVITEDOCID, value);
    }

    /**
     * Gets the attribute value for AFFIDAVIT_GRD_COMNT using the alias name AffidavitGrdComnt.
     * @return the AFFIDAVIT_GRD_COMNT
     */
    public String getAffidavitGrdComnt() {
        return (String)getAttributeInternal(AFFIDAVITGRDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for AFFIDAVIT_GRD_COMNT using the alias name AffidavitGrdComnt.
     * @param value value to set the AFFIDAVIT_GRD_COMNT
     */
    public void setAffidavitGrdComnt(String value) {
        setAttributeInternal(AFFIDAVITGRDCOMNT, value);
    }

    /**
     * Gets the attribute value for AFFIDAVIT_GRD_STATUS using the alias name AffidavitGrdStatus.
     * @return the AFFIDAVIT_GRD_STATUS
     */
    public String getAffidavitGrdStatus() {
        if(getAttributeInternal(AFFIDAVITGRDSTATUS) != null
            && getAttributeInternal(AFFIDAVITGRDSTATUS).toString().trim().equalsIgnoreCase("Rejected"))
            return "Hold";
        else
            return (String)getAttributeInternal(AFFIDAVITGRDSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for AFFIDAVIT_GRD_STATUS using the alias name AffidavitGrdStatus.
     * @param value value to set the AFFIDAVIT_GRD_STATUS
     */
    public void setAffidavitGrdStatus(String value) {
        setAttributeInternal(AFFIDAVITGRDSTATUS, value);
    }

    /**
     * Gets the attribute value for APPLICATION_APVD_BY using the alias name ApplicationApvdBy.
     * @return the APPLICATION_APVD_BY
     */
    public BigDecimal getApplicationApvdBy() {
        return (BigDecimal)getAttributeInternal(APPLICATIONAPVDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for APPLICATION_APVD_BY using the alias name ApplicationApvdBy.
     * @param value value to set the APPLICATION_APVD_BY
     */
    public void setApplicationApvdBy(BigDecimal value) {
        setAttributeInternal(APPLICATIONAPVDBY, value);
    }

    /**
     * Gets the attribute value for APPLICATION_APVD_DATE using the alias name ApplicationApvdDate.
     * @return the APPLICATION_APVD_DATE
     */
    public Timestamp getApplicationApvdDate() {
        return (Timestamp)getAttributeInternal(APPLICATIONAPVDDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for APPLICATION_APVD_DATE using the alias name ApplicationApvdDate.
     * @param value value to set the APPLICATION_APVD_DATE
     */
    public void setApplicationApvdDate(Timestamp value) {
        setAttributeInternal(APPLICATIONAPVDDATE, value);
    }

    /**
     * Gets the attribute value for APPLICATION_EDOC_ID using the alias name ApplicationEdocId.
     * @return the APPLICATION_EDOC_ID
     */
    public BigDecimal getApplicationEdocId() {
        return (BigDecimal)getAttributeInternal(APPLICATIONEDOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for APPLICATION_EDOC_ID using the alias name ApplicationEdocId.
     * @param value value to set the APPLICATION_EDOC_ID
     */
    public void setApplicationEdocId(BigDecimal value) {
        setAttributeInternal(APPLICATIONEDOCID, value);
    }

    /**
     * Gets the attribute value for APPLICATION_GRD_COMNT using the alias name ApplicationGrdComnt.
     * @return the APPLICATION_GRD_COMNT
     */
    public String getApplicationGrdComnt() {
        return (String)getAttributeInternal(APPLICATIONGRDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for APPLICATION_GRD_COMNT using the alias name ApplicationGrdComnt.
     * @param value value to set the APPLICATION_GRD_COMNT
     */
    public void setApplicationGrdComnt(String value) {
        setAttributeInternal(APPLICATIONGRDCOMNT, value);
    }

    /**
     * Gets the attribute value for APPLICATION_GRD_STATUS using the alias name ApplicationGrdStatus.
     * @return the APPLICATION_GRD_STATUS
     */
    public String getApplicationGrdStatus() {
        if(getAttributeInternal(APPLICATIONGRDSTATUS) != null
            && getAttributeInternal(APPLICATIONGRDSTATUS).toString().trim().equalsIgnoreCase("Rejected"))
            return "Hold";
        else
            return (String)getAttributeInternal(APPLICATIONGRDSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for APPLICATION_GRD_STATUS using the alias name ApplicationGrdStatus.
     * @param value value to set the APPLICATION_GRD_STATUS
     */
    public void setApplicationGrdStatus(String value) {
        setAttributeInternal(APPLICATIONGRDSTATUS, value);
    }

    /**
     * Gets the attribute value for BIRTH_DATE using the alias name BirthDate.
     * @return the BIRTH_DATE
     */
    public Timestamp getBirthDate() {
        return (Timestamp)getAttributeInternal(BIRTHDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for BIRTH_DATE using the alias name BirthDate.
     * @param value value to set the BIRTH_DATE
     */
    public void setBirthDate(Timestamp value) {
        setAttributeInternal(BIRTHDATE, value);
    }

    /**
     * Gets the attribute value for BIRTH_PLACE using the alias name BirthPlace.
     * @return the BIRTH_PLACE
     */
    public String getBirthPlace() {
        return (String)getAttributeInternal(BIRTHPLACE);
    }

    /**
     * Sets <code>value</code> as attribute value for BIRTH_PLACE using the alias name BirthPlace.
     * @param value value to set the BIRTH_PLACE
     */
    public void setBirthPlace(String value) {
        setAttributeInternal(BIRTHPLACE, value);
    }

    /**
     * Gets the attribute value for BOOK_APPROVED_BY using the alias name BookApprovedBy.
     * @return the BOOK_APPROVED_BY
     */
    public BigDecimal getBookApprovedBy() {
        return (BigDecimal)getAttributeInternal(BOOKAPPROVEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for BOOK_APPROVED_BY using the alias name BookApprovedBy.
     * @param value value to set the BOOK_APPROVED_BY
     */
    public void setBookApprovedBy(BigDecimal value) {
        setAttributeInternal(BOOKAPPROVEDBY, value);
    }

    /**
     * Gets the attribute value for BOOK_APPROVED_DATE using the alias name BookApprovedDate.
     * @return the BOOK_APPROVED_DATE
     */
    public Timestamp getBookApprovedDate() {
        return (Timestamp)getAttributeInternal(BOOKAPPROVEDDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for BOOK_APPROVED_DATE using the alias name BookApprovedDate.
     * @param value value to set the BOOK_APPROVED_DATE
     */
    public void setBookApprovedDate(Timestamp value) {
        setAttributeInternal(BOOKAPPROVEDDATE, value);
    }

    /**
     * Gets the attribute value for BOOK_GRD_COMNT using the alias name BookGrdComnt.
     * @return the BOOK_GRD_COMNT
     */
    public String getBookGrdComnt() {
        return (String)getAttributeInternal(BOOKGRDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for BOOK_GRD_COMNT using the alias name BookGrdComnt.
     * @param value value to set the BOOK_GRD_COMNT
     */
    public void setBookGrdComnt(String value) {
        setAttributeInternal(BOOKGRDCOMNT, value);
    }

    /**
     * Gets the attribute value for BOOK_GRD_STATUS using the alias name BookGrdStatus.
     * @return the BOOK_GRD_STATUS
     */
    public String getBookGrdStatus() {
        if(getAttributeInternal(BOOKGRDSTATUS) != null
            && getAttributeInternal(BOOKGRDSTATUS).toString().trim().equalsIgnoreCase("Rejected"))
            return "Hold";
        else
            return (String)getAttributeInternal(BOOKGRDSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for BOOK_GRD_STATUS using the alias name BookGrdStatus.
     * @param value value to set the BOOK_GRD_STATUS
     */
    public void setBookGrdStatus(String value)
    {
        if(value != null)
        {
            setAttributeInternal(BOOKGRDCOMNT, null);
            setAttributeInternal(BOOKGRDHOLDREASON, null);
        }
        
        setAttributeInternal(BOOKGRDSTATUS, value);
    }

    /**
     * Gets the attribute value for CON_APVD_BY using the alias name ConApvdBy.
     * @return the CON_APVD_BY
     */
    public BigDecimal getConApvdBy() {
        return (BigDecimal)getAttributeInternal(CONAPVDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for CON_APVD_BY using the alias name ConApvdBy.
     * @param value value to set the CON_APVD_BY
     */
    public void setConApvdBy(BigDecimal value) {
        setAttributeInternal(CONAPVDBY, value);
    }

    /**
     * Gets the attribute value for CON_APVD_DATE using the alias name ConApvdDate.
     * @return the CON_APVD_DATE
     */
    public Timestamp getConApvdDate() {
        return (Timestamp)getAttributeInternal(CONAPVDDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for CON_APVD_DATE using the alias name ConApvdDate.
     * @param value value to set the CON_APVD_DATE
     */
    public void setConApvdDate(Timestamp value) {
        setAttributeInternal(CONAPVDDATE, value);
    }

    /**
     * Gets the attribute value for CON_GRD_COMNT using the alias name ConGrdComnt.
     * @return the CON_GRD_COMNT
     */
    public String getConGrdComnt() {
        return (String)getAttributeInternal(CONGRDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for CON_GRD_COMNT using the alias name ConGrdComnt.
     * @param value value to set the CON_GRD_COMNT
     */
    public void setConGrdComnt(String value) {
        setAttributeInternal(CONGRDCOMNT, value);
    }

    /**
     * Gets the attribute value for CON_GRD_STATUS using the alias name ConGrdStatus.
     * @return the CON_GRD_STATUS
     */
    public String getConGrdStatus() 
    {
        if(getAttributeInternal(CONGRDSTATUS) != null
            && getAttributeInternal(CONGRDSTATUS).toString().trim().equalsIgnoreCase("Rejected"))
            return "Hold";
        else
            return (String)getAttributeInternal(CONGRDSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for CON_GRD_STATUS using the alias name ConGrdStatus.
     * @param value value to set the CON_GRD_STATUS
     */
    public void setConGrdStatus(String value) {
        setAttributeInternal(CONGRDSTATUS, value);
    }

    /**
     * Gets the attribute value for CONSENT_EDOC_ID using the alias name ConsentEdocId.
     * @return the CONSENT_EDOC_ID
     */
    public BigDecimal getConsentEdocId() {
        return (BigDecimal)getAttributeInternal(CONSENTEDOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for CONSENT_EDOC_ID using the alias name ConsentEdocId.
     * @param value value to set the CONSENT_EDOC_ID
     */
    public void setConsentEdocId(BigDecimal value) {
        setAttributeInternal(CONSENTEDOCID, value);
    }

    /**
     * Gets the attribute value for CREATED_BY using the alias name CreatedBy.
     * @return the CREATED_BY
     */
    public Integer getCreatedBy() {
        return (Integer) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for CREATED_BY using the alias name CreatedBy.
     * @param value value to set the CREATED_BY
     */
    public void setCreatedBy(Integer value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CREATION_DATE using the alias name CreationDate.
     * @return the CREATION_DATE
     */
    public Timestamp getCreationDate() {
        return (Timestamp)getAttributeInternal(CREATIONDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for CREATION_DATE using the alias name CreationDate.
     * @param value value to set the CREATION_DATE
     */
    public void setCreationDate(Timestamp value) {
        setAttributeInternal(CREATIONDATE, value);
    }

    /**
     * Gets the attribute value for DISTINGUISHING_MARKS using the alias name DistinguishingMarks.
     * @return the DISTINGUISHING_MARKS
     */
    public String getDistinguishingMarks() {
        return (String)getAttributeInternal(DISTINGUISHINGMARKS);
    }

    /**
     * Sets <code>value</code> as attribute value for DISTINGUISHING_MARKS using the alias name DistinguishingMarks.
     * @param value value to set the DISTINGUISHING_MARKS
     */
    public void setDistinguishingMarks(String value) {
        setAttributeInternal(DISTINGUISHINGMARKS, value);
    }

    /**
     * Gets the attribute value for ESI_BATCH_ID using the alias name EsiBatchId.
     * @return the ESI_BATCH_ID
     */
    public Integer getEsiBatchId() {
        return (Integer)getAttributeInternal(ESIBATCHID);
    }

    /**
     * Sets <code>value</code> as attribute value for ESI_BATCH_ID using the alias name EsiBatchId.
     * @param value value to set the ESI_BATCH_ID
     */
    public void setEsiBatchId(Integer value) {
        setAttributeInternal(ESIBATCHID, value);
    }

    /**
     * Gets the attribute value for ESI_ID using the alias name EsiId.
     * @return the ESI_ID
     */
    public BigDecimal getEsiId() {
        return (BigDecimal)getAttributeInternal(ESIID);
    }

    /**
     * Sets <code>value</code> as attribute value for ESI_ID using the alias name EsiId.
     * @param value value to set the ESI_ID
     */
    public void setEsiId(BigDecimal value) {
        setAttributeInternal(ESIID, value);
    }

    /**
     * Gets the attribute value for FIRST_NAME using the alias name FirstName.
     * @return the FIRST_NAME
     */
    public String getFirstName() {
        return (String)getAttributeInternal(FIRSTNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for FIRST_NAME using the alias name FirstName.
     * @param value value to set the FIRST_NAME
     */
    public void setFirstName(String value) {
        setAttributeInternal(FIRSTNAME, value);
    }

    /**
     * Gets the attribute value for GENDER using the alias name Gender.
     * @return the GENDER
     */
    public String getGender() {
        return (String)getAttributeInternal(GENDER);
    }

    /**
     * Sets <code>value</code> as attribute value for GENDER using the alias name Gender.
     * @param value value to set the GENDER
     */
    public void setGender(String value) {
        System.out.println("gender in rowimpl :: "+value);
        if(value != null)
            setAttributeInternal(GENDER, value);
    }

    /**
     * Gets the attribute value for ID_CARD_APPROVED_BY using the alias name IdCardApprovedBy.
     * @return the ID_CARD_APPROVED_BY
     */
    public BigDecimal getIdCardApprovedBy() {
        return (BigDecimal)getAttributeInternal(IDCARDAPPROVEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for ID_CARD_APPROVED_BY using the alias name IdCardApprovedBy.
     * @param value value to set the ID_CARD_APPROVED_BY
     */
    public void setIdCardApprovedBy(BigDecimal value) {
        setAttributeInternal(IDCARDAPPROVEDBY, value);
    }

    /**
     * Gets the attribute value for ID_CARD_APPROVED_DATE using the alias name IdCardApprovedDate.
     * @return the ID_CARD_APPROVED_DATE
     */
    public Timestamp getIdCardApprovedDate() {
        return (Timestamp)getAttributeInternal(IDCARDAPPROVEDDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for ID_CARD_APPROVED_DATE using the alias name IdCardApprovedDate.
     * @param value value to set the ID_CARD_APPROVED_DATE
     */
    public void setIdCardApprovedDate(Timestamp value) {
        setAttributeInternal(IDCARDAPPROVEDDATE, value);
    }

    /**
     * Gets the attribute value for ID_CARD_GRD_CMNT using the alias name IdCardGrdCmnt.
     * @return the ID_CARD_GRD_CMNT
     */
    public String getIdCardGrdCmnt() {
        return (String)getAttributeInternal(IDCARDGRDCMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for ID_CARD_GRD_CMNT using the alias name IdCardGrdCmnt.
     * @param value value to set the ID_CARD_GRD_CMNT
     */
    public void setIdCardGrdCmnt(String value) {
        setAttributeInternal(IDCARDGRDCMNT, value);
    }

    /**
     * Gets the attribute value for ID_CARD_GRD_STATUS using the alias name IdCardGrdStatus.
     * @return the ID_CARD_GRD_STATUS
     */
    public String getIdCardGrdStatus() {
        if(getAttributeInternal(IDCARDGRDSTATUS) != null
            && getAttributeInternal(IDCARDGRDSTATUS).toString().trim().equalsIgnoreCase("Rejected"))
            return "Hold";
        else
            return (String)getAttributeInternal(IDCARDGRDSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for ID_CARD_GRD_STATUS using the alias name IdCardGrdStatus.
     * @param value value to set the ID_CARD_GRD_STATUS
     */
    public void setIdCardGrdStatus(String value) {
        setAttributeInternal(IDCARDGRDSTATUS, value);
    }

    /**
     * Gets the attribute value for IDENTITY_DOC_APPROVED_BY using the alias name IdentityDocApprovedBy.
     * @return the IDENTITY_DOC_APPROVED_BY
     */
    public BigDecimal getIdentityDocApprovedBy() {
        return (BigDecimal)getAttributeInternal(IDENTITYDOCAPPROVEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for IDENTITY_DOC_APPROVED_BY using the alias name IdentityDocApprovedBy.
     * @param value value to set the IDENTITY_DOC_APPROVED_BY
     */
    public void setIdentityDocApprovedBy(BigDecimal value) {
        setAttributeInternal(IDENTITYDOCAPPROVEDBY, value);
    }

    /**
     * Gets the attribute value for IDENTITY_DOC_APPROVED_DATE using the alias name IdentityDocApprovedDate.
     * @return the IDENTITY_DOC_APPROVED_DATE
     */
    public Timestamp getIdentityDocApprovedDate() {
        return (Timestamp)getAttributeInternal(IDENTITYDOCAPPROVEDDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for IDENTITY_DOC_APPROVED_DATE using the alias name IdentityDocApprovedDate.
     * @param value value to set the IDENTITY_DOC_APPROVED_DATE
     */
    public void setIdentityDocApprovedDate(Timestamp value) {
        setAttributeInternal(IDENTITYDOCAPPROVEDDATE, value);
    }

    /**
     * Gets the attribute value for IDENTITY_DOC_EDOC_ID using the alias name IdentityDocEdocId.
     * @return the IDENTITY_DOC_EDOC_ID
     */
    public BigDecimal getIdentityDocEdocId() {
        return (BigDecimal)getAttributeInternal(IDENTITYDOCEDOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for IDENTITY_DOC_EDOC_ID using the alias name IdentityDocEdocId.
     * @param value value to set the IDENTITY_DOC_EDOC_ID
     */
    public void setIdentityDocEdocId(BigDecimal value) {
        setAttributeInternal(IDENTITYDOCEDOCID, value);
    }

    /**
     * Gets the attribute value for IDENTITY_DOC_GRD_COMNT using the alias name IdentityDocGrdComnt.
     * @return the IDENTITY_DOC_GRD_COMNT
     */
    public String getIdentityDocGrdComnt() {
        return (String)getAttributeInternal(IDENTITYDOCGRDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for IDENTITY_DOC_GRD_COMNT using the alias name IdentityDocGrdComnt.
     * @param value value to set the IDENTITY_DOC_GRD_COMNT
     */
    public void setIdentityDocGrdComnt(String value) {
        setAttributeInternal(IDENTITYDOCGRDCOMNT, value);
    }

    /**
     * Gets the attribute value for IDENTITY_DOC_GRD_STATUS using the alias name IdentityDocGrdStatus.
     * @return the IDENTITY_DOC_GRD_STATUS
     */
    public String getIdentityDocGrdStatus() {
        if(getAttributeInternal(IDENTITYDOCGRDSTATUS) != null
            && getAttributeInternal(IDENTITYDOCGRDSTATUS).toString().trim().equalsIgnoreCase("Rejected"))
            return "Hold";
        else
            return (String)getAttributeInternal(IDENTITYDOCGRDSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for IDENTITY_DOC_GRD_STATUS using the alias name IdentityDocGrdStatus.
     * @param value value to set the IDENTITY_DOC_GRD_STATUS
     */
    public void setIdentityDocGrdStatus(String value) {
        setAttributeInternal(IDENTITYDOCGRDSTATUS, value);
    }

    /**
     * Gets the attribute value for ISSUE_TYPE using the alias name IssueType.
     * @return the ISSUE_TYPE
     */
    public String getIssueType3()
    {
        if(getAttributeInternal(ISSUETYPE3) != null)
            return (String)getAttributeInternal(ISSUETYPE3);
        else
            return "New";
    }

    /**
     * Sets <code>value</code> as attribute value for ISSUE_TYPE using the alias name IssueType.
     * @param value value to set the ISSUE_TYPE
     */
    public void setIssueType3(String value) {
        setAttributeInternal(ISSUETYPE3, value);
    }

    /**
     * Gets the attribute value for ISSUE_TYPE_ID_CARD using the alias name IssueTypeIdCard.
     * @return the ISSUE_TYPE_ID_CARD
     */
    public String getIssueTypeIdCard() {
        return (String)getAttributeInternal(ISSUETYPEIDCARD);
    }

    /**
     * Sets <code>value</code> as attribute value for ISSUE_TYPE_ID_CARD using the alias name IssueTypeIdCard.
     * @param value value to set the ISSUE_TYPE_ID_CARD
     */
    public void setIssueTypeIdCard(String value) {
        setAttributeInternal(ISSUETYPEIDCARD, value);
    }

    /**
     * Gets the attribute value for LAST_NAME using the alias name LastName.
     * @return the LAST_NAME
     */
    public String getLastName() {
        return (String)getAttributeInternal(LASTNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for LAST_NAME using the alias name LastName.
     * @param value value to set the LAST_NAME
     */
    public void setLastName(String value) {
        setAttributeInternal(LASTNAME, value);
    }

    /**
     * Gets the attribute value for LAST_UPDATE_DATE using the alias name LastUpdateDate.
     * @return the LAST_UPDATE_DATE
     */
    public Timestamp getLastUpdateDate() {
        return (Timestamp)getAttributeInternal(LASTUPDATEDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for LAST_UPDATE_DATE using the alias name LastUpdateDate.
     * @param value value to set the LAST_UPDATE_DATE
     */
    public void setLastUpdateDate(Timestamp value) {
        setAttributeInternal(LASTUPDATEDATE, value);
    }

    /**
     * Gets the attribute value for LAST_UPDATE_LOGIN using the alias name LastUpdateLogin.
     * @return the LAST_UPDATE_LOGIN
     */
    public Integer getLastUpdateLogin() {
        return (Integer) getAttributeInternal(LASTUPDATELOGIN);
    }

    /**
     * Sets <code>value</code> as attribute value for LAST_UPDATE_LOGIN using the alias name LastUpdateLogin.
     * @param value value to set the LAST_UPDATE_LOGIN
     */
    public void setLastUpdateLogin(Integer value) {
        setAttributeInternal(LASTUPDATELOGIN, value);
    }

    /**
     * Gets the attribute value for LAST_UPDATED_BY using the alias name LastUpdatedBy.
     * @return the LAST_UPDATED_BY
     */
    public Integer getLastUpdatedBy() {
        return (Integer) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for LAST_UPDATED_BY using the alias name LastUpdatedBy.
     * @param value value to set the LAST_UPDATED_BY
     */
    public void setLastUpdatedBy(Integer value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for MIDDLE_INITIAL using the alias name MiddleInitial.
     * @return the MIDDLE_INITIAL
     */
    public String getMiddleInitial() {
        return (String)getAttributeInternal(MIDDLEINITIAL);
    }

    /**
     * Sets <code>value</code> as attribute value for MIDDLE_INITIAL using the alias name MiddleInitial.
     * @param value value to set the MIDDLE_INITIAL
     */
    public void setMiddleInitial(String value) {
        setAttributeInternal(MIDDLEINITIAL, value);
    }

    /**
     * Gets the attribute value for NATIONALITY using the alias name Nationality.
     * @return the NATIONALITY
     */
    public String getNationality() {
        return (String)getAttributeInternal(NATIONALITY);
    }

    /**
     * Sets <code>value</code> as attribute value for NATIONALITY using the alias name Nationality.
     * @param value value to set the NATIONALITY
     */
    public void setNationality(String value) {
        setAttributeInternal(NATIONALITY, value);
    }

    /**
     * Gets the attribute value for NOTES using the alias name Notes.
     * @return the NOTES
     */
    public String getNotes() {
        return (String)getAttributeInternal(NOTES);
    }

    /**
     * Sets <code>value</code> as attribute value for NOTES using the alias name Notes.
     * @param value value to set the NOTES
     */
    public void setNotes(String value) {
        setAttributeInternal(NOTES, value);
    }

    /**
     * Gets the attribute value for PASSPORT_ISSUING_COUNTRY_CODE using the alias name PassportIssuingCountryCode.
     * @return the PASSPORT_ISSUING_COUNTRY_CODE
     */
    public String getPassportIssuingCountryCode() {
        return (String)getAttributeInternal(PASSPORTISSUINGCOUNTRYCODE);
    }

    /**
     * Sets <code>value</code> as attribute value for PASSPORT_ISSUING_COUNTRY_CODE using the alias name PassportIssuingCountryCode.
     * @param value value to set the PASSPORT_ISSUING_COUNTRY_CODE
     */
    public void setPassportIssuingCountryCode(String value) {
        setAttributeInternal(PASSPORTISSUINGCOUNTRYCODE, value);
    }

    /**
     * Gets the attribute value for PERMANENT_ADDRESS using the alias name PermanentAddress.
     * @return the PERMANENT_ADDRESS
     */
    public String getPermanentAddress() {
        return (String)getAttributeInternal(PERMANENTADDRESS);
    }

    /**
     * Sets <code>value</code> as attribute value for PERMANENT_ADDRESS using the alias name PermanentAddress.
     * @param value value to set the PERMANENT_ADDRESS
     */
    public void setPermanentAddress(String value) {
        setAttributeInternal(PERMANENTADDRESS, value);
    }

    /**
     * Gets the attribute value for PHOTO_APPROVED_BY using the alias name PhotoApprovedBy.
     * @return the PHOTO_APPROVED_BY
     */
    public BigDecimal getPhotoApprovedBy() {
        return (BigDecimal)getAttributeInternal(PHOTOAPPROVEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for PHOTO_APPROVED_BY using the alias name PhotoApprovedBy.
     * @param value value to set the PHOTO_APPROVED_BY
     */
    public void setPhotoApprovedBy(BigDecimal value) {
        setAttributeInternal(PHOTOAPPROVEDBY, value);
    }

    /**
     * Gets the attribute value for PHOTO_APPROVED_DATE using the alias name PhotoApprovedDate.
     * @return the PHOTO_APPROVED_DATE
     */
    public Timestamp getPhotoApprovedDate() {
        return (Timestamp)getAttributeInternal(PHOTOAPPROVEDDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for PHOTO_APPROVED_DATE using the alias name PhotoApprovedDate.
     * @param value value to set the PHOTO_APPROVED_DATE
     */
    public void setPhotoApprovedDate(Timestamp value) {
        setAttributeInternal(PHOTOAPPROVEDDATE, value);
    }

    /**
     * Gets the attribute value for PHOTO_EDOC_ID using the alias name PhotoEdocId.
     * @return the PHOTO_EDOC_ID
     */
    public BigDecimal getPhotoEdocId() {
        return (BigDecimal)getAttributeInternal(PHOTOEDOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for PHOTO_EDOC_ID using the alias name PhotoEdocId.
     * @param value value to set the PHOTO_EDOC_ID
     */
    public void setPhotoEdocId(BigDecimal value) {
        setAttributeInternal(PHOTOEDOCID, value);
    }

    /**
     * Gets the attribute value for PHOTO_GRD_COMNT using the alias name PhotoGrdComnt.
     * @return the PHOTO_GRD_COMNT
     */
    public String getPhotoGrdComnt() {
        return (String)getAttributeInternal(PHOTOGRDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for PHOTO_GRD_COMNT using the alias name PhotoGrdComnt.
     * @param value value to set the PHOTO_GRD_COMNT
     */
    public void setPhotoGrdComnt(String value) {
        setAttributeInternal(PHOTOGRDCOMNT, value);
    }

    /**
     * Gets the attribute value for PHOTO_GRD_STATUS using the alias name PhotoGrdStatus.
     * @return the PHOTO_GRD_STATUS
     */
    public String getPhotoGrdStatus() {
        if(getAttributeInternal(PHOTOGRDSTATUS) != null
            && getAttributeInternal(PHOTOGRDSTATUS).toString().trim().equalsIgnoreCase("Rejected"))
            return "Hold";
        else
            return (String)getAttributeInternal(PHOTOGRDSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for PHOTO_GRD_STATUS using the alias name PhotoGrdStatus.
     * @param value value to set the PHOTO_GRD_STATUS
     */
    public void setPhotoGrdStatus(String value) {
        setAttributeInternal(PHOTOGRDSTATUS, value);
    }

    /**
     * Gets the attribute value for PHYSICAL_APPROVED_BY using the alias name PhysicalApprovedBy.
     * @return the PHYSICAL_APPROVED_BY
     */
    public BigDecimal getPhysicalApprovedBy() {
        return (BigDecimal)getAttributeInternal(PHYSICALAPPROVEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for PHYSICAL_APPROVED_BY using the alias name PhysicalApprovedBy.
     * @param value value to set the PHYSICAL_APPROVED_BY
     */
    public void setPhysicalApprovedBy(BigDecimal value) {
        setAttributeInternal(PHYSICALAPPROVEDBY, value);
    }

    /**
     * Gets the attribute value for PHYSICAL_APPROVED_DATE using the alias name PhysicalApprovedDate.
     * @return the PHYSICAL_APPROVED_DATE
     */
    public Timestamp getPhysicalApprovedDate() {
        return (Timestamp)getAttributeInternal(PHYSICALAPPROVEDDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for PHYSICAL_APPROVED_DATE using the alias name PhysicalApprovedDate.
     * @param value value to set the PHYSICAL_APPROVED_DATE
     */
    public void setPhysicalApprovedDate(Timestamp value) {
        setAttributeInternal(PHYSICALAPPROVEDDATE, value);
    }

    /**
     * Gets the attribute value for PHYSICAL_EDOC_ID using the alias name PhysicalEdocId.
     * @return the PHYSICAL_EDOC_ID
     */
    public BigDecimal getPhysicalEdocId() {
        return (BigDecimal)getAttributeInternal(PHYSICALEDOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for PHYSICAL_EDOC_ID using the alias name PhysicalEdocId.
     * @param value value to set the PHYSICAL_EDOC_ID
     */
    public void setPhysicalEdocId(BigDecimal value) {
        setAttributeInternal(PHYSICALEDOCID, value);
    }

    /**
     * Gets the attribute value for PHYSICAL_GRD_COMNT using the alias name PhysicalGrdComnt.
     * @return the PHYSICAL_GRD_COMNT
     */
    public String getPhysicalGrdComnt() {
        return (String)getAttributeInternal(PHYSICALGRDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for PHYSICAL_GRD_COMNT using the alias name PhysicalGrdComnt.
     * @param value value to set the PHYSICAL_GRD_COMNT
     */
    public void setPhysicalGrdComnt(String value) {
        setAttributeInternal(PHYSICALGRDCOMNT, value);
    }

    /**
     * Gets the attribute value for PHYSICAL_GRD_STATUS using the alias name PhysicalGrdStatus.
     * @return the PHYSICAL_GRD_STATUS
     */
    public String getPhysicalGrdStatus() {
        if(getAttributeInternal(PHYSICALGRDSTATUS) != null
            && getAttributeInternal(PHYSICALGRDSTATUS).toString().trim().equalsIgnoreCase("Rejected"))
            return "Hold";
        else
            return (String)getAttributeInternal(PHYSICALGRDSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for PHYSICAL_GRD_STATUS using the alias name PhysicalGrdStatus.
     * @param value value to set the PHYSICAL_GRD_STATUS
     */
    public void setPhysicalGrdStatus(String value) {
        setAttributeInternal(PHYSICALGRDSTATUS, value);
    }

    /**
     * Gets the attribute value for PREVIOUS_BOOK_DOCUMENT_ID using the alias name PreviousBookDocumentId.
     * @return the PREVIOUS_BOOK_DOCUMENT_ID
     */
    public BigDecimal getPreviousBookDocumentId() {
        return (BigDecimal)getAttributeInternal(PREVIOUSBOOKDOCUMENTID);
    }

    /**
     * Sets <code>value</code> as attribute value for PREVIOUS_BOOK_DOCUMENT_ID using the alias name PreviousBookDocumentId.
     * @param value value to set the PREVIOUS_BOOK_DOCUMENT_ID
     */
    public void setPreviousBookDocumentId(BigDecimal value) {
        setAttributeInternal(PREVIOUSBOOKDOCUMENTID, value);
    }

    /**
     * Gets the attribute value for PREVIOUS_ID_CARD_DOCUMENT_ID using the alias name PreviousIdCardDocumentId.
     * @return the PREVIOUS_ID_CARD_DOCUMENT_ID
     */
    public BigDecimal getPreviousIdCardDocumentId() {
        return (BigDecimal)getAttributeInternal(PREVIOUSIDCARDDOCUMENTID);
    }

    /**
     * Sets <code>value</code> as attribute value for PREVIOUS_ID_CARD_DOCUMENT_ID using the alias name PreviousIdCardDocumentId.
     * @param value value to set the PREVIOUS_ID_CARD_DOCUMENT_ID
     */
    public void setPreviousIdCardDocumentId(BigDecimal value) {
        setAttributeInternal(PREVIOUSIDCARDDOCUMENTID, value);
    }

    /**
     * Gets the attribute value for RESIDENCE_COUNTRY_CODE using the alias name ResidenceCountryCode.
     * @return the RESIDENCE_COUNTRY_CODE
     */
    public String getResidenceCountryCode() {
        return (String)getAttributeInternal(RESIDENCECOUNTRYCODE);
    }

    /**
     * Sets <code>value</code> as attribute value for RESIDENCE_COUNTRY_CODE using the alias name ResidenceCountryCode.
     * @param value value to set the RESIDENCE_COUNTRY_CODE
     */
    public void setResidenceCountryCode(String value)
    {
        if(value != null)
        {
            settranCity(null);
            setWcCityListId(null);
        }
        setAttributeInternal(RESIDENCECOUNTRYCODE, value);
    }

    /**
     * Gets the attribute value for SAT_APVD_BY using the alias name SatApvdBy.
     * @return the SAT_APVD_BY
     */
    public BigDecimal getSatApvdBy() {
        return (BigDecimal)getAttributeInternal(SATAPVDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for SAT_APVD_BY using the alias name SatApvdBy.
     * @param value value to set the SAT_APVD_BY
     */
    public void setSatApvdBy(BigDecimal value) {
        setAttributeInternal(SATAPVDBY, value);
    }

    /**
     * Gets the attribute value for SAT_APVD_DATE using the alias name SatApvdDate.
     * @return the SAT_APVD_DATE
     */
    public Timestamp getSatApvdDate() {
        return (Timestamp)getAttributeInternal(SATAPVDDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for SAT_APVD_DATE using the alias name SatApvdDate.
     * @param value value to set the SAT_APVD_DATE
     */
    public void setSatApvdDate(Timestamp value) {
        setAttributeInternal(SATAPVDDATE, value);
    }

    /**
     * Gets the attribute value for SAT_EDOC_ID using the alias name SatEdocId.
     * @return the SAT_EDOC_ID
     */
    public BigDecimal getSatEdocId() {
        return (BigDecimal)getAttributeInternal(SATEDOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SAT_EDOC_ID using the alias name SatEdocId.
     * @param value value to set the SAT_EDOC_ID
     */
    public void setSatEdocId(BigDecimal value) {
        setAttributeInternal(SATEDOCID, value);
    }

    /**
     * Gets the attribute value for SAT_GRD_COMNT using the alias name SatGrdComnt.
     * @return the SAT_GRD_COMNT
     */
    public String getSatGrdComnt() {
        return (String)getAttributeInternal(SATGRDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for SAT_GRD_COMNT using the alias name SatGrdComnt.
     * @param value value to set the SAT_GRD_COMNT
     */
    public void setSatGrdComnt(String value) {
        setAttributeInternal(SATGRDCOMNT, value);
    }

    /**
     * Gets the attribute value for SAT_GRD_STATUS using the alias name SatGrdStatus.
     * @return the SAT_GRD_STATUS
     */
    public String getSatGrdStatus() {
        if(getAttributeInternal(SATGRDSTATUS) != null
            && getAttributeInternal(SATGRDSTATUS).toString().trim().equalsIgnoreCase("Rejected"))
            return "Hold";
        else
            return (String)getAttributeInternal(SATGRDSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for SAT_GRD_STATUS using the alias name SatGrdStatus.
     * @param value value to set the SAT_GRD_STATUS
     */
    public void setSatGrdStatus(String value) {
        setAttributeInternal(SATGRDSTATUS, value);
    }

    /**
     * Gets the attribute value for SEAFARER_APPROVED_BY using the alias name SeafarerApprovedBy.
     * @return the SEAFARER_APPROVED_BY
     */
    public BigDecimal getSeafarerApprovedBy() {
        return (BigDecimal)getAttributeInternal(SEAFARERAPPROVEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for SEAFARER_APPROVED_BY using the alias name SeafarerApprovedBy.
     * @param value value to set the SEAFARER_APPROVED_BY
     */
    public void setSeafarerApprovedBy(BigDecimal value) {
        setAttributeInternal(SEAFARERAPPROVEDBY, value);
    }

    /**
     * Gets the attribute value for SEAFARER_APPROVED_DATE using the alias name SeafarerApprovedDate.
     * @return the SEAFARER_APPROVED_DATE
     */
    public Timestamp getSeafarerApprovedDate() {
        return (Timestamp)getAttributeInternal(SEAFARERAPPROVEDDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for SEAFARER_APPROVED_DATE using the alias name SeafarerApprovedDate.
     * @param value value to set the SEAFARER_APPROVED_DATE
     */
    public void setSeafarerApprovedDate(Timestamp value) {
        setAttributeInternal(SEAFARERAPPROVEDDATE, value);
    }

    /**
     * Gets the attribute value for SEAFARER_GRD_COMNT using the alias name SeafarerGrdComnt.
     * @return the SEAFARER_GRD_COMNT
     */
    public String getSeafarerGrdComnt() {
        return (String)getAttributeInternal(SEAFARERGRDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for SEAFARER_GRD_COMNT using the alias name SeafarerGrdComnt.
     * @param value value to set the SEAFARER_GRD_COMNT
     */
    public void setSeafarerGrdComnt(String value) {
        setAttributeInternal(SEAFARERGRDCOMNT, value);
    }

    /**
     * Gets the attribute value for SEAFARER_GRD_STATUS using the alias name SeafarerGrdStatus.
     * @return the SEAFARER_GRD_STATUS
     */
    public String getSeafarerGrdStatus() {
        return (String)getAttributeInternal(SEAFARERGRDSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for SEAFARER_GRD_STATUS using the alias name SeafarerGrdStatus.
     * @param value value to set the SEAFARER_GRD_STATUS
     */
    public void setSeafarerGrdStatus(String value) {
        setAttributeInternal(SEAFARERGRDSTATUS, value);
    }

    /**
     * Gets the attribute value for SEAFARER_ID using the alias name SeafarerId.
     * @return the SEAFARER_ID
     */
    public Integer getSeafarerId() {
        return (Integer)getAttributeInternal(SEAFARERID);
    }

    /**
     * Sets <code>value</code> as attribute value for SEAFARER_ID using the alias name SeafarerId.
     * @param value value to set the SEAFARER_ID
     */
    public void setSeafarerId(Integer value) {
        setAttributeInternal(SEAFARERID, value);
    }

    /**
     * Gets the attribute value for SEASERVICE_GRD_COMNT using the alias name SeaserviceGrdComnt.
     * @return the SEASERVICE_GRD_COMNT
     */
    public String getSeaserviceGrdComnt() {
        return (String)getAttributeInternal(SEASERVICEGRDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for SEASERVICE_GRD_COMNT using the alias name SeaserviceGrdComnt.
     * @param value value to set the SEASERVICE_GRD_COMNT
     */
    public void setSeaserviceGrdComnt(String value) {
        setAttributeInternal(SEASERVICEGRDCOMNT, value);
    }

    /**
     * Gets the attribute value for SEASERVICE_GRD_STATUS using the alias name SeaserviceGrdStatus.
     * @return the SEASERVICE_GRD_STATUS
     */
    public String getSeaserviceGrdStatus() {
        if(getAttributeInternal(SEASERVICEGRDSTATUS) != null
            && getAttributeInternal(SEASERVICEGRDSTATUS).toString().trim().equalsIgnoreCase("Rejected"))
            return "Hold";
        else
            return (String)getAttributeInternal(SEASERVICEGRDSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for SEASERVICE_GRD_STATUS using the alias name SeaserviceGrdStatus.
     * @param value value to set the SEASERVICE_GRD_STATUS
     */
    public void setSeaserviceGrdStatus(String value) {
        setAttributeInternal(SEASERVICEGRDSTATUS, value);
    }

    /**
     * Gets the attribute value for SEASERVICE_TRANSCRIPT_APVD_BY using the alias name SeaserviceTranscriptApvdBy.
     * @return the SEASERVICE_TRANSCRIPT_APVD_BY
     */
    public BigDecimal getSeaserviceTranscriptApvdBy() {
        return (BigDecimal)getAttributeInternal(SEASERVICETRANSCRIPTAPVDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for SEASERVICE_TRANSCRIPT_APVD_BY using the alias name SeaserviceTranscriptApvdBy.
     * @param value value to set the SEASERVICE_TRANSCRIPT_APVD_BY
     */
    public void setSeaserviceTranscriptApvdBy(BigDecimal value) {
        setAttributeInternal(SEASERVICETRANSCRIPTAPVDBY, value);
    }

    /**
     * Gets the attribute value for SEASERVICE_TRANSCRIPT_APVD_DT using the alias name SeaserviceTranscriptApvdDt.
     * @return the SEASERVICE_TRANSCRIPT_APVD_DT
     */
    public Timestamp getSeaserviceTranscriptApvdDt() {
        return (Timestamp)getAttributeInternal(SEASERVICETRANSCRIPTAPVDDT);
    }

    /**
     * Sets <code>value</code> as attribute value for SEASERVICE_TRANSCRIPT_APVD_DT using the alias name SeaserviceTranscriptApvdDt.
     * @param value value to set the SEASERVICE_TRANSCRIPT_APVD_DT
     */
    public void setSeaserviceTranscriptApvdDt(Timestamp value) {
        setAttributeInternal(SEASERVICETRANSCRIPTAPVDDT, value);
    }

    /**
     * Gets the attribute value for SEASERVICE_TRANSCRIPT_EDOC_ID using the alias name SeaserviceTranscriptEdocId.
     * @return the SEASERVICE_TRANSCRIPT_EDOC_ID
     */
    public BigDecimal getSeaserviceTranscriptEdocId() {
        return (BigDecimal)getAttributeInternal(SEASERVICETRANSCRIPTEDOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SEASERVICE_TRANSCRIPT_EDOC_ID using the alias name SeaserviceTranscriptEdocId.
     * @param value value to set the SEASERVICE_TRANSCRIPT_EDOC_ID
     */
    public void setSeaserviceTranscriptEdocId(BigDecimal value) {
        setAttributeInternal(SEASERVICETRANSCRIPTEDOCID, value);
    }

    /**
     * Gets the attribute value for STATUS using the alias name Status.
     * @return the STATUS
     */
    public String getStatus() {
        return (String)getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for STATUS using the alias name Status.
     * @param value value to set the STATUS
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for VESSEL_PK using the alias name VesselPk.
     * @return the VESSEL_PK
     */
    public Integer getVesselPk() {
        return (Integer)getAttributeInternal(VESSELPK);
    }

    /**
     * Sets <code>value</code> as attribute value for VESSEL_PK using the alias name VesselPk.
     * @param value value to set the VESSEL_PK
     */
    public void setVesselPk(Integer value) {
        setAttributeInternal(VESSELPK, value);
    }

    /**
     * Gets the attribute value for WC_CITY_LIST_ID using the alias name WcCityListId.
     * @return the WC_CITY_LIST_ID
     */
    public Integer getWcCityListId() {
        return (Integer) getAttributeInternal(WCCITYLISTID);
    }

    /**
     * Sets <code>value</code> as attribute value for WC_CITY_LIST_ID using the alias name WcCityListId.
     * @param value value to set the WC_CITY_LIST_ID
     */
    public void setWcCityListId(Integer value) {
        setAttributeInternal(WCCITYLISTID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transNationality.
     * @return the transNationality
     */
//    public String gettransNationality() {
//        return (String)getAttributeInternal(TRANSNATIONALITY);
//    }
        public String gettransNationality() {
        try 
        {
            String cntryCode = null;
            String cntryName = null;
            if (getNationality() != null) {
                cntryCode = getNationality();
                Row[] cntryRows;
                cntryRows = getcountriesLOV1().getFilteredRows("CountryCode", cntryCode);
                if (cntryRows.length > 0) {
                    cntryName = cntryRows[0].getAttribute("CountryName").toString();
                }
                return cntryName;
            }
        } catch (Exception e) {
                e.printStackTrace();
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANSNATIONALITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transNationality.
     * @param value value to set the  transNationality
     */
    public void settransNationality(String value) {
        setAttributeInternal(TRANSNATIONALITY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute tranPassportCntry.
     * @return the tranPassportCntry
     */
//    public String gettranPassportCntry() {
//        return (String)getAttributeInternal(TRANPASSPORTCNTRY);
//    }
    public String gettranPassportCntry() {        String cntryCode = null;
        try 
        {
            String cntryName = null;
            if (getPassportIssuingCountryCode() != null) {
                cntryCode = getPassportIssuingCountryCode();
                Row[] cntryRows;
                cntryRows = getcountriesLOV1().getFilteredRows("CountryCode", cntryCode);
                if (cntryRows.length > 0) {
                    cntryName = cntryRows[0].getAttribute("CountryName").toString();

                }
                return cntryName;
            }
        } catch (Exception e) {
                e.printStackTrace();
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANPASSPORTCNTRY);
    }
    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute tranPassportCntry.
     * @param value value to set the  tranPassportCntry
     */
    public void settranPassportCntry(String value) {
        setAttributeInternal(TRANPASSPORTCNTRY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute tranResidenceCntry.
     * @return the tranResidenceCntry
     */
//    public String gettranResidenceCntry() {
//        return (String)getAttributeInternal(TRANRESIDENCECNTRY);
//    }
    public String gettranResidenceCntry() {
        try 
        {
            String cntryCode = null;
            String cntryName = null;
            if (getResidenceCountryCode() != null) {
                cntryCode = getResidenceCountryCode();
                Row[] cntryRows;
                cntryRows = getcountriesLOV1().getFilteredRows("CountryCode", cntryCode);
                if (cntryRows.length > 0) {
                    cntryName = cntryRows[0].getAttribute("CountryName").toString();
                }
                return cntryName;
            }
        } catch (Exception e) {
                e.printStackTrace();
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR); 
        }
            return (String) getAttributeInternal(TRANRESIDENCECNTRY);
    }
    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute tranResidenceCntry.
     * @param value value to set the  tranResidenceCntry
     */
    public void settranResidenceCntry(String value) {
        setAttributeInternal(TRANRESIDENCECNTRY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute tranVesselNo.
     * @return the tranVesselNo
     */
//    public Integer gettranVesselNo() {
//        return (Integer)getAttributeInternal(TRANVESSELNO);
//    }
    public Integer gettranVesselNo() {
        try 
        {
            Integer veselpk = null;
            Integer vesselNo = null;
            if (getVesselPk() != null) {

                veselpk = getVesselPk();
                RowSet o1 = getViewVesselRO1();

                ViewObject object = o1.getViewObject();

                object.setNamedWhereClauseParam("pVesselPk", veselpk);
                object.setNamedWhereClauseParam("pVesselImo", null);
                object.executeQuery();

                Row row = object.first();
                if (row != null) {
                    vesselNo = Integer.parseInt(row.getAttribute("ImoNumber").toString());
                }
                return vesselNo;
            }
        } catch (Exception nfe) {
                nfe.printStackTrace();
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (Integer) getAttributeInternal(TRANVESSELNO);
    }
    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute tranVesselNo.
     * @param value value to set the  tranVesselNo
     */
    public void settranVesselNo(Integer value) {
        setAttributeInternal(TRANVESSELNO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute tranVesselName.
     * @return the tranVesselName
     */
//    public String gettranVesselName() {
//        return (String)getAttributeInternal(TRANVESSELNAME);
//    }
    public String gettranVesselName() {
        try 
        {
            Integer veselpk = null;
            String vesselName = null;
            if (getVesselPk() != null) {

                veselpk = getVesselPk();
                RowSet o1 = getViewVesselRO1();

                ViewObject object = o1.getViewObject();

                object.setNamedWhereClauseParam("pVesselPk", veselpk);
                object.setNamedWhereClauseParam("pVesselImo", null);
                object.executeQuery();

                Row row = object.first();
                if (row != null) {
                    vesselName = row.getAttribute("Name").toString();
                }
                return vesselName;
            }
        } catch (Exception e) {
                e.printStackTrace();
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANVESSELNAME);
    }
    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute tranVesselName.
     * @param value value to set the  tranVesselName
     */
    public void settranVesselName(String value) {
        setAttributeInternal(TRANVESSELNAME, value);
    }

    /**
     * Gets the attribute value for INTERNAL_EDOC_ID using the alias name InternalEdocId.
     * @return the INTERNAL_EDOC_ID
     */
    public BigDecimal getInternalEdocId() {
        return (BigDecimal)getAttributeInternal(INTERNALEDOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for INTERNAL_EDOC_ID using the alias name InternalEdocId.
     * @param value value to set the INTERNAL_EDOC_ID
     */
    public void setInternalEdocId(BigDecimal value) {
        setAttributeInternal(INTERNALEDOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute tranCity.
     * @return the tranCity
     */
    public String gettranCity() {
        try 
        {
            Integer cityId = null;
            String CityName = null;
            if (getWcCityListId() != null) {
                cityId = getWcCityListId();
                RowSet cityRO = getGetCityNameByCityIdRO1();
                cityRO.setNamedWhereClauseParam("pCityId", cityId);
                cityRO.executeQuery();
                if (cityRO.getRowCount() > 0) {
                    Row frow = cityRO.first();
                    CityName = frow.getAttribute("CityName").toString();
                }
                return CityName;
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching Residence City." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANCITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute tranCity.
     * @param value value to set the  tranCity
     */
    public void settranCity(String value) {
        setAttributeInternal(TRANCITY, value);
    }

    /**
     * Gets the attribute value for DATA_VERIFIED using the alias name DataVerified.
     * @return the DATA_VERIFIED
     */
    public String getDataVerified3()
    {
        try 
        {
            if (getAttributeInternal(DATAVERIFIED3) != null)
                return (String) getAttributeInternal(DATAVERIFIED3);
            else
                return "No";
        } catch (Exception e) {
                e.printStackTrace();
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(DATAVERIFIED3);
    }

    /**
     * Sets <code>value</code> as attribute value for DATA_VERIFIED using the alias name DataVerified.
     * @param value value to set the DATA_VERIFIED
     */
    public void setDataVerified3(String value) {
        setAttributeInternal(DATAVERIFIED3, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransVesselRegDate.
     * @return the TransVesselRegDate
     */
    public Timestamp getTransVesselRegDate()
    {        
        try 
        {
            if (getAttributeInternal(TRANSVESSELREGDATE) == null && getVesselPk() != null) {
                RowSet o1 = getViewVesselRO1();
                ViewObject object = o1.getViewObject();
                object.setNamedWhereClauseParam("pVesselPk", getVesselPk());
                object.setNamedWhereClauseParam("pVesselImo", null);
                object.executeQuery();

                Row row = object.first();
                if (row != null && row.getAttribute("VsslRegDate") != null) {
                    return (Timestamp) row.getAttribute("VsslRegDate");
                }
            }
        } catch (Exception e) {
                e.printStackTrace();
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (Timestamp) getAttributeInternal(TRANSVESSELREGDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransVesselRegDate.
     * @param value value to set the  TransVesselRegDate
     */
    public void setTransVesselRegDate(Timestamp value) {
        setAttributeInternal(TRANSVESSELREGDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransVesselType.
     * @return the TransVesselType
     */
    public String getTransVesselType()
    {
        try
        {
            if (getAttributeInternal(TRANSVESSELTYPE) == null && getVesselPk() != null) {
                RowSet o1 = getViewVesselRO1();
                ViewObject object = o1.getViewObject();
                object.setNamedWhereClauseParam("pVesselPk", getVesselPk());
                object.setNamedWhereClauseParam("pVesselImo", null);
                object.executeQuery();

                Row row = object.first();
                if (row != null && row.getAttribute("VsslType") != null) {
                    return (String) row.getAttribute("VsslType");
                }
            }
        } catch (Exception e) {
                e.printStackTrace();
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANSVESSELTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransVesselType.
     * @param value value to set the  TransVesselType
     */
    public void setTransVesselType(String value) {
        setAttributeInternal(TRANSVESSELTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransVesselGrossTons.
     * @return the TransVesselGrossTons
     */
    public Integer getTransVesselGrossTons()
    {      
        try 
        {
            if (getAttributeInternal(TRANSVESSELGROSSTONS) == null && getVesselPk() != null) {
                RowSet o1 = getViewVesselRO1();
                ViewObject object = o1.getViewObject();
                object.setNamedWhereClauseParam("pVesselPk", getVesselPk());
                object.setNamedWhereClauseParam("pVesselImo", null);
                object.executeQuery();

                Row row = object.first();
                if (row != null && row.getAttribute("GrossTons") != null) {
                    return (Integer) row.getAttribute("GrossTons");
                }
            }
        } catch (Exception e) {
                e.printStackTrace();
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (Integer) getAttributeInternal(TRANSVESSELGROSSTONS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransVesselGrossTons.
     * @param value value to set the  TransVesselGrossTons
     */
    public void setTransVesselGrossTons(Integer value) {
        setAttributeInternal(TRANSVESSELGROSSTONS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransVesselPropPower.
     * @return the TransVesselPropPower
     */
    public Integer getTransVesselPropPower()
    {      
        try 
        {
            if (getAttributeInternal(TRANSVESSELPROPPOWER) == null && getVesselPk() != null) {
                RowSet o1 = getViewVesselRO1();
                ViewObject object = o1.getViewObject();
                object.setNamedWhereClauseParam("pVesselPk", getVesselPk());
                object.setNamedWhereClauseParam("pVesselImo", null);
                object.executeQuery();

                Row row = object.first();
                if (row != null && row.getAttribute("PropulsionPower") != null) {
                    return (Integer) row.getAttribute("PropulsionPower");
                }
            }
        } catch (Exception e) {
                e.printStackTrace();
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (Integer) getAttributeInternal(TRANSVESSELPROPPOWER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransVesselPropPower.
     * @param value value to set the  TransVesselPropPower
     */
    public void setTransVesselPropPower(Integer value) {
        setAttributeInternal(TRANSVESSELPROPPOWER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransVesselStatus.
     * @return the TransVesselStatus
     */
    public String getTransVesselStatus()
    {     
        try 
        {
            if (getAttributeInternal(TRANSVESSELSTATUS) == null && getVesselPk() != null) {
                RowSet o1 = getViewVesselRO1();
                ViewObject object = o1.getViewObject();
                object.setNamedWhereClauseParam("pVesselPk", getVesselPk());
                object.setNamedWhereClauseParam("pVesselImo", null);
                object.executeQuery();

                Row row = object.first();
                if (row != null && row.getAttribute("VsslStatus") != null) {
                    return (String) row.getAttribute("VsslStatus");
                }
            }
        } catch (Exception e) {
                e.printStackTrace();
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANSVESSELSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransVesselStatus.
     * @param value value to set the  TransVesselStatus
     */
    public void setTransVesselStatus(String value) {
        setAttributeInternal(TRANSVESSELSTATUS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransVesselEngineType.
     * @return the TransVesselEngineType
     */
    public String getTransVesselEngineType()
    {    
        try 
        {
            if (getAttributeInternal(TRANSVESSELENGINETYPE) == null && getVesselPk() != null) {
                RowSet o1 = getViewVesselRO1();
                ViewObject object = o1.getViewObject();
                object.setNamedWhereClauseParam("pVesselPk", getVesselPk());
                object.setNamedWhereClauseParam("pVesselImo", null);
                object.executeQuery();

                Row row = object.first();
                if (row != null && row.getAttribute("EngineType") != null) {
                    return (String) row.getAttribute("EngineType");
                }
            }
        } catch (Exception e) {
                e.printStackTrace();
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANSVESSELENGINETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransVesselEngineType.
     * @param value value to set the  TransVesselEngineType
     */
    public void setTransVesselEngineType(String value) {
        setAttributeInternal(TRANSVESSELENGINETYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransPreviousBook.
     * @return the TransPreviousBook
     */
    public Integer getTransPreviousBook()
    {
        try 
        {
            if (getAttributeInternal(TRANSPREVIOUSBOOK) == null && getPreviousBookDocumentId() != null) {
                ViewObjectImpl prvsOcVo = getAm().getPreviousBookView1();
                prvsOcVo.setNamedWhereClauseParam("pSeafarerId", getSeafarerId());
                prvsOcVo.setNamedWhereClauseParam("pDocumentId", getPreviousBookDocumentId());
                prvsOcVo.executeQuery();

                Row[] fr = prvsOcVo.getAllRowsInRange();
                if (fr.length > 0 && fr[0].getAttribute("BookNumber") != null)
                    return (Integer) fr[0].getAttribute("BookNumber");
            }
        } catch (Exception e) {
                e.printStackTrace();
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (Integer) getAttributeInternal(TRANSPREVIOUSBOOK);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransPreviousBook.
     * @param value value to set the  TransPreviousBook
     */
    public void setTransPreviousBook(Integer value) {
        setAttributeInternal(TRANSPREVIOUSBOOK, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransVesselOfficialNumber.
     * @return the TransVesselOfficialNumber
     */
    public Integer getTransVesselOfficialNumber()
    {   
        try 
        {
            if (getAttributeInternal(TRANSVESSELOFFICIALNUMBER) == null && getVesselPk() != null) {
                RowSet o1 = getViewVesselRO1();
                ViewObject object = o1.getViewObject();
                object.setNamedWhereClauseParam("pVesselPk", getVesselPk());
                object.setNamedWhereClauseParam("pVesselImo", null);
                object.executeQuery();

                Row row = object.first();
                if (row != null && row.getAttribute("OfficialNumber") != null) {
                    return (Integer) row.getAttribute("OfficialNumber");
                }
            }
        } catch (Exception e) {
                e.printStackTrace();
//            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
//                                             " Please contact your System Administrator." , 
//                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (Integer) getAttributeInternal(TRANSVESSELOFFICIALNUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransVesselOfficialNumber.
     * @param value value to set the  TransVesselOfficialNumber
     */
    public void setTransVesselOfficialNumber(Integer value) {
        setAttributeInternal(TRANSVESSELOFFICIALNUMBER, value);
    }

    /**
     * Gets the attribute value for DATA_VERIFIED_INFO using the alias name DataVerifiedInfo.
     * @return the DATA_VERIFIED_INFO
     */
    public String getDataVerifiedInfo() 
    {
        return (String) getAttributeInternal(DATAVERIFIEDINFO);
    }

    /**
     * Sets <code>value</code> as attribute value for DATA_VERIFIED_INFO using the alias name DataVerifiedInfo.
     * @param value value to set the DATA_VERIFIED_INFO
     */
    public void setDataVerifiedInfo(String value) {
        setAttributeInternal(DATAVERIFIEDINFO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransIsHistoryAvailable.
     * @return the TransIsHistoryAvailable
     */
    public String getTransIsPhotoHistoryAvailable()
    {
        try {
            if (getAttributeInternal(TRANSISPHOTOHISTORYAVAILABLE) == null && getSeafarerId() != null &&
                getEsiBatchId() != null) {
                ViewObjectImpl docVo = getAm().getRmiBatchDocumentsHistoryView1();
                docVo.setNamedWhereClauseParam("pDocCode", "0002");
                docVo.setNamedWhereClauseParam("pEsiBatchId", getEsiBatchId());
                docVo.setNamedWhereClauseParam("pSeafarerId", getSeafarerId());
                docVo.executeQuery();

                Row[] docRows = docVo.getAllRowsInRange();

                if (docRows.length > 0 && docRows[0].getAttribute("EdocId") != null)
                    return "Y";
                else
                    return "N";
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching Document upload history." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANSISPHOTOHISTORYAVAILABLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransIsHistoryAvailable.
     * @param value value to set the  TransIsHistoryAvailable
     */
    public void setTransIsPhotoHistoryAvailable(String value) {
        setAttributeInternal(TRANSISPHOTOHISTORYAVAILABLE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransIsDocsHistoryAvailable.
     * @return the TransIsDocsHistoryAvailable
     */
    public String getTransIsDocsHistoryAvailable()
    {
        try {
            if (getAttributeInternal(TRANSISDOCSHISTORYAVAILABLE) == null && getSeafarerId() != null &&
                getEsiBatchId() != null) {
                ViewObjectImpl docVo = getAm().getRmiBatchDocumentsHistoryView1();
                docVo.setNamedWhereClauseParam("pDocCode", null);
                docVo.setNamedWhereClauseParam("pEsiBatchId", getEsiBatchId());
                docVo.setNamedWhereClauseParam("pSeafarerId", getSeafarerId());
                docVo.executeQuery();

                Row[] docRows = docVo.getAllRowsInRange();

                if (docRows.length > 0 && docRows[0].getAttribute("EdocId") != null)
                    return "Y";
                else
                    return "N";
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching Document upload history." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANSISDOCSHISTORYAVAILABLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransIsDocsHistoryAvailable.
     * @param value value to set the  TransIsDocsHistoryAvailable
     */
    public void setTransIsDocsHistoryAvailable(String value) {
        setAttributeInternal(TRANSISDOCSHISTORYAVAILABLE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSeafarerStatus.
     * @return the TransSeafarerStatus
     */
    public String getTransSeafarerStatus()
    {
        try {
            if(getAttributeInternal(TRANSSEAFARERSTATUS) == null)
            {
                String roleName = (AdfFacesContext.getCurrentInstance().getPageFlowScope().get("Role_Name")).toString();
                String status = null;
                if (roleName.equalsIgnoreCase("INTERNAL AGENT - II")) {
                    status = "Pending_upload_document";
                }
                if (roleName.equalsIgnoreCase("PROCESSOR - I")) {
                    status = "Pending_TC";
                }
                if (roleName.equalsIgnoreCase("EVALUATOR")) {
                    status = "Pending_VAL";
                }
                if (roleName.equalsIgnoreCase("QA PROCESSOR")) {
                    status = "Pending_QA";
                }
                if (roleName.equalsIgnoreCase("SHIPPING USER")) {
                    status = "Pending_Shipping";
                }
                if (roleName.equalsIgnoreCase("PROCESSOR - II")) {
                    status = "Pending_ABN";
                }
                if (roleName.equalsIgnoreCase("TRADE COMPLIANCE PROCESSOR")) {
                    status = "Pending_MTC";
                }
            
                return status;
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching Seafarer status." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }

        return (String) getAttributeInternal(TRANSSEAFARERSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSeafarerStatus.
     * @param value value to set the  TransSeafarerStatus
     */
    public void setTransSeafarerStatus(String value) {
        setAttributeInternal(TRANSSEAFARERSTATUS, value);
    }

    /**
     * Gets the attribute value for SEAFARER_WF_STATUS using the alias name SeafarerWfStatus.
     * @return the SEAFARER_WF_STATUS
     */
    public String getSeafarerWfStatus() 
    {
        return (String) getAttributeInternal(SEAFARERWFSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for SEAFARER_WF_STATUS using the alias name SeafarerWfStatus.
     * @param value value to set the SEAFARER_WF_STATUS
     */
    public void setSeafarerWfStatus(String value) {
        setAttributeInternal(SEAFARERWFSTATUS, value);
    }

    /**
     * Gets the attribute value for ADDITIONAL_DOC_EDOC_ID using the alias name AdditionalDocEdocId.
     * @return the ADDITIONAL_DOC_EDOC_ID
     */
    public BigDecimal getAdditionalDocEdocId() {
        return (BigDecimal) getAttributeInternal(ADDITIONALDOCEDOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for ADDITIONAL_DOC_EDOC_ID using the alias name AdditionalDocEdocId.
     * @param value value to set the ADDITIONAL_DOC_EDOC_ID
     */
    public void setAdditionalDocEdocId(BigDecimal value) {
        setAttributeInternal(ADDITIONALDOCEDOCID, value);
    }


    /**
     * Gets the attribute value for PHOTO_GRD_HOLD_REASON using the alias name PhotoGrdHoldReason.
     * @return the PHOTO_GRD_HOLD_REASON
     */
    public String getPhotoGrdHoldReason() {
        return (String) getAttributeInternal(PHOTOGRDHOLDREASON);
    }

    /**
     * Sets <code>value</code> as attribute value for PHOTO_GRD_HOLD_REASON using the alias name PhotoGrdHoldReason.
     * @param value value to set the PHOTO_GRD_HOLD_REASON
     */
    public void setPhotoGrdHoldReason(String value)
    {
        if(getAttributeInternal(PHOTOGRDHOLDREASON) != null 
            && getAttributeInternal(PHOTOGRDHOLDREASON).toString().equalsIgnoreCase("15 - Other"))
            setAttributeInternal(PHOTOGRDCOMNT, null);
        
        setAttributeInternal(PHOTOGRDHOLDREASON, value);
    }

    /**
     * Gets the attribute value for AFFIDAVIT_GRD_HOLD_REASON using the alias name AffidavitGrdHoldReason.
     * @return the AFFIDAVIT_GRD_HOLD_REASON
     */
    public String getAffidavitGrdHoldReason() {
        return (String) getAttributeInternal(AFFIDAVITGRDHOLDREASON);
    }

    /**
     * Sets <code>value</code> as attribute value for AFFIDAVIT_GRD_HOLD_REASON using the alias name AffidavitGrdHoldReason.
     * @param value value to set the AFFIDAVIT_GRD_HOLD_REASON
     */
    public void setAffidavitGrdHoldReason(String value) 
    {
        if(getAttributeInternal(AFFIDAVITGRDHOLDREASON) != null 
            && getAttributeInternal(AFFIDAVITGRDHOLDREASON).toString().equalsIgnoreCase("15 - Other"))
            setAttributeInternal(AFFIDAVITGRDCOMNT, null);
        
        setAttributeInternal(AFFIDAVITGRDHOLDREASON, value);
    }

    /**
     * Gets the attribute value for APPLICATION_GRD_HOLD_REASON using the alias name ApplicationGrdHoldReason.
     * @return the APPLICATION_GRD_HOLD_REASON
     */
    public String getApplicationGrdHoldReason() {
        return (String) getAttributeInternal(APPLICATIONGRDHOLDREASON);
    }

    /**
     * Sets <code>value</code> as attribute value for APPLICATION_GRD_HOLD_REASON using the alias name ApplicationGrdHoldReason.
     * @param value value to set the APPLICATION_GRD_HOLD_REASON
     */
    public void setApplicationGrdHoldReason(String value)  
    {
        if(getAttributeInternal(APPLICATIONGRDHOLDREASON) != null 
            && getAttributeInternal(APPLICATIONGRDHOLDREASON).toString().equalsIgnoreCase("15 - Other"))
            setAttributeInternal(APPLICATIONGRDCOMNT, null);
        
        setAttributeInternal(APPLICATIONGRDHOLDREASON, value);
    }

    /**
     * Gets the attribute value for BOOK_GRD_HOLD_REASON using the alias name BookGrdHoldReason.
     * @return the BOOK_GRD_HOLD_REASON
     */
    public String getBookGrdHoldReason() {
        return (String) getAttributeInternal(BOOKGRDHOLDREASON);
    }

    /**
     * Sets <code>value</code> as attribute value for BOOK_GRD_HOLD_REASON using the alias name BookGrdHoldReason.
     * @param value value to set the BOOK_GRD_HOLD_REASON
     */
    public void setBookGrdHoldReason(String value) 
    {
        if(getAttributeInternal(BOOKGRDHOLDREASON) != null 
            && getAttributeInternal(BOOKGRDHOLDREASON).toString().equalsIgnoreCase("15 - Other"))
            setAttributeInternal(BOOKGRDCOMNT, null);
        
        setAttributeInternal(BOOKGRDHOLDREASON, value);
    }

    /**
     * Gets the attribute value for CON_GRD_HOLD_REASON using the alias name ConGrdHoldReason.
     * @return the CON_GRD_HOLD_REASON
     */
    public String getConGrdHoldReason() {
        return (String) getAttributeInternal(CONGRDHOLDREASON);
    }

    /**
     * Sets <code>value</code> as attribute value for CON_GRD_HOLD_REASON using the alias name ConGrdHoldReason.
     * @param value value to set the CON_GRD_HOLD_REASON
     */
    public void setConGrdHoldReason(String value) 
    {
        if(getAttributeInternal(CONGRDHOLDREASON) != null 
            && getAttributeInternal(CONGRDHOLDREASON).toString().equalsIgnoreCase("15 - Other"))
            setAttributeInternal(CONGRDCOMNT, null);
        
        setAttributeInternal(CONGRDHOLDREASON, value);
    }

    /**
     * Gets the attribute value for ID_CARD_GRD_HOLD_REASON using the alias name IdCardGrdHoldReason.
     * @return the ID_CARD_GRD_HOLD_REASON
     */
    public String getIdCardGrdHoldReason() {
        return (String) getAttributeInternal(IDCARDGRDHOLDREASON);
    }

    /**
     * Sets <code>value</code> as attribute value for ID_CARD_GRD_HOLD_REASON using the alias name IdCardGrdHoldReason.
     * @param value value to set the ID_CARD_GRD_HOLD_REASON
     */
    public void setIdCardGrdHoldReason(String value) 
    {
        if(getAttributeInternal(IDCARDGRDHOLDREASON) != null 
            && getAttributeInternal(IDCARDGRDHOLDREASON).toString().equalsIgnoreCase("15 - Other"))
            setAttributeInternal(IDCARDGRDCMNT, null);
        
        setAttributeInternal(IDCARDGRDHOLDREASON, value);
    }

    /**
     * Gets the attribute value for SEAFARER_GRD_HOLD_REASON using the alias name SeafarerGrdHoldReason.
     * @return the SEAFARER_GRD_HOLD_REASON
     */
    public String getSeafarerGrdHoldReason() {
        return (String) getAttributeInternal(SEAFARERGRDHOLDREASON);
    }

    /**
     * Sets <code>value</code> as attribute value for SEAFARER_GRD_HOLD_REASON using the alias name SeafarerGrdHoldReason.
     * @param value value to set the SEAFARER_GRD_HOLD_REASON
     */
    public void setSeafarerGrdHoldReason(String value)  
    {
        if(getAttributeInternal(SEAFARERGRDHOLDREASON) != null 
            && getAttributeInternal(SEAFARERGRDHOLDREASON).toString().equalsIgnoreCase("15 - Other"))
            setAttributeInternal(SEAFARERGRDCOMNT, null);
        
        setAttributeInternal(SEAFARERGRDHOLDREASON, value);
    }

    /**
     * Gets the attribute value for SAT_GRD_HOLD_REASON using the alias name SatGrdHoldReason.
     * @return the SAT_GRD_HOLD_REASON
     */
    public String getSatGrdHoldReason() {
        return (String) getAttributeInternal(SATGRDHOLDREASON);
    }

    /**
     * Sets <code>value</code> as attribute value for SAT_GRD_HOLD_REASON using the alias name SatGrdHoldReason.
     * @param value value to set the SAT_GRD_HOLD_REASON
     */
    public void setSatGrdHoldReason(String value)  
    {
        if(getAttributeInternal(SATGRDHOLDREASON) != null 
            && getAttributeInternal(SATGRDHOLDREASON).toString().equalsIgnoreCase("15 - Other"))
            setAttributeInternal(SATGRDCOMNT, null);
        
        setAttributeInternal(SATGRDHOLDREASON, value);
    }

    /**
     * Gets the attribute value for IDENTITY_DOC_GRD_HOLD_REASON using the alias name IdentityDocGrdHoldReason.
     * @return the IDENTITY_DOC_GRD_HOLD_REASON
     */
    public String getIdentityDocGrdHoldReason() {
        return (String) getAttributeInternal(IDENTITYDOCGRDHOLDREASON);
    }

    /**
     * Sets <code>value</code> as attribute value for IDENTITY_DOC_GRD_HOLD_REASON using the alias name IdentityDocGrdHoldReason.
     * @param value value to set the IDENTITY_DOC_GRD_HOLD_REASON
     */
    public void setIdentityDocGrdHoldReason(String value)  
    {
        if(getAttributeInternal(IDENTITYDOCGRDHOLDREASON) != null 
            && getAttributeInternal(IDENTITYDOCGRDHOLDREASON).toString().equalsIgnoreCase("15 - Other"))
            setAttributeInternal(IDENTITYDOCGRDCOMNT, null);
        
        setAttributeInternal(IDENTITYDOCGRDHOLDREASON, value);
    }

    /**
     * Gets the attribute value for PHYSICAL_GRD_HOLD_REASON using the alias name PhysicalGrdHoldReason.
     * @return the PHYSICAL_GRD_HOLD_REASON
     */
    public String getPhysicalGrdHoldReason() {
        return (String) getAttributeInternal(PHYSICALGRDHOLDREASON);
    }

    /**
     * Sets <code>value</code> as attribute value for PHYSICAL_GRD_HOLD_REASON using the alias name PhysicalGrdHoldReason.
     * @param value value to set the PHYSICAL_GRD_HOLD_REASON
     */
    public void setPhysicalGrdHoldReason(String value)  
    {
        if(getAttributeInternal(PHYSICALGRDHOLDREASON) != null 
            && getAttributeInternal(PHYSICALGRDHOLDREASON).toString().equalsIgnoreCase("15 - Other"))
            setAttributeInternal(PHYSICALGRDCOMNT, null);
        
        setAttributeInternal(PHYSICALGRDHOLDREASON, value);
    }

    /**
     * Gets the attribute value for SEASERVICE_GRD_HOLD_REASON using the alias name SeaserviceGrdHoldReason.
     * @return the SEASERVICE_GRD_HOLD_REASON
     */
    public String getSeaserviceGrdHoldReason() {
        return (String) getAttributeInternal(SEASERVICEGRDHOLDREASON);
    }

    /**
     * Sets <code>value</code> as attribute value for SEASERVICE_GRD_HOLD_REASON using the alias name SeaserviceGrdHoldReason.
     * @param value value to set the SEASERVICE_GRD_HOLD_REASON
     */
    public void setSeaserviceGrdHoldReason(String value)  
    {
        if(getAttributeInternal(SEASERVICEGRDHOLDREASON) != null 
            && getAttributeInternal(SEASERVICEGRDHOLDREASON).toString().equalsIgnoreCase("15 - Other"))
            setAttributeInternal(SEASERVICEGRDCOMNT, null);
        
        setAttributeInternal(SEASERVICEGRDHOLDREASON, value);
    }

    /**
     * Gets the attribute value for APPLICATION_VERIFIED using the alias name ApplicationVerified.
     * @return the APPLICATION_VERIFIED
     */
    public String getApplicationVerified() 
    {
        return (String) getAttributeInternal(APPLICATIONVERIFIED);
    }

    /**
     * Sets <code>value</code> as attribute value for APPLICATION_VERIFIED using the alias name ApplicationVerified.
     * @param value value to set the APPLICATION_VERIFIED
     */
    public void setApplicationVerified(String value) {
        setAttributeInternal(APPLICATIONVERIFIED, value);
    }

    /**
     * Gets the attribute value for AFFIDAVIT_VERIFIED using the alias name AffidavitVerified.
     * @return the AFFIDAVIT_VERIFIED
     */
    public String getAffidavitVerified()  
    {
        return (String) getAttributeInternal(AFFIDAVITVERIFIED);
    }

    /**
     * Sets <code>value</code> as attribute value for AFFIDAVIT_VERIFIED using the alias name AffidavitVerified.
     * @param value value to set the AFFIDAVIT_VERIFIED
     */
    public void setAffidavitVerified(String value) {
        setAttributeInternal(AFFIDAVITVERIFIED, value);
    }

    /**
     * Gets the attribute value for BOOK_VERIFIED using the alias name BookVerified.
     * @return the BOOK_VERIFIED
     */
    public String getBookVerified()   
    {
        return (String) getAttributeInternal(BOOKVERIFIED);
    }

    /**
     * Sets <code>value</code> as attribute value for BOOK_VERIFIED using the alias name BookVerified.
     * @param value value to set the BOOK_VERIFIED
     */
    public void setBookVerified(String value) {
        setAttributeInternal(BOOKVERIFIED, value);
    }

    /**
     * Gets the attribute value for CON_VERIFIED using the alias name ConVerified.
     * @return the CON_VERIFIED
     */
    public String getConVerified()    
    {
        return (String) getAttributeInternal(CONVERIFIED);
    }

    /**
     * Sets <code>value</code> as attribute value for CON_VERIFIED using the alias name ConVerified.
     * @param value value to set the CON_VERIFIED
     */
    public void setConVerified(String value) {
        setAttributeInternal(CONVERIFIED, value);
    }

    /**
     * Gets the attribute value for ID_CARD_VERIFIED using the alias name IdCardVerified.
     * @return the ID_CARD_VERIFIED
     */
    public String getIdCardVerified()     
    {
        return (String) getAttributeInternal(IDCARDVERIFIED);
    }

    /**
     * Sets <code>value</code> as attribute value for ID_CARD_VERIFIED using the alias name IdCardVerified.
     * @param value value to set the ID_CARD_VERIFIED
     */
    public void setIdCardVerified(String value) {
        setAttributeInternal(IDCARDVERIFIED, value);
    }

    /**
     * Gets the attribute value for IDENTITY_DOC_VERIFIED using the alias name IdentityDocVerified.
     * @return the IDENTITY_DOC_VERIFIED
     */
    public String getIdentityDocVerified()      
    {
        return (String) getAttributeInternal(IDENTITYDOCVERIFIED);
    }

    /**
     * Sets <code>value</code> as attribute value for IDENTITY_DOC_VERIFIED using the alias name IdentityDocVerified.
     * @param value value to set the IDENTITY_DOC_VERIFIED
     */
    public void setIdentityDocVerified(String value) {
        setAttributeInternal(IDENTITYDOCVERIFIED, value);
    }

    /**
     * Gets the attribute value for PHOTO_VERIFIED using the alias name PhotoVerified.
     * @return the PHOTO_VERIFIED
     */
    public String getPhotoVerified()      
    {
        return (String) getAttributeInternal(PHOTOVERIFIED);
    }

    /**
     * Sets <code>value</code> as attribute value for PHOTO_VERIFIED using the alias name PhotoVerified.
     * @param value value to set the PHOTO_VERIFIED
     */
    public void setPhotoVerified(String value) {
        setAttributeInternal(PHOTOVERIFIED, value);
    }

    /**
     * Gets the attribute value for PHYSICAL_VERIFIED using the alias name PhysicalVerified.
     * @return the PHYSICAL_VERIFIED
     */
    public String getPhysicalVerified()       
    {
        return (String) getAttributeInternal(PHYSICALVERIFIED);
    }

    /**
     * Sets <code>value</code> as attribute value for PHYSICAL_VERIFIED using the alias name PhysicalVerified.
     * @param value value to set the PHYSICAL_VERIFIED
     */
    public void setPhysicalVerified(String value) {
        setAttributeInternal(PHYSICALVERIFIED, value);
    }

    /**
     * Gets the attribute value for SAT_VERIFIED using the alias name SatVerified.
     * @return the SAT_VERIFIED
     */
    public String getSatVerified()        
    {
        return (String) getAttributeInternal(SATVERIFIED);
    }

    /**
     * Sets <code>value</code> as attribute value for SAT_VERIFIED using the alias name SatVerified.
     * @param value value to set the SAT_VERIFIED
     */
    public void setSatVerified(String value) {
        setAttributeInternal(SATVERIFIED, value);
    }

    /**
     * Gets the attribute value for SEAFARER_VERIFIED using the alias name SeafarerVerified.
     * @return the SEAFARER_VERIFIED
     */
    public String getSeafarerVerified()         
    {
        return (String) getAttributeInternal(SEAFARERVERIFIED);
    }

    /**
     * Sets <code>value</code> as attribute value for SEAFARER_VERIFIED using the alias name SeafarerVerified.
     * @param value value to set the SEAFARER_VERIFIED
     */
    public void setSeafarerVerified(String value) {
        setAttributeInternal(SEAFARERVERIFIED, value);
    }

    /**
     * Gets the attribute value for SEASERVICE_VERIFIED using the alias name SeaserviceVerified.
     * @return the SEASERVICE_VERIFIED
     */
    public String getSeaserviceVerified()         
    {
        return (String) getAttributeInternal(SEASERVICEVERIFIED);
    }

    /**
     * Sets <code>value</code> as attribute value for SEASERVICE_VERIFIED using the alias name SeaserviceVerified.
     * @param value value to set the SEASERVICE_VERIFIED
     */
    public void setSeaserviceVerified(String value) {
        setAttributeInternal(SEASERVICEVERIFIED, value);
    }

    /**
     * Gets the attribute value for CON_VERIFIED_COMNT using the alias name ConVerifiedComnt.
     * @return the CON_VERIFIED_COMNT
     */
    public String getConVerifiedComnt() {
        return (String) getAttributeInternal(CONVERIFIEDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for CON_VERIFIED_COMNT using the alias name ConVerifiedComnt.
     * @param value value to set the CON_VERIFIED_COMNT
     */
    public void setConVerifiedComnt(String value) {
        setAttributeInternal(CONVERIFIEDCOMNT, value);
    }

    /**
     * Gets the attribute value for BOOK_VERIFIED_COMNT using the alias name BookVerifiedComnt.
     * @return the BOOK_VERIFIED_COMNT
     */
    public String getBookVerifiedComnt() {
        return (String) getAttributeInternal(BOOKVERIFIEDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for BOOK_VERIFIED_COMNT using the alias name BookVerifiedComnt.
     * @param value value to set the BOOK_VERIFIED_COMNT
     */
    public void setBookVerifiedComnt(String value) {
        setAttributeInternal(BOOKVERIFIEDCOMNT, value);
    }

    /**
     * Gets the attribute value for ID_CARD_VERIFIED_COMNT using the alias name IdCardVerifiedComnt.
     * @return the ID_CARD_VERIFIED_COMNT
     */
    public String getIdCardVerifiedComnt() {
        return (String) getAttributeInternal(IDCARDVERIFIEDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for ID_CARD_VERIFIED_COMNT using the alias name IdCardVerifiedComnt.
     * @param value value to set the ID_CARD_VERIFIED_COMNT
     */
    public void setIdCardVerifiedComnt(String value) {
        setAttributeInternal(IDCARDVERIFIEDCOMNT, value);
    }

    /**
     * Gets the attribute value for APPLICATION_VERIFIED_COMNT using the alias name ApplicationVerifiedComnt.
     * @return the APPLICATION_VERIFIED_COMNT
     */
    public String getApplicationVerifiedComnt() {
        return (String) getAttributeInternal(APPLICATIONVERIFIEDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for APPLICATION_VERIFIED_COMNT using the alias name ApplicationVerifiedComnt.
     * @param value value to set the APPLICATION_VERIFIED_COMNT
     */
    public void setApplicationVerifiedComnt(String value) {
        setAttributeInternal(APPLICATIONVERIFIEDCOMNT, value);
    }

    /**
     * Gets the attribute value for AFFIDAVIT_VERIFIED_COMNT using the alias name AffidavitVerifiedComnt.
     * @return the AFFIDAVIT_VERIFIED_COMNT
     */
    public String getAffidavitVerifiedComnt() {
        return (String) getAttributeInternal(AFFIDAVITVERIFIEDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for AFFIDAVIT_VERIFIED_COMNT using the alias name AffidavitVerifiedComnt.
     * @param value value to set the AFFIDAVIT_VERIFIED_COMNT
     */
    public void setAffidavitVerifiedComnt(String value) {
        setAttributeInternal(AFFIDAVITVERIFIEDCOMNT, value);
    }

    /**
     * Gets the attribute value for IDENTITY_DOC_VERIFIED_COMNT using the alias name IdentityDocVerifiedComnt.
     * @return the IDENTITY_DOC_VERIFIED_COMNT
     */
    public String getIdentityDocVerifiedComnt() {
        return (String) getAttributeInternal(IDENTITYDOCVERIFIEDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for IDENTITY_DOC_VERIFIED_COMNT using the alias name IdentityDocVerifiedComnt.
     * @param value value to set the IDENTITY_DOC_VERIFIED_COMNT
     */
    public void setIdentityDocVerifiedComnt(String value) {
        setAttributeInternal(IDENTITYDOCVERIFIEDCOMNT, value);
    }

    /**
     * Gets the attribute value for PHOTO_VERIFIED_COMNT using the alias name PhotoVerifiedComnt.
     * @return the PHOTO_VERIFIED_COMNT
     */
    public String getPhotoVerifiedComnt() {
        return (String) getAttributeInternal(PHOTOVERIFIEDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for PHOTO_VERIFIED_COMNT using the alias name PhotoVerifiedComnt.
     * @param value value to set the PHOTO_VERIFIED_COMNT
     */
    public void setPhotoVerifiedComnt(String value) {
        setAttributeInternal(PHOTOVERIFIEDCOMNT, value);
    }

    /**
     * Gets the attribute value for PHYSICAL_VERIFIED_COMNT using the alias name PhysicalVerifiedComnt.
     * @return the PHYSICAL_VERIFIED_COMNT
     */
    public String getPhysicalVerifiedComnt() {
        return (String) getAttributeInternal(PHYSICALVERIFIEDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for PHYSICAL_VERIFIED_COMNT using the alias name PhysicalVerifiedComnt.
     * @param value value to set the PHYSICAL_VERIFIED_COMNT
     */
    public void setPhysicalVerifiedComnt(String value) {
        setAttributeInternal(PHYSICALVERIFIEDCOMNT, value);
    }

    /**
     * Gets the attribute value for SAT_VERIFIED_COMNT using the alias name SatVerifiedComnt.
     * @return the SAT_VERIFIED_COMNT
     */
    public String getSatVerifiedComnt() {
        return (String) getAttributeInternal(SATVERIFIEDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for SAT_VERIFIED_COMNT using the alias name SatVerifiedComnt.
     * @param value value to set the SAT_VERIFIED_COMNT
     */
    public void setSatVerifiedComnt(String value) {
        setAttributeInternal(SATVERIFIEDCOMNT, value);
    }

    /**
     * Gets the attribute value for SEASERVICE_VERIFIED_COMNT using the alias name SeaserviceVerifiedComnt.
     * @return the SEASERVICE_VERIFIED_COMNT
     */
    public String getSeaserviceVerifiedComnt() {
        return (String) getAttributeInternal(SEASERVICEVERIFIEDCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for SEASERVICE_VERIFIED_COMNT using the alias name SeaserviceVerifiedComnt.
     * @param value value to set the SEASERVICE_VERIFIED_COMNT
     */
    public void setSeaserviceVerifiedComnt(String value) {
        setAttributeInternal(SEASERVICEVERIFIEDCOMNT, value);
    }

    /**
     * Gets the attribute value for DATA_VERIFIED_INFO_COMNT using the alias name DataVerifiedInfoComnt.
     * @return the DATA_VERIFIED_INFO_COMNT
     */
    public String getDataVerifiedInfoComnt() {
        return (String) getAttributeInternal(DATAVERIFIEDINFOCOMNT);
    }

    /**
     * Sets <code>value</code> as attribute value for DATA_VERIFIED_INFO_COMNT using the alias name DataVerifiedInfoComnt.
     * @param value value to set the DATA_VERIFIED_INFO_COMNT
     */
    public void setDataVerifiedInfoComnt(String value) {
        setAttributeInternal(DATAVERIFIEDINFOCOMNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCraDoc.
     * @return the TransCraDoc
     */
    public String getTransCraDoc() 
    {
        try {
            if (getAttributeInternal(TRANSISDOCSHISTORYAVAILABLE) == null && getSeafarerId() != null &&
                getEsiBatchId() != null) {
                ViewObjectImpl craVo = getAm().getCraCountView1();
                craVo.setNamedWhereClauseParam("pEsiBatchId", getEsiBatchId());
                craVo.setNamedWhereClauseParam("pEsiId", getEsiId());
                craVo.executeQuery();

                Row[] craRows = craVo.getAllRowsInRange();

                if (craRows.length > 0 && craRows[0].getAttribute("CraCount") != null)
                {                    
                    return (craRows[0].getAttribute("CraCount").toString());
                }
                else
                    return "N";
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching Document upload history." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANSCRADOC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCraDoc.
     * @param value value to set the  TransCraDoc
     */
    public void setTransCraDoc(String value) {
        setAttributeInternal(TRANSCRADOC, value);
    }

    /**
     * Gets the attribute value for CRA_APPROVAL_FLAG using the alias name CraApprovalFlag.
     * @return the CRA_APPROVAL_FLAG
     */
    public String getCraApprovalFlag() {
        return (String) getAttributeInternal(CRAAPPROVALFLAG);
    }

    /**
     * Sets <code>value</code> as attribute value for CRA_APPROVAL_FLAG using the alias name CraApprovalFlag.
     * @param value value to set the CRA_APPROVAL_FLAG
     */
    public void setCraApprovalFlag(String value) {
        setAttributeInternal(CRAAPPROVALFLAG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransBatchStatus.
     * @return the TransBatchStatus
     */
    public String getTransBatchStatus()
    {

        try {
            if (getAttributeInternal(TRANSBATCHSTATUS) == null) {
                ViewObjectImpl batchVo = getAm().getRmiBatchView2();

                Row batchRow = batchVo.getCurrentRow();

                if (batchRow != null && batchRow.getAttribute("BatchStatus") != null)
                {                    
                    return (batchRow.getAttribute("BatchStatus").toString().equalsIgnoreCase("Resubmitted"))
                            ? "Y" : "N";
                }
                else
                    return "N";
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching Batch Status." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANSBATCHSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransBatchStatus.
     * @param value value to set the  TransBatchStatus
     */
    public void setTransBatchStatus(String value) {
        setAttributeInternal(TRANSBATCHSTATUS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOcCorrected.
     * @return the TransOcCorrected
     */
    public String getTransOcCorrected()
    {
        try 
        {
            ViewObjectImpl ocVo = getAm().getRmiSeafarerDocsOcView1();
            RowQualifier rq = new RowQualifier(ocVo);
            rq.setWhereClause("GradingStatus = 'Hold' or DataVerified = 'No'");
            Row[] ocRows = ocVo.getFilteredRows(rq);
            return (ocRows.length > 0) ? "Y" : "N";
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching OC Hold count." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANSOCCORRECTED);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOcCorrected.
     * @param value value to set the  TransOcCorrected
     */
    public void setTransOcCorrected(String value){
        setAttributeInternal(TRANSOCCORRECTED, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSqcCorrected.
     * @return the TransSqcCorrected
     */
    public String getTransSqcCorrected()
    {
        try 
        {  
//            System.out.println(getBookGrdStatus().toString()+"--------book status");
            if(((getBookGrdStatus() != null) && (getBookGrdStatus().toString().equalsIgnoreCase("rejected") ||  getBookGrdStatus().toString().equalsIgnoreCase("hold")))
                || ((getIdCardGrdStatus() != null) && (getIdCardGrdStatus().toString().equalsIgnoreCase("rejected") ||  getIdCardGrdStatus().toString().equalsIgnoreCase("hold"))))
            {
                return "Y";   
            }
            ViewObjectImpl sqcVo = getAm().getRmiSeafarerDocsSqcView1();
            RowQualifier rq = new RowQualifier(sqcVo);
            rq.setWhereClause("GradingStatus3 = 'Hold' or DataVerified1 = 'No'");
            Row[] sqcRows = sqcVo.getFilteredRows(rq);
            return (sqcRows.length > 0) ? "Y" : "N";
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching SQC Hold count." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANSSQCCORRECTED);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSqcCorrected.
     * @param value value to set the  TransSqcCorrected
     */
    public void setTransSqcCorrected(String value) {
        setAttributeInternal(TRANSSQCCORRECTED, value);
    }

    /**
     * Gets the attribute value for BOOK_REPLACEMENT_ISSUE_TYPE using the alias name BookReplacementIssueType.
     * @return the BOOK_REPLACEMENT_ISSUE_TYPE
     */
    public String getBookReplacementIssueType() 
    {
        if(getAttributeInternal(BOOKREPLACEMENTISSUETYPE) != null)
            return (String)getAttributeInternal(BOOKREPLACEMENTISSUETYPE);
        else
        {
            setAttributeInternal(BOOKREPLACEMENTISSUETYPE, "RP");
            return "RP";
        }
    }

    /**
     * Sets <code>value</code> as attribute value for BOOK_REPLACEMENT_ISSUE_TYPE using the alias name BookReplacementIssueType.
     * @param value value to set the BOOK_REPLACEMENT_ISSUE_TYPE
     */
    public void setBookReplacementIssueType(String value) {
        setAttributeInternal(BOOKREPLACEMENTISSUETYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransApproveAll.
     * @return the TransApproveAll
     */
    public String getTransApproveAll() {
        return (String) getAttributeInternal(TRANSAPPROVEALL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransApproveAll.
     * @param value value to set the  TransApproveAll
     */
    public void setTransApproveAll(String value) {
        setAttributeInternal(TRANSAPPROVEALL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransVesselPropulsionCode.
     * @return the TransVesselPropulsionCode
     */
    public String getTransVesselPropulsionCode() 
    { 
        try 
        {
          if (getAttributeInternal(TRANSVESSELPROPULSIONCODE) == null && getVesselPk() != null) {
             RowSet o1 =getViewVesselRO1();
            ViewObject object = o1.getViewObject();
                           object.setNamedWhereClauseParam("pVesselPk", getVesselPk());
                           object.setNamedWhereClauseParam("pVesselImo", null);
                           object.executeQuery();
            Row row = object.first();
           // System.err.println("==GET=="+row.getAttribute("PropulsionCode"));
            if (row != null && row.getAttribute("PropulsionCode") != null) {
            return (String) row.getAttribute("PropulsionCode");
        }
        
                  }
              } catch (Exception e) {
                      e.printStackTrace();
//                  AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
//                                                   " Please contact your System Administrator." , 
//                                                   "", FacesMessage.SEVERITY_ERROR); 
              }
        return (String) getAttributeInternal(TRANSVESSELPROPULSIONCODE);
    }


    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransVesselPropulsionCode.
     * @param value value to set the  TransVesselPropulsionCode
     */
    public void setTransVesselPropulsionCode(String value) {
        setAttributeInternal(TRANSVESSELPROPULSIONCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCompCode.
     * @return the TransCompCode
     */
    public String getTransCompCode() {
        try 
        {
          if (getAttributeInternal(TRANSCOMPCODE) == null && getVesselPk() != null) {
             RowSet o1 =getViewVesselRO1();
            ViewObject object = o1.getViewObject();
                           object.setNamedWhereClauseParam("pVesselPk", getVesselPk());
                           object.setNamedWhereClauseParam("pVesselImo", null);
                           object.executeQuery();
            Row row = object.first();
            System.err.println("==GET=="+row.getAttribute("CompCode"));
            if (row != null && row.getAttribute("CompCode") != null) {
            return (String) row.getAttribute("CompCode");
        }
        
                  }
              } catch (Exception e) {
                      e.printStackTrace();
//                  AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
//                                                   " Please contact your System Administrator." , 
//                                                   "", FacesMessage.SEVERITY_ERROR); 
              }
        return (String) getAttributeInternal(TRANSCOMPCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCompCode.
     * @param value value to set the  TransCompCode
     */
    public void setTransCompCode(String value) {
        setAttributeInternal(TRANSCOMPCODE, value);
    }

    /**
     * Gets the attribute value for BOOK_ISSUE_TYPE_UPD using the alias name BookIssueTypeUpd.
     * @return the BOOK_ISSUE_TYPE_UPD
     */
    public String getBookIssueTypeUpd() {
        return (String) getAttributeInternal(BOOKISSUETYPEUPD);
    }

    /**
     * Sets <code>value</code> as attribute value for BOOK_ISSUE_TYPE_UPD using the alias name BookIssueTypeUpd.
     * @param value value to set the BOOK_ISSUE_TYPE_UPD
     */
    public void setBookIssueTypeUpd(String value) {
        setAttributeInternal(BOOKISSUETYPEUPD, value);
    }

    /**
     * Gets the attribute value for BOOK_ISSUE_TYPE_UPD_DT using the alias name BookIssueTypeUpdDt.
     * @return the BOOK_ISSUE_TYPE_UPD_DT
     */
    public Timestamp getBookIssueTypeUpdDt() {
        return (Timestamp) getAttributeInternal(BOOKISSUETYPEUPDDT);
    }

    /**
     * Sets <code>value</code> as attribute value for BOOK_ISSUE_TYPE_UPD_DT using the alias name BookIssueTypeUpdDt.
     * @param value value to set the BOOK_ISSUE_TYPE_UPD_DT
     */
    public void setBookIssueTypeUpdDt(Timestamp value) {
        setAttributeInternal(BOOKISSUETYPEUPDDT, value);
    }

    /**
     * Gets the attribute value for IDCARD_ISSUE_TYPE_UPD using the alias name IdcardIssueTypeUpd.
     * @return the IDCARD_ISSUE_TYPE_UPD
     */
    public String getIdcardIssueTypeUpd() {
        return (String) getAttributeInternal(IDCARDISSUETYPEUPD);
    }

    /**
     * Sets <code>value</code> as attribute value for IDCARD_ISSUE_TYPE_UPD using the alias name IdcardIssueTypeUpd.
     * @param value value to set the IDCARD_ISSUE_TYPE_UPD
     */
    public void setIdcardIssueTypeUpd(String value) {
        setAttributeInternal(IDCARDISSUETYPEUPD, value);
    }

    /**
     * Gets the attribute value for IDCARD_ISSUE_TYPE_UPD_DT using the alias name IdcardIssueTypeUpdDt.
     * @return the IDCARD_ISSUE_TYPE_UPD_DT
     */
    public Timestamp getIdcardIssueTypeUpdDt() {
        return (Timestamp) getAttributeInternal(IDCARDISSUETYPEUPDDT);
    }

    /**
     * Sets <code>value</code> as attribute value for IDCARD_ISSUE_TYPE_UPD_DT using the alias name IdcardIssueTypeUpdDt.
     * @param value value to set the IDCARD_ISSUE_TYPE_UPD_DT
     */
    public void setIdcardIssueTypeUpdDt(Timestamp value) {
        setAttributeInternal(IDCARDISSUETYPEUPDDT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTcStatus.
     * @return the TransTcStatus
     */
    public String getTransTcStatus() 
    {
        try 
        {
                String tcStatus = getAm().callProcedure();
//                System.out.println("tcStatus :: "+tcStatus);
                String[] arrSplit = (tcStatus != null) ? tcStatus.split(",") : null;
                if (arrSplit.length > 0) {
                    setAttributeInternal(TRANSTCSTATUS, arrSplit[0]);
                    
                    if (arrSplit.length > 1)
                        setAttributeInternal(TRANSTCSTATUSDATE, arrSplit[1]);
                } else {
                    setAttributeInternal(TRANSTCSTATUS, "Not Available");
                    setAttributeInternal(TRANSTCSTATUSDATE, null);
                }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching TC Status." +
                                                     " Please contact your System Administrator." , 
                                                     "", FacesMessage.SEVERITY_ERROR); 
        }
        
        return (String) getAttributeInternal(TRANSTCSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTcStatus.
     * @param value value to set the  TransTcStatus
     */
    public void setTransTcStatus(String value) {
        setAttributeInternal(TRANSTCSTATUS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTcStatusDate.
     * @return the TransTcStatusDate
     */
    public String getTransTcStatusDate() 
    {
        try 
        {
//            if (getAttributeInternal(TRANSTCSTATUSDATE) != null)
//                return (String) getAttributeInternal(TRANSTCSTATUSDATE);
//            else {
//                String tcStatus = getAm().callProcedure();
////                System.out.println("tcStatus :: "+tcStatus);
//                String[] arrSplit = (tcStatus != null) ? tcStatus.split(",") : null;
//                if (arrSplit.length > 1) {
//                    setAttributeInternal(TRANSTCSTATUS, arrSplit[0]);
//                    setAttributeInternal(TRANSTCSTATUSDATE, arrSplit[1]);
//                } else {
//                    setAttributeInternal(TRANSTCSTATUS, "Not Available");
//                    setAttributeInternal(TRANSTCSTATUSDATE, "Not Available");
//                }
//            }
        } catch (Exception e) {
            e.printStackTrace();
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching TC Status date." +
                                                     " Please contact your System Administrator." , 
                                                     "", FacesMessage.SEVERITY_ERROR); 
        }
        
        return (String) getAttributeInternal(TRANSTCSTATUSDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTcStatusDate.
     * @param value value to set the  TransTcStatusDate
     */
    public void setTransTcStatusDate(String value) {
        setAttributeInternal(TRANSTCSTATUSDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransUpdateSeafarerId.
     * @return the TransUpdateSeafarerId
     */
    public Integer getTransUpdateSeafarerId() {
        return (Integer) getAttributeInternal(TRANSUPDATESEAFARERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransUpdateSeafarerId.
     * @param value value to set the  TransUpdateSeafarerId
     */
    public void setTransUpdateSeafarerId(Integer value) {
        setAttributeInternal(TRANSUPDATESEAFARERID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransConcRequestId.
     * @return the TransConcRequestId
     */
    public Integer getTransConcRequestId() {
        return (Integer) getAttributeInternal(TRANSCONCREQUESTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransConcRequestId.
     * @param value value to set the  TransConcRequestId
     */
    public void setTransConcRequestId(Integer value) {
        setAttributeInternal(TRANSCONCREQUESTID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransColorCode.
     * @return the TransColorCode
     */
    public String getTransColorCode()
    {
//        System.out.println("P_CONC_REQUEST_ID in rowimpl :: "+ADFContext.getCurrent().getSessionScope().get("P_CONC_REQUEST_ID"));
        
        ViewObjectImpl concReqStatusVo = getAm().getConcRequestStatusView1();
        concReqStatusVo.setNamedWhereClauseParam("pRequestId", ADFContext.getCurrent().getSessionScope().get("P_CONC_REQUEST_ID"));
        concReqStatusVo.executeQuery();
        
        Row[] concReqStatusRows = concReqStatusVo.getAllRowsInRange();
        
        if(concReqStatusRows.length> 0)
        {
            Row r = concReqStatusRows[0];
            
//            System.out.println("PhaseCode :: "+r.getAttribute("PhaseCode"));
//            System.out.println("StatusCode :: "+r.getAttribute("StatusCode"));
//            
            if ("P".equals(r.getAttribute("PhaseCode").toString()))
                return "background:#95f995 !important;color:black;";
//                ADFContext.getCurrent().getSessionScope().put("P_COLOR_CODE", "background:#95f995 !important;color:black;");
//                vwSfrrRow.setAttribute("TransColorCode", "background:#95f995 !important;color:black;");
            else if (!"CDX".contains(r.getAttribute("PhaseCode").toString()))
                return "background:#95f995 !important;color:black;";
//                ADFContext.getCurrent().getSessionScope().put("P_COLOR_CODE", "background:#95f995 !important;color:black;");
//                vwSfrrRow.setAttribute("TransColorCode", "background:#95f995 !important;color:black;");
            else if ("E".equals(r.getAttribute("StatusCode").toString()))
                return "background:#f7a1a1 !important;color:black;";
//                ADFContext.getCurrent().getSessionScope().put("P_COLOR_CODE", "background:#f7a1a1 !important;color:black;");
//                vwSfrrRow.setAttribute("TransColorCode", "background:#f7a1a1 !important;color:black;");
            else 
            {
                ADFContext.getCurrent().getSessionScope().put("P_CONC_REQUEST_ID", null);
                return null;
            }
//                ADFContext.getCurrent().getSessionScope().put("P_COLOR_CODE", "");
//                vwSfrrRow.setAttribute("TransColorCode", "");
        }
        
        return (String) getAttributeInternal(TRANSCOLORCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransColorCode.
     * @param value value to set the  TransColorCode
     */
    public void setTransColorCode(String value) {
        setAttributeInternal(TRANSCOLORCODE, value);
    }

    /**
     * Gets the attribute value for ACK_CONC_REQ_ID using the alias name AckConcReqId.
     * @return the ACK_CONC_REQ_ID
     */
    public Integer getAckConcReqId() {
        return (Integer) getAttributeInternal(ACKCONCREQID);
    }

    /**
     * Sets <code>value</code> as attribute value for ACK_CONC_REQ_ID using the alias name AckConcReqId.
     * @param value value to set the ACK_CONC_REQ_ID
     */
    public void setAckConcReqId(Integer value) {
        setAttributeInternal(ACKCONCREQID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransAckColorCode.
     * @return the TransAckColorCode
     */
    public String getTransAckColorCode() 
    {
        if(this.getAckConcReqId()!= null)
        {
            ViewObjectImpl concReqStatusVo = getAm().getConcRequestStatusView1();
            concReqStatusVo.setNamedWhereClauseParam("pRequestId", getAckConcReqId());
            concReqStatusVo.executeQuery();
            
            System.out.println("requestID :: "+getAckConcReqId());
            
            Row[] concReqStatusRows = concReqStatusVo.getAllRowsInRange();
            
            if(concReqStatusRows.length> 0)
            {
                Row r = concReqStatusRows[0];
                
                System.out.println("PhaseCode :: "+r.getAttribute("PhaseCode"));
                
                if ("P".equals(r.getAttribute("PhaseCode").toString()))
                    return "background:#95f995 !important;color:black;";
                else if (!"CDX".contains(r.getAttribute("PhaseCode").toString()))
                    return "background:#95f995 !important;color:black;";
                else if ("E".equals(r.getAttribute("StatusCode").toString()))
                    return "background:#f7a1a1 !important;color:black;";
                else
                    return null;
            }
        }
        
        return (String) getAttributeInternal(TRANSACKCOLORCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransAckColorCode.
     * @param value value to set the  TransAckColorCode
     */
    public void setTransAckColorCode(String value) {
        setAttributeInternal(TRANSACKCOLORCODE, value);
    }

    /**
     * Gets the attribute value for REPLACEMENT_ISSUE_TYPE using the alias name ReplacementIssueType.
     * @return the REPLACEMENT_ISSUE_TYPE
     */
    public String getReplacementIssueType() {
        return (String) getAttributeInternal(REPLACEMENTISSUETYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for REPLACEMENT_ISSUE_TYPE using the alias name ReplacementIssueType.
     * @param value value to set the REPLACEMENT_ISSUE_TYPE
     */
    public void setReplacementIssueType(String value) {
        setAttributeInternal(REPLACEMENTISSUETYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransPreviousIdCard.
     * @return the TransPreviousIdCard
     */
    public Integer getTransPreviousIdCard() 
    {
        try 
        {
            if (getAttributeInternal(TRANSPREVIOUSIDCARD) == null && getPreviousIdCardDocumentId() != null) {
                ViewObjectImpl prvsIdCardVo = getAm().getPreviousIdCardView1();
                prvsIdCardVo.setNamedWhereClauseParam("pSeafarerId", getSeafarerId());
                prvsIdCardVo.setNamedWhereClauseParam("pDocumentId", getPreviousIdCardDocumentId());
                prvsIdCardVo.executeQuery();

                Row[] fr = prvsIdCardVo.getAllRowsInRange();
                if (fr.length > 0 && fr[0].getAttribute("BookNumber") != null)
                    return (Integer) fr[0].getAttribute("BookNumber");
            }
        } catch (Exception e) {
                e.printStackTrace();
        //            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
        //                                             " Please contact your System Administrator." ,
        //                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return (Integer) getAttributeInternal(TRANSPREVIOUSIDCARD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransPreviousIdCard.
     * @param value value to set the  TransPreviousIdCard
     */
    public void setTransPreviousIdCard(Integer value) {
        setAttributeInternal(TRANSPREVIOUSIDCARD, value);
    }

    /**
     * Gets the attribute value for SEAFARER_VLDT_FLAG using the alias name SeafarerVldtFlag.
     * @return the SEAFARER_VLDT_FLAG
     */
    public String getSeafarerVldtFlag() {
        return (String) getAttributeInternal(SEAFARERVLDTFLAG);
    }

    /**
     * Sets <code>value</code> as attribute value for SEAFARER_VLDT_FLAG using the alias name SeafarerVldtFlag.
     * @param value value to set the SEAFARER_VLDT_FLAG
     */
    public void setSeafarerVldtFlag(String value) {
        setAttributeInternal(SEAFARERVLDTFLAG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransUploadedDocsCorrected.
     * @return the TransUploadedDocsCorrected
     */
    public String getTransUploadedDocsCorrected() 
    {
        if (getPhotoGrdStatus() != null) 
        {
            if (getPhotoGrdStatus().equalsIgnoreCase("Hold")) {
                return "Y";
            }            
            if (getPhotoVerified().equalsIgnoreCase("No")) {
                return "Y";
            }
        }
        
        if (getIdentityDocGrdStatus() != null) 
        {
            if (getIdentityDocGrdStatus().equalsIgnoreCase("Hold")) {
                return "Y";
            }            
            if (getPhotoVerified().equalsIgnoreCase("No")) {
                return "Y";
            }
        }
        
        if (getApplicationGrdStatus() != null) 
        {
            if (getApplicationGrdStatus().equalsIgnoreCase("Hold")) {
                return "Y";
            }            
            if (getApplicationVerified().equalsIgnoreCase("No")) {
                return "Y";
            }
        }
        
        if (getAffidavitGrdStatus() != null) 
        {
            if (getAffidavitGrdStatus().equalsIgnoreCase("Hold")) {
                return "Y";
            }           
            if (getAffidavitVerified().equalsIgnoreCase("No")) {
                return "Y";
            }
        }
        
        if (getPhysicalGrdStatus() != null) 
        {
            if (getPhysicalGrdStatus().equalsIgnoreCase("Hold")) {
                return "Y";
            }           
            if (getPhysicalVerified().equalsIgnoreCase("No")) {
                return "Y";
            }
        }
        
        if (getSeaserviceGrdStatus() != null) 
        {
            if (getSeaserviceGrdStatus().equalsIgnoreCase("Hold")) {
                return "Y";
            }           
            if (getSeaserviceVerified().equalsIgnoreCase("No")) {
                return "Y";
            }
        }
        
        if (getSatGrdStatus() != null) 
        {
            if (getSatGrdStatus().equalsIgnoreCase("Hold")) {
                return "Y";
            }           
            if (getSatVerified().equalsIgnoreCase("No")) {
                return "Y";
            }
        }
        
        if (getConGrdStatus() != null) 
        {
            if (getConGrdStatus().equalsIgnoreCase("Hold")) {
                return "Y";
            }           
            if (getConVerified().equalsIgnoreCase("No")) {
                return "Y";
            }
        }
        
        return "N";
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransUploadedDocsCorrected.
     * @param value value to set the  TransUploadedDocsCorrected
     */
    public void setTransUploadedDocsCorrected(String value) {
        setAttributeInternal(TRANSUPLOADEDDOCSCORRECTED, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link viewSeafarerDocsOcVO.
     */
    public RowIterator getviewSeafarerDocsOcVO() {
        return (RowIterator)getAttributeInternal(VIEWSEAFARERDOCSOCVO);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link viewSeafarerDocsSqcVO.
     */
    public RowIterator getviewSeafarerDocsSqcVO() {
        return (RowIterator)getAttributeInternal(VIEWSEAFARERDOCSSQCVO);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SicdSeafarerVO.
     */
    public RowIterator getSicdSeafarerVO() {
        return (RowIterator)getAttributeInternal(SICDSEAFARERVO);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link ViewSeafarerDocsBooksVO.
     */
    public RowIterator getViewSeafarerDocsBooksVO() {
        return (RowIterator) getAttributeInternal(VIEWSEAFARERDOCSBOOKSVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> countriesLOV1.
     */
    public RowSet getcountriesLOV1() {
        return (RowSet)getAttributeInternal(COUNTRIESLOV1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> ViewVesselRO1.
     */
    public RowSet getViewVesselRO1() {
        return (RowSet)getAttributeInternal(VIEWVESSELRO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> GetCityNameByCityIdRO1.
     */
    public RowSet getGetCityNameByCityIdRO1() {
        return (RowSet) getAttributeInternal(GETCITYNAMEBYCITYIDRO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> YesNoLOV1.
     */
    public RowSet getYesNoLOV1() {
        return (RowSet) getAttributeInternal(YESNOLOV1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> IssueTypeLOV1.
     */
    public RowSet getIssueTypeLOV1() {
        return (RowSet) getAttributeInternal(ISSUETYPELOV1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> PreviousExsicdBookLOV1.
     */
    public RowSet getPreviousExsicdBookLOV1() {
        return (RowSet) getAttributeInternal(PREVIOUSEXSICDBOOKLOV1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> HoldReasonView1.
     */
    public RowSet getHoldReasonView1() {
        return (RowSet) getAttributeInternal(HOLDREASONVIEW1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> CitiesView1.
     */
    public RowSet getCitiesView1() {
        return (RowSet) getAttributeInternal(CITIESVIEW1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovReplacementUomView1.
     */
    public RowSet getLovReplacementUomView1() {
        return (RowSet) getAttributeInternal(LOVREPLACEMENTUOMVIEW1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> PreviousIdCardView1.
     */
    public RowSet getPreviousIdCardView1() {
        return (RowSet) getAttributeInternal(PREVIOUSIDCARDVIEW1);
    }

    public RMITradeCompApprovalAppModuleImpl getAm()
    {
        return (RMITradeCompApprovalAppModuleImpl) this.getApplicationModule();
    }
}

