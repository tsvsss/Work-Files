package com.rmi.tradecompapproval.adfbc.views.readonly;

import com.rmi.tradecompapproval.adfbc.services.RMITradeCompApprovalAppModuleImpl;

import com.rmi.tradecompapproval.adfbc.utils.AdfUtils;

import javax.faces.application.FacesMessage;

import oracle.adf.share.ADFContext;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 05 12:09:25 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DualViewRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Selectobjects0,
        TransViewOrders,
        TransProcesingCenter,
        TransMailFrom,
        TransMailMessage,
        TransMailTo,
        TransMailCc,
        TransMailBcc,
        TransMailAttachments,
        TransMailSubject,
        TransUserId,
        ViewOrdersTypeLOV1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return DualViewRowImpl.AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return DualViewRowImpl.AttributesEnum.firstIndex() + DualViewRowImpl.AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = DualViewRowImpl.AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SELECTOBJECTS0 = AttributesEnum.Selectobjects0.index();
    public static final int TRANSVIEWORDERS = AttributesEnum.TransViewOrders.index();
    public static final int TRANSPROCESINGCENTER = AttributesEnum.TransProcesingCenter.index();
    public static final int TRANSMAILFROM = AttributesEnum.TransMailFrom.index();
    public static final int TRANSMAILMESSAGE = AttributesEnum.TransMailMessage.index();
    public static final int TRANSMAILTO = AttributesEnum.TransMailTo.index();
    public static final int TRANSMAILCC = AttributesEnum.TransMailCc.index();
    public static final int TRANSMAILBCC = AttributesEnum.TransMailBcc.index();
    public static final int TRANSMAILATTACHMENTS = AttributesEnum.TransMailAttachments.index();
    public static final int TRANSMAILSUBJECT = AttributesEnum.TransMailSubject.index();
    public static final int TRANSUSERID = AttributesEnum.TransUserId.index();
    public static final int VIEWORDERSTYPELOV1 = AttributesEnum.ViewOrdersTypeLOV1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DualViewRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Selectobjects0.
     * @return the Selectobjects0
     */
    public String getSelectobjects0() {
        return (String) getAttributeInternal(SELECTOBJECTS0);
    }

    /**
     * Gets the attribute value for the calculated attribute TransViewOrders.
     * @return the TransViewOrders
     */
    public String getTransViewOrders() 
    {
        try 
        {
            if (getAttributeInternal(TRANSVIEWORDERS) != null)
                return (String) getAttributeInternal(TRANSVIEWORDERS);
            else
                return "M";
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR); 
        }
        return (String) getAttributeInternal(TRANSVIEWORDERS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransViewOrders.
     * @param value value to set the  TransViewOrders
     */
    public void setTransViewOrders(String value) 
    {            
        setAttributeInternal(TRANSVIEWORDERS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransProcesingCenter.
     * @return the TransProcesingCenter
     */
    public String getTransProcesingCenter() 
    {
        try 
        {
            if (getAttributeInternal(TRANSPROCESINGCENTER) == null && getTransUserId() != null &&
                getTransViewOrders() != null) {
                if (getTransViewOrders() != null && getTransViewOrders().equalsIgnoreCase("m")) {
                    ViewObjectImpl procsCntrVo = getAm().getProcessingCenterView1();
                    procsCntrVo.setNamedWhereClauseParam("pUserId", getTransUserId());
                    procsCntrVo.executeQuery();

                    Row[] frRows = procsCntrVo.getAllRowsInRange();

                    if (frRows.length > 0 && frRows[0].getAttribute("ProcesingCenter") != null &&
                        frRows[0].getAttribute("EmailId") != null) {
                        return (frRows[0].getAttribute("ProcesingCenter").toString());
                    }
                } else {
                    return ("All Processing Centers");
                }
            }
        } catch (Exception e) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        
        return (String) getAttributeInternal(TRANSPROCESINGCENTER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransProcesingCenter.
     * @param value value to set the  TransProcesingCenter
     */
    public void setTransProcesingCenter(String value) {
        setAttributeInternal(TRANSPROCESINGCENTER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransMailFrom.
     * @return the TransMailFrom
     */
    public String getTransMailFrom() {
        return (String) getAttributeInternal(TRANSMAILFROM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransMailFrom.
     * @param value value to set the  TransMailFrom
     */
    public void setTransMailFrom(String value) {
        setAttributeInternal(TRANSMAILFROM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransMailMessage.
     * @return the TransMailMessage
     */
    public String getTransMailMessage() {
        return (String) getAttributeInternal(TRANSMAILMESSAGE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransMailMessage.
     * @param value value to set the  TransMailMessage
     */
    public void setTransMailMessage(String value) {
        setAttributeInternal(TRANSMAILMESSAGE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransMailTo.
     * @return the TransMailTo
     */
    public String getTransMailTo() {
        return (String) getAttributeInternal(TRANSMAILTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransMailTo.
     * @param value value to set the  TransMailTo
     */
    public void setTransMailTo(String value) {
        setAttributeInternal(TRANSMAILTO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransMailCc.
     * @return the TransMailCc
     */
    public String getTransMailCc() {
        return (String) getAttributeInternal(TRANSMAILCC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransMailCc.
     * @param value value to set the  TransMailCc
     */
    public void setTransMailCc(String value) {
        setAttributeInternal(TRANSMAILCC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransMailBcc.
     * @return the TransMailBcc
     */
    public String getTransMailBcc() {
        return (String) getAttributeInternal(TRANSMAILBCC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransMailBcc.
     * @param value value to set the  TransMailBcc
     */
    public void setTransMailBcc(String value) {
        setAttributeInternal(TRANSMAILBCC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransMailAttachments.
     * @return the TransMailAttachments
     */
    public String getTransMailAttachments() {
        return (String) getAttributeInternal(TRANSMAILATTACHMENTS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransMailAttachments.
     * @param value value to set the  TransMailAttachments
     */
    public void setTransMailAttachments(String value) {
        setAttributeInternal(TRANSMAILATTACHMENTS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransMailSubject.
     * @return the TransMailSubject
     */
    public String getTransMailSubject() {
        return (String) getAttributeInternal(TRANSMAILSUBJECT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransMailSubject.
     * @param value value to set the  TransMailSubject
     */
    public void setTransMailSubject(String value) {
        setAttributeInternal(TRANSMAILSUBJECT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransUserId.
     * @return the TransUserId
     */
    public Integer getTransUserId() 
    {
        try 
        {
            if (getAttributeInternal(TRANSUSERID) == null) {
                Object usrId = ADFContext.getCurrent().getSessionScope().get("UserId");
                return (Integer.parseInt(usrId != null ? usrId.toString() : "-1"));
            }
        } catch (Exception nfe) {
            AdfUtils.addFormattedFacesErrorMessage("System encountered an exception while fetching data." +
                                             " Please contact your System Administrator." , 
                                             "", FacesMessage.SEVERITY_ERROR);
        }
        return (Integer) getAttributeInternal(TRANSUSERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransUserId.
     * @param value value to set the  TransUserId
     */
    public void setTransUserId(Integer value) {
        setAttributeInternal(TRANSUSERID, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> ViewOrdersTypeLOV1.
     */
    public RowSet getViewOrdersTypeLOV1() {
        return (RowSet) getAttributeInternal(VIEWORDERSTYPELOV1);
    }
    
    public RMITradeCompApprovalAppModuleImpl getAm()
    {
        return (RMITradeCompApprovalAppModuleImpl) getApplicationModule();
    }
}

